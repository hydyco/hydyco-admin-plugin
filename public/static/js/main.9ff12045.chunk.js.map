{"version":3,"sources":["http.tsx","store/actionTypes.ts","store/actionCreators.ts","components/Header.tsx","components/SideBar.tsx","types/global.ts","components/Badge.tsx","components/common/RequiredText.tsx","components/NewCollectionModal.tsx","components/DataTypes/Boolean.tsx","components/DataTypes/Number.tsx","components/DataTypes/Ref.tsx","components/DataTypes/String.tsx","components/DataTypes/Date.tsx","components/DataTypes/File.tsx","components/DataTypes/JSON.tsx","components/NewCollectionTypeModal.tsx","components/RemoveCollectionTypeModal.tsx","components/RemoveCollectionModal.tsx","pages/CollectionsPage.tsx","components/SchemaView.tsx","pages/SchemaFlowPage.tsx","components/DataFlow/RefSelect.tsx","components/File/FilesView.tsx","components/DataFlow/UploadFile.tsx","components/DataFlow/JSONEditor.tsx","components/DataFlow/CreateCollectionAction.tsx","components/DataFlow/ShowCollectionAction.tsx","pages/DataFlowPage.tsx","pages/FilePage.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["EOperations","INIT_COLLECTION","ADD_COLLECTION","REMOVE_COLLECTION","SET_COLLECTION","UPDATE_COLLECTION","upsertCollectionData","collection","axios","post","name","deleteCollection","delete","crudCollection","crudBody","selectCollection","disPatchAction","type","actionTypes","updateCollection","action","dispatch","a","AppHeader","location","useLocation","headerName","collections","data","pathname","split","subHeaderName","ghost","title","subTitle","Sider","Layout","SideBar","ESchemaTypes","ERelationShip","useState","collapsed","setCollapsed","selectedMenu","collapsible","collapsedWidth","theme","onCollapse","className","src","alt","style","marginTop","mode","defaultSelectedKeys","Item","icon","LineChartOutlined","to","AlignCenterOutlined","DatabaseOutlined","orientation","ApiTwoTone","FileOutlined","Badge","toLowerCase","color","string","number","boolean","ref","date","file","json","getBadgeColor","fontWeight","getBadgeName","Text","Typography","RequiredText","message","fontSize","strong","NewCollectionModal","isModalVisible","setIsModalVisible","edit","selectedCollection","collectionName","setCollectionName","showData","setShowData","operations","list","create","read","update","deleteAll","crudOperation","setCrudOperation","nameInput","useRef","useDispatch","newCollection","React","useCallback","addCollection","setSelectedCollection","updateCollectionAction","handleOk","length","col","show","find","error","id","uuidv4","schema","fields","x","Math","floor","y","useEffect","current","focus","onClick","PlusOutlined","visible","onOk","onCancel","direction","placeholder","value","onChange","target","test","onKeyDown","e","key","checked","Object","keys","map","Boolean","state","setState","updateState","updatedData","prev","width","defaultValue","checkedChildren","unCheckedChildren","defaultChecked","default","required","settings","index","trim","unique","uppercase","lowercase","Number","typeSettings","setTypeSettings","getStateSettings","filter","includes","obj","getKeyValue","min","max","Group","forEach","minLength","maxLength","Ref","useSelector","shallowEqual","overflow","relationship","Button","hasMany","hasOne","autopopulate","height","textTransform","TextArea","Input","String","enumText","setEnumText","enum","join","showCount","lg","disabled","Date","File","JSON","NewCollectionTypeModal","editSchema","saveCollection","footer","schemas","updatedCollection","confirm","Modal","RemoveCollectionModal","removeCollectionType","ExclamationCircleOutlined","content","deleteType","console","log","deleteCollectionAction","success","Content","Search","CreateSchema","setEditSchema","openCollectionModal","setOpenCollectionModal","editCollectionModal","setEditCollectionModal","localCollections","setLocalCollections","setSelectCollection","removeCollection","backgroundColor","extra","padding","size","searchCollections","grid","gutter","xs","sm","md","xl","xxl","dataSource","renderItem","cursor","display","placeItems","letterSpacing","marginLeft","span","paddingLeft","operation","bordered","boxShadow","justifyContent","bodyStyle","borderBottom","align","EditOutlined","DeleteOutlined","RemoveCollectionTypeModal","SchemaView","field","margin","CaretDownOutlined","CaretRightOutlined","transition","textAlign","paddingRight","SchemaFlowPage","collectionNodes","setCollectionNodes","position","setPosition","mapNodes","nodes","push","label","borderColor","borderRadius","elementsNodes","source","animated","labelStyle","checkIfRefExists","parseInt","toString","updateCollectionPosition","defaultPosition","elements","minZoom","defaultZoom","snapToGrid","snapGrid","onlyRenderVisibleElements","onNodeDragStop","event","node","Option","Select","RefSelect","schemaValue","selectedRecord","setData","search","setSearch","searchValues","setSearchValues","setValue","makeSearch","model","query","options","d","_id","rules","initialValue","Array","isArray","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","s","v","notFoundContent","undefined","Dragger","Upload","FilesView","setCustomFiles","deleteButton","filterButton","setList","selectedFiles","setSelectedFiles","loading","setLoading","uploadModal","setUploadModal","pageSize","pagination","setPagination","props","multiple","defaultFileList","info","status","fileList","onDrop","dataTransfer","files","getCollectionList","deleteManyRecord","active","total","FilterOutlined","l","border","tempArray","fileId","preview","filename","fallback","flexDirection","originalname","prettySize","mimetype","page","p","destroyOnClose","InboxOutlined","UploadFile","form","setFieldsValue","JSONEditor","jsObject","jsonData","setJsonData","locale","CreateCollectionAction","Form","useForm","createData","formData","body","window","history","back","response","onBack","marginRight","onFinish","values","onFinishFailed","errorInfo","layout","moment","htmlType","DisplayData","borderLeft","ShowCollectionAction","Column","Table","DataFlowPage","useParams","useHistory","params","queryString","parse","href","columns","setColumns","setSelectedRecord","rowSelection","setRowSelection","column","deleteRecord","dataColumns","dataIndex","fixed","rowKey","record","selectedRowKeys","selectedRows","filters","sorter","render","text","format","shape","EyeOutlined","flexWrap","paddingTop","paddingBottom","alignContent","FilePage","App","get","initialState","basename","Header","path","exact","component","CollectionsPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","concat","sort","b","localeCompare","updatedCollections","article","store","createStore","applyMiddleware","thunk","process","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9ff12045.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { ICollection } from \"./types/global\";\n\nexport function getAllCollectionList(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/model/list\");\n}\n\nexport function upsertCollectionData(\n  collection: ICollection\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/create/\" + collection.name, collection);\n}\n\nexport function deleteCollection({\n  name,\n}: ICollection): Promise<AxiosResponse> {\n  return axios.delete(\"/admin/model/delete/\" + name);\n}\n\nexport function crudCollection(crudBody: ICurdBody): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/crud/\", crudBody);\n}\n\nexport enum EOperations {\n  list = \"list\",\n  create = \"create\",\n  update = \"update\",\n  delete = \"delete\",\n  deleteAll = \"deleteAll\",\n  ref = \"ref\",\n}\n\ninterface ICurdData {\n  id?: string | Array<string>;\n  query?: {\n    pagination?: {\n      current: number;\n      pageSize: number;\n    };\n    find?: {};\n    search?: string;\n  };\n  body?: {};\n}\n\nexport interface ICurdBody {\n  model: string;\n  operations: EOperations;\n  data: ICurdData;\n}\n","export const INIT_COLLECTION = \"INIT_COLLECTION\";\nexport const ADD_COLLECTION = \"ADD_COLLECTION\";\nexport const REMOVE_COLLECTION = \"REMOVE_COLLECTION\";\nexport const SET_COLLECTION = \"SET_COLLECTION\";\nexport const UPDATE_COLLECTION = \"UPDATE_COLLECTION\";\n","import * as actionTypes from \"./actionTypes\";\n\nimport { ICollection, CollectionAction, DispatchType } from \"../types/global\";\nimport {\n  deleteCollection,\n  getAllCollectionList,\n  upsertCollectionData,\n} from \"../http\";\nimport { AxiosResponse } from \"axios\";\n\nexport function addCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.ADD_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function removeCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.REMOVE_COLLECTION,\n    collection,\n  };\n\n  return async (dispatch: DispatchType) => {\n    await deleteCollection(collection);\n    dispatch(action);\n  };\n}\n\nexport function selectCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.SET_COLLECTION,\n    collection,\n  };\n  return disPatchAction(action);\n}\n\nexport function updateCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.UPDATE_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function simulateHttpRequest(collection: CollectionAction) {\n  return (dispatch: DispatchType) => {\n    setTimeout(() => {\n      dispatch(collection);\n    }, 500);\n  };\n}\n\nconst disPatchAction = (collection: CollectionAction) => {\n  return (dispatch: DispatchType) => dispatch(collection);\n};\n\nexport const initData = () => async (dispatch: DispatchType) => {\n  let { data: initialState }: AxiosResponse = await getAllCollectionList();\n  const collection: CollectionAction = {\n    type: actionTypes.INIT_COLLECTION,\n    collections: initialState,\n    collection: initialState[0] || {},\n  };\n\n  dispatch(collection);\n};\n","import { useLocation } from \"react-router-dom\";\nimport { PageHeader } from \"antd\";\n\nfunction AppHeader() {\n  const location = useLocation();\n  const headerNames: any = {\n    \"\": \"Schema Flow\",\n    collections: \"Schema\",\n    data: \"Data Flow\",\n  };\n  const subHeaderNames: any = {\n    \"\": \"Visualize you database\",\n    collections: \"Manage your mongoose schema\",\n    data: \"Manage your data\",\n  };\n\n  const headerName = headerNames[location.pathname.split(\"/\")[1]];\n\n  const subHeaderName = subHeaderNames[location.pathname.split(\"/\")[1]];\n\n  if (headerName === \"Data Flow\") return null;\n  return (\n    <>\n      {headerName && <PageHeader ghost={false} title={headerName} subTitle={subHeaderName} />}\n    </>\n  );\n}\n\nexport default AppHeader;\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Divider } from \"antd\";\nimport {\n  AlignCenterOutlined,\n  LineChartOutlined,\n  DatabaseOutlined,\n  FileOutlined,\n  ApiTwoTone\n} from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\n\n\nconst { Sider } = Layout;\n\nfunction SideBar() {\n  const location = useLocation();\n  const [collapsed, setCollapsed] = useState(false)\n\n  const selectedMenu = location.pathname.split(\"/\")[1];\n\n\n  return (\n    <Sider\n      collapsible={true}\n      collapsedWidth=\"50\"\n      theme=\"light\"\n      collapsed={collapsed}\n      onCollapse={(collapsed, type) => {\n        setCollapsed(collapsed)\n\n      }}\n    >\n      <div className=\"logo-container\">\n        <img className={collapsed ? \"logo-small\" : \"logo-large\"} src={collapsed ? \"/img/o-logo.png\" : \"/img/black-logo.png\"} alt=\"\"></img>\n      </div>\n      <Menu\n        style={{ marginTop: 10 }}\n        mode=\"inline\"\n        defaultSelectedKeys={[selectedMenu]}\n      >\n        <Menu.Item key=\"\" icon={<LineChartOutlined />}>\n          <Link to=\"/\">Schema Flow</Link>\n        </Menu.Item>\n        <Menu.Item key=\"collections\" icon={<AlignCenterOutlined />}>\n          <Link to=\"/collections\">Collections</Link>\n        </Menu.Item>\n        <Menu.Item key=\"data\" icon={<DatabaseOutlined />}>\n          <Link to=\"/data\">Data Flow</Link>\n        </Menu.Item>\n\n        <Divider orientation=\"left\">\n          {collapsed ? < ApiTwoTone /> : <b>Plugins</b>}\n        </Divider>\n        <Menu.Item key=\"files\" icon={<FileOutlined />}>\n          <Link to=\"/files\">Files</Link>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n  );\n}\n\nexport default SideBar;\n","export enum ESchemaTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  ref = \"ref\",\n  date = \"date\",\n  array = \"array\",\n  object = \"object\",\n  enums = \"enums\",\n  file = \"file\",\n  json = \"json\",\n}\n\nexport enum ERelationShip {\n  hasOne = \"hasone\",\n  hasMany = \"hasmany\",\n  none = \"none\",\n}\n\nexport interface ICollectionSchema {\n  name: string;\n  type: ESchemaTypes;\n  default?: any;\n  required?: boolean;\n  index?: boolean;\n  unique?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  trim?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  ref?: string;\n  relationship?: ERelationShip;\n  enum: Array<string>;\n  autopopulate: boolean;\n}\n\nexport interface ICrudOperations {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\n\nexport interface ICollection {\n  id: string;\n  name: string;\n  schema: any;\n  fields: number;\n  show: boolean;\n  operations: ICrudOperations;\n  x: Number;\n  y: Number;\n}\n\nexport type CollectionsState = {\n  collections: ICollection[];\n  selectedCollection: ICollection | undefined;\n  newCollection?: ICollection;\n};\n\nexport type CollectionAction = {\n  type: string;\n  collection: ICollection;\n  collections?: Array<ICollection>;\n};\n\nexport type DispatchType = (args: CollectionAction) => CollectionAction;\n","import { Tag } from \"antd\";\n\nimport { ESchemaTypes } from \"../types/global\";\n\nfunction Badge({ type }: { type: any }) {\n  type = type.toLowerCase();\n  const getBadgeColor = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"#f50\";\n      case ESchemaTypes.number:\n        return \"#d4b106\";\n      case ESchemaTypes.boolean:\n        return \"#52c41a\";\n      case ESchemaTypes.ref:\n        return \"#13c2c2\";\n      case ESchemaTypes.date:\n        return \"#1890ff\";\n      case ESchemaTypes.file:\n        return \"#2f54eb\";\n      case ESchemaTypes.json:\n        return \"#531dab\";\n      default:\n        return \"#8c8c8c\";\n    }\n  };\n\n  const getBadgeName = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"Abc\";\n      case ESchemaTypes.number:\n        return \"123\";\n      case ESchemaTypes.boolean:\n        return \"true\";\n      case ESchemaTypes.ref:\n        return \"Relation\";\n      case ESchemaTypes.date:\n        return \"17 Aug\";\n      case ESchemaTypes.file:\n        return \"File\";\n      case ESchemaTypes.json:\n        return \"JSON\";\n      default:\n        return \"NA\";\n    }\n  };\n\n  return (\n    <div>\n      <Tag color={getBadgeColor()} style={{ fontWeight: \"bold\" }}>\n        {getBadgeName()}\n      </Tag>\n    </div>\n  );\n}\n\nexport default Badge;\n","import { Typography } from 'antd'\n\nconst { Text } = Typography;\n\nexport default function RequiredText({ message = \"This field is required\" }: { message?: string }) {\n    return (\n        <Text type=\"danger\" style={{ fontSize: 12 }} strong >{message}</Text>\n    )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Input, message, Checkbox, Tag, Space } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { addCollection, removeCollection, selectCollection, updateCollection } from \"../store/actionCreators\";\n\nimport { ICollection, ICrudOperations } from \"../types/global\";\n\nimport RequiredText from \"./common/RequiredText\";\n\nfunction NewCollectionModal({\n  collections,\n  isModalVisible,\n  setIsModalVisible,\n  edit,\n  selectedCollection,\n}: {\n  collections: Array<ICollection>;\n  isModalVisible: boolean;\n  setIsModalVisible: Function;\n  edit?: boolean;\n  selectedCollection?: ICollection;\n}) {\n  const [collectionName, setCollectionName] = useState(\n    selectedCollection ? selectedCollection.name : \"\"\n  );\n  const [showData, setShowData] = useState(true);\n  const [crudOperation, setCrudOperation] = useState<ICrudOperations>(\n    selectedCollection\n      ? selectedCollection.operations\n      : {\n        list: true,\n        create: true,\n        read: true,\n        update: true,\n        delete: true,\n        deleteAll: true,\n      }\n  );\n  const nameInput = useRef<any>();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const newCollection = React.useCallback(\n    (collection: ICollection) => dispatch(addCollection(collection)),\n    [dispatch]\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const error = () => {\n    message.error(\"Collection already exists\");\n  };\n\n  const handleOk = () => {\n    if (collectionName.length === 0) return;\n    if (!edit) {\n      if (\n        collections.find((collection) => collection.name === collectionName)\n      ) {\n        error();\n        return;\n      }\n      const col: ICollection = {\n        id: uuidv4(),\n        name: collectionName,\n        schema: {},\n        fields: 0,\n        show: showData,\n        operations: crudOperation,\n        x: Math.floor(collections.length % 4) * 300 + 20,\n        y: (Math.floor(collections.length / 4) + 1) * 60,\n      };\n      newCollection(col);\n      setSelectedCollection(col);\n      setCollectionName(\"\");\n    } else {\n      const col = {\n        ...selectedCollection,\n        name: collectionName,\n        show: showData,\n        operations: crudOperation,\n      }\n\n      updateCollectionAction(col)\n      setSelectedCollection(col);\n\n    }\n\n\n\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (nameInput.current) {\n      nameInput.current.focus();\n    }\n  }, []);\n  return (\n    <>\n      <Button className=\"button-blue\" onClick={showModal}>\n        {edit ? \"Edit\" : \"Create New\"}\n      </Button>\n      <Modal\n        title={\n          <span>\n            {\" \"}\n            <PlusOutlined /> Create new collection\n          </span>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            ref={nameInput}\n            placeholder=\"Collection Name\"\n            value={collectionName}\n            onChange={({ target: { value } }) => {\n              if (/[^a-zA-Z]/.test(value)) return;\n              setCollectionName(value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleOk();\n              }\n            }}\n          />\n          {collectionName.length === 0 && <RequiredText />}\n\n          <Checkbox\n            onChange={() => setShowData(!showData)}\n            value={showData}\n            checked={showData}\n          >\n            {\" \"}\n            <b>Show on data flow ?</b>\n          </Checkbox>\n\n          <Tag color=\"geekblue\">Allowed Operations</Tag>\n          <div>\n            {Object.keys(crudOperation).map((key) => (\n              <Checkbox\n                onChange={() =>\n                  setCrudOperation({\n                    ...crudOperation,\n                    [key]: !crudOperation[key],\n                  })\n                }\n                checked={crudOperation[key]}\n                value={crudOperation[key]}\n              >\n                {\" \"}\n                <b>{key}</b>\n              </Checkbox>\n            ))}\n          </div>\n        </Space>\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionModal;\n","import { Space, Switch, Input } from \"antd\";\nimport React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Boolean({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"boolean\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            defaultValue={state.name}\n          />\n          <span>Default value</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.default}\n            onChange={(e) => updateState(\"default\", e)}\n          />\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Boolean;\n","import { Space, InputNumber, Input, Checkbox } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { useState, useEffect } from \"react\";\n\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction Number({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n  }, [state]);\n\n\n  return (\n    <>\n      {state.type === \"number\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <InputNumber\n            min={1}\n            max={10}\n            onChange={(e) => updateState(\"default\", e)}\n            placeholder={\"10\"}\n            style={{ width: \"100%\" }}\n          />\n\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{ width: \"100%\" }}\n            onChange={(e) => {\n              const settings: any = {\n                index: false,\n                required: false,\n                unique: false,\n              };\n\n              setState((prev: ICollectionSchema) => {\n                Object.keys(settings).forEach((key) => {\n                  if (e.includes(key)) {\n                    settings[key] = true;\n                  }\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Space direction=\"vertical\">\n              <Checkbox value=\"required\">Required</Checkbox>\n              <Checkbox value=\"index\">Index</Checkbox>\n              <Checkbox value=\"unique\">Unique</Checkbox>\n              <h4>Minimum Length</h4>\n              <InputNumber\n                min={0}\n                value={state.minLength || 0}\n                onChange={(number) => updateState(\"minLength\", number)}\n              />\n              <h4>Maximum Length</h4>\n\n              <InputNumber\n                min={0}\n                value={state.maxLength || 0}\n                onChange={(number) => updateState(\"maxLength\", number)}\n              />\n            </Space>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Number;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction Ref({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"ref\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            {collections.map(({ name }, index) => (\n              <Radio.Button\n                value={name}\n                style={{ textTransform: \"capitalize\" }}\n                key={index}\n              >\n                {name}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Ref;\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Input, Checkbox, InputNumber, Row, Col } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nconst { TextArea } = Input;\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction String({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const [enumText, setEnumText] = useState(\"\");\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n    if (state.enum.length) {\n      setEnumText(state.enum.join(\"\\n\"));\n    }\n  }, [state]);\n\n  return (\n    <>\n      {state.type === \"string\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            value={state.name}\n          />\n          <RequiredText />\n          <span>Default value</span>\n          <Input\n            onChange={(e) => updateState(\"default\", e.target.value)}\n            value={state.default}\n            placeholder=\"Keep empty for not setting the value\"\n          />\n          <span>Enums</span>\n\n          <TextArea\n            showCount\n            maxLength={100}\n            style={{ width: \"100%\" }}\n            value={enumText}\n            placeholder=\"Keep empty for not setting the value\"\n            onChange={(e) => {\n              setEnumText(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                updateState(\"enum\", enumText.trim().split(\"\\n\"));\n              }\n            }}\n          />\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            onChange={(e) => {\n              setState((prev: ICollectionSchema) => {\n                if (!e.includes(\"maxLength\")) {\n                  prev[\"maxLength\"] = 0;\n                }\n                if (!e.includes(\"minLength\")) {\n                  prev[\"minLength\"] = 0;\n                }\n                Object.keys(settings).forEach((key: any) => {\n                  if (![\"maxLength\", \"minLength\"].includes(key))\n                    settings[key] = e.includes(key);\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Row>\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"required\">Required</Checkbox>\n                <Checkbox value=\"index\">Index</Checkbox>\n                <Checkbox value=\"unique\">Unique</Checkbox>\n                <Checkbox\n                  value=\"lowercase\"\n                  disabled={typeSettings.includes(\"uppercase\")}\n                >\n                  Lowercase\n                </Checkbox>\n                <Checkbox\n                  value=\"uppercase\"\n                  disabled={typeSettings.includes(\"lowercase\")}\n                >\n                  Uppercase\n                </Checkbox>\n              </Col>\n\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"trim\">Trim</Checkbox>\n\n                <h4>Minimum Length</h4>\n                <InputNumber\n                  min={0}\n                  value={state.minLength || 0}\n                  onChange={(number) => updateState(\"minLength\", number)}\n                />\n                <h4>Maximum Length</h4>\n\n                <InputNumber\n                  min={0}\n                  value={state.maxLength || 0}\n                  onChange={(number) => updateState(\"maxLength\", number)}\n                />\n              </Col>\n\n\n            </Row>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default String;\n","import { Space, Input, DatePicker } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Date({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"date\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <DatePicker onChange={(e) => updateState(\"default\", e)} />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Date;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n\n} from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction File({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n\n  return (\n    <>\n      {state.type === \"file\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            <Radio.Button\n              value={\"file\"}\n              style={{ textTransform: \"capitalize\" }}\n            >\n              File\n            </Radio.Button>\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default File;\n","import React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport { Input, Space } from \"antd\";\nimport RequiredText from \"../common/RequiredText\";\n\nfunction JSON({\n    state,\n    setState,\n}: {\n    state: ICollectionSchema;\n    setState: Function;\n}) {\n    const updateState = (key: string, value: any) => {\n        const updatedData: any = {};\n        updatedData[key] = value;\n        setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n    };\n    return (\n        <div>\n            {state.type === \"json\" && (\n\n                <Space direction=\"vertical\">\n                    <span>Name for the type</span>\n                    <Input\n                        placeholder=\"Type Name\"\n                        onChange={(e) => updateState(\"name\", e.target.value)}\n                    />\n                    <RequiredText />\n                </Space>\n            )}\n        </div>\n    );\n}\n\nexport default JSON;\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Dispatch } from \"redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Space, Button, Radio, Modal, message } from \"antd\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Boolean from \"./DataTypes/Boolean\";\nimport Number from \"./DataTypes/Number\";\nimport Ref from \"./DataTypes/Ref\";\nimport String from \"./DataTypes/String\";\nimport Date from \"./DataTypes/Date\";\nimport File from \"./DataTypes/File\";\n\nimport {\n  ICollection,\n  ESchemaTypes,\n  ICollectionSchema,\n  ERelationShip,\n} from \"../types/global\";\nimport { updateCollection } from \"../store/actionCreators\";\nimport JSON from \"./DataTypes/JSON\";\n\nfunction NewCollectionTypeModal({\n  selectedCollection,\n  editSchema,\n}: {\n  selectedCollection: ICollection;\n  editSchema?: ICollectionSchema;\n}) {\n  // variables\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const error = () => {\n    message.error(\"Type already exist\");\n  };\n\n\n  // local state\n  const [state, setState] = useState<ICollectionSchema>({\n    name: \"\",\n    type: ESchemaTypes.string,\n    default: \"\",\n    index: false,\n    maxLength: 0,\n    minLength: 0,\n    required: false,\n    trim: false,\n    unique: false,\n    uppercase: false,\n    lowercase: false,\n    enum: [],\n    ref: \"none\",\n    relationship: ERelationShip.hasMany,\n    autopopulate: true,\n  });\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const resetState = () => {\n    setState({\n      name: \"\",\n      type: ESchemaTypes.string,\n      default: \"\",\n      index: false,\n      maxLength: 0,\n      minLength: 0,\n      required: false,\n      trim: false,\n      unique: false,\n      uppercase: false,\n      lowercase: false,\n      ref: \"none\",\n      relationship: ERelationShip.hasMany,\n      enum: [],\n      autopopulate: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      resetState();\n    }\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    if (editSchema) {\n      setState(editSchema)\n      setIsModalVisible(true);\n    }\n  }, [editSchema]);\n\n  const footer = (\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        const schemas: any = {\n          ...selectedCollection.schema,\n        };\n        if (!editSchema && schemas[state.name]) {\n          error();\n          return;\n        }\n\n        schemas[state.name] = state;\n\n        const updatedCollection: ICollection = {\n          ...selectedCollection,\n          schema: schemas,\n          fields: Object.keys(schemas).length,\n        };\n        saveCollection(updatedCollection);\n        handleOk();\n      }}\n      disabled={state.name.length === 0}\n    >\n      {\"Save\"}\n    </Button>\n  );\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={showModal}\n        style={{\n          width: \"100%\",\n          height: 50,\n          textTransform: \"uppercase\",\n          fontWeight: \"bold\",\n        }}\n      >\n        Add New Field\n      </Button>\n      <Modal\n        title={\n          <Space>\n            {\" \"}\n            <PlusOutlined />\n            <Radio.Group\n              onChange={(e) => {\n                setState((prev: any) => ({ ...prev, type: e.target.value }));\n              }}\n              value={state.type}\n            >\n              <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n              <Radio.Button value={ESchemaTypes.boolean}>Boolean</Radio.Button>\n              <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n              <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n              <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n              <Radio.Button value={ESchemaTypes.file}>File</Radio.Button>\n              <Radio.Button value={ESchemaTypes.json}>JSON</Radio.Button>\n            </Radio.Group>\n          </Space>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={footer}\n        width={800}\n      >\n        <String state={state} setState={setState} />\n        <Boolean state={state} setState={setState} />\n\n        <Number state={state} setState={setState} />\n\n        <Ref state={state} setState={setState} />\n        <Date state={state} setState={setState} />\n\n        <File state={state} setState={setState} />\n        <JSON state={state} setState={setState} />\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionTypeModal;\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  removeCollectionType,\n  collection,\n  key,\n}: {\n  removeCollectionType: Function;\n  collection: ICollection;\n  key: any;\n}) {\n  const deleteType = () => {\n    const { schema } = collection;\n    delete schema[key];\n    collection.schema = schema;\n    collection.fields = collection.fields - 1;\n    removeCollectionType(collection);\n  };\n\n  return confirm({\n    title: \"Sure you want to delete type?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteType();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import { Modal, message } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  collection,\n  deleteCollectionAction,\n}: {\n  collection: ICollection;\n  deleteCollectionAction: Function;\n}) {\n  const deleteCollection = () => {\n    deleteCollectionAction(collection);\n    message.success(\"Collection removed\");\n  };\n\n  return confirm({\n    title: \"Sure you want to delete this collection?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteCollection();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  List,\n  Button,\n  Space,\n  Card,\n  Tag,\n  Layout,\n  Input,\n  PageHeader,\n  message,\n  Divider\n} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nimport Badge from \"../components/Badge\";\n\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  selectCollection,\n  updateCollection,\n  removeCollection,\n} from \"../store/actionCreators\";\n\nimport NewCollectionModal from \"../components/NewCollectionModal\";\nimport EditCollectionModal from \"../components/NewCollectionModal\";\nimport NewCollectionTypeModal from \"../components/NewCollectionTypeModal\";\nimport RemoveCollectionTypeModal from \"../components/RemoveCollectionTypeModal\";\nimport RemoveCollectionModal from \"../components/RemoveCollectionModal\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  ICollectionSchema,\n} from \"../types/global\";\n\n// define vars\nconst { Sider, Content } = Layout;\nconst { Search } = Input;\n\nfunction CreateSchema() {\n  const [editSchema, setEditSchema] = useState<ICollectionSchema>();\n  const [openCollectionModal, setOpenCollectionModal] = useState(false);\n  const [editCollectionModal, setEditCollectionModal] = useState(false);\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [localCollections, setLocalCollections] = useState<Array<ICollection>>(\n    []\n  );\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const setSelectCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const removeCollectionType = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const deleteCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(removeCollection(collection)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (!selectedCollection && collections.length) {\n      setSelectCollection(collections[0]);\n    }\n    setLocalCollections(collections);\n  }, [collections]);\n\n  return (\n    <>\n      <Layout style={{ height: \"100%\" }}>\n        <Sider\n          width=\"400\"\n          theme=\"light\"\n          style={{\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <PageHeader\n            title=\"Collection List\"\n            extra={[\n              <Tag color=\"green\">\n                Total {collections.length}\n              </Tag>,\n              <NewCollectionModal\n                collections={collections}\n                isModalVisible={openCollectionModal}\n                setIsModalVisible={setOpenCollectionModal}\n              />,\n            ]}\n          />\n\n          <div style={{ padding: 10 }}>\n            <Input\n              size=\"large\"\n              placeholder=\"Search Collection\"\n              onChange={(e) => {\n                let searchCollections: Array<ICollection> = [];\n\n                if (e.target.value.length) {\n                  searchCollections = collections.filter(\n                    (collection: ICollection) =>\n                      collection.name\n                        .trim()\n                        .toLowerCase()\n                        .includes(e.target.value.toLowerCase())\n                  );\n                  setLocalCollections(searchCollections);\n                } else {\n                  setLocalCollections(collections);\n                }\n              }}\n            />\n          </div>\n\n          <List\n            grid={{\n              gutter: 10,\n              xs: 1,\n              sm: 1,\n              md: 1,\n              lg: 1,\n              xl: 1,\n              xxl: 1,\n            }}\n            dataSource={localCollections}\n            style={{ padding: 10, height: \"80vh\", overflow: \"auto\" }}\n            renderItem={(collection, index) => (\n              <List.Item key={index}>\n                <Tag\n                  key={index}\n                  style={{\n                    textTransform: \"capitalize\",\n                    cursor: \"pointer\",\n                    height: 55,\n                    width: \"100%\",\n                    display: \"grid\",\n                    placeItems: \"left\",\n                    fontSize: \"20px\",\n                    letterSpacing: 1.3,\n                    padding: 10\n                  }}\n                  color={\n                    collection.name === selectedCollection?.name\n                      ? \"orange\"\n                      : collection.show ? \"default\" : \"error\"\n                  }\n                  onClick={() => {\n                    setSelectCollection(collection);\n                  }}\n                >\n                  {collection.name}\n\n                  <span style={{ fontSize: 12 }}>\n                    {collection.fields} fields\n                    <span style={{ fontSize: 12, marginLeft: 10 }}>\n                      {collection.show ? null : \"Hidden\"}\n                    </span>\n                  </span>\n                </Tag>\n              </List.Item>\n            )}\n          />\n        </Sider>\n\n        {selectedCollection && (\n          <Layout style={{ backgroundColor: \"#fafafb\", height: \"100%\" }}>\n            <Content>\n              <PageHeader\n                title={\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {selectedCollection.name}\n                  </span>\n                }\n                extra={selectedCollection.show ? [\n                  <Space>\n                    < EditCollectionModal collections={collections}\n\n                      isModalVisible={editCollectionModal}\n                      setIsModalVisible={setEditCollectionModal}\n                      edit={true}\n                      selectedCollection={selectedCollection}\n\n                    />\n                    <Button\n                      className=\"button-green\"\n\n                      onClick={() => {\n                        saveCollection(selectedCollection);\n                        message.success(\"Collection Saved\");\n                      }}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      className=\"button-red\"\n                      onClick={() => {\n                        RemoveCollectionModal({\n                          deleteCollectionAction: deleteCollectionAction,\n                          collection: selectedCollection,\n                        });\n                      }}\n                    >\n                      Delete\n                    </Button>\n                  </Space>,\n                ] : [\n                  <Tag color=\"geekblue\" >Hidden</Tag>\n                ]}\n              />\n\n              <Row>\n                <Col span={24} style={{ paddingLeft: 20 }}>\n                  <h5>Allowed Operations</h5>\n                  {Object.keys(selectedCollection.operations).map(operation => <Tag color={selectedCollection.operations[operation] ? \"geekblue\" : \"volcano\"} >{operation}</Tag>)}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col span={24} style={{ padding: 20 }}>\n                  <Card\n                    bordered={false}\n                    style={{ boxShadow: \"rgb(227 233 243) 0px 2px 4px\" }}\n                    title={\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <h1>{`${selectedCollection.fields} fields`} </h1>\n                      </div>\n                    }\n                    bodyStyle={{ padding: 0 }}\n                  >\n                    {Object.keys(selectedCollection.schema).map(\n                      (key: any, index) => {\n                        const schema: ICollectionSchema =\n                          selectedCollection.schema[key];\n                        const { type } = schema;\n                        return (\n                          <Row\n                            gutter={0}\n                            style={{\n                              height: 60,\n                              padding: 15,\n                              borderBottom: \"1px solid #f0f0f0\",\n                            }}\n                            align=\"middle\"\n                            key={index}\n                          >\n                            <Col span={6}>\n                              <Badge type={type} />\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  fontWeight: 500,\n                                }}\n                              >\n                                {key}\n                              </span>{\" \"}\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  textTransform: \"capitalize\",\n                                }}\n                              >\n                                {type}\n                              </span>{\" \"}\n                            </Col>\n                            <Col\n                              span={6}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-end\",\n                              }}\n                            >\n                              {selectedCollection.show && <Space size={25}>\n                                <EditOutlined\n                                  style={{ color: \"#8c8c8c\", fontSize: 20 }}\n                                  onClick={() =>\n                                    setEditSchema({ ...schema, name: key })\n                                  }\n                                />\n\n                                <DeleteOutlined\n                                  style={{ color: \"#cf1322\", fontSize: 20 }}\n                                  className=\"pointer\"\n                                  onClick={() =>\n                                    RemoveCollectionTypeModal({\n                                      removeCollectionType,\n                                      collection: selectedCollection,\n                                      key,\n                                    })\n                                  }\n                                />\n                              </Space>}\n                            </Col>\n                          </Row>\n                        );\n                      }\n                    )}\n\n                    {selectedCollection.show && <NewCollectionTypeModal\n                      selectedCollection={selectedCollection}\n                      editSchema={editSchema}\n                    />}\n                  </Card>\n                </Col>\n              </Row>\n            </Content>\n          </Layout>\n        )}\n      </Layout>\n    </>\n  );\n}\n\nexport default CreateSchema;\n","import { ICollection } from \"../types/global\";\nimport { useState } from \"react\";\nimport { CaretRightOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nfunction SchemaView({ collection }: { collection: ICollection }) {\n  const dataSource = Object.keys(collection.schema).map((key, index) => ({\n    key: index,\n    field: key,\n    type: collection.schema[key].type,\n  }));\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <>\n      <h2\n        style={{\n          backgroundColor: \"#1890ff\",\n          textTransform: \"capitalize\",\n          padding: 10,\n          color: \"white\",\n          letterSpacing: 1.5,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: 0,\n        }}\n      >\n        {collection.name}\n        <span\n          style={{ cursor: collapsed ? \"zoom-out\" : \"zoom-in\" }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          {\" \"}\n          {!collapsed ? <CaretRightOutlined /> : <CaretDownOutlined />}{\" \"}\n        </span>\n      </h2>\n      {collapsed && (\n        <table style={{ width: \"100%\", transition: \"5s\" }}>\n          {dataSource.map((data) => (\n            <tr key={data.key}>\n              <td\n                style={{\n                  paddingLeft: 8,\n                  textAlign: \"left\",\n                  fontSize: 16,\n                  letterSpacing: 1.2,\n                }}\n              >\n                {data.field}\n              </td>\n              <td\n                style={{\n                  paddingRight: 8,\n                  textAlign: \"right\",\n                  fontSize: 14,\n                  letterSpacing: 1.2,\n                  color: \"#8c8c8c\",\n                }}\n              >\n                {data.type}\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default SchemaView;\n","import { useEffect, useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\nimport { CollectionsState, ESchemaTypes, ICollection } from \"../types/global\";\nimport { upsertCollectionData } from \"../http\";\n\nimport SchemaView from \"../components/SchemaView\";\n\nconst SchemaFlowPage = () => {\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [collectionNodes, setCollectionNodes] = useState([]);\n  const [position, setPosition] = useState<[number, number]>([0, 0]);\n\n  const checkIfRefExists = (\n    schema: any,\n    collectionName: string,\n    id: string\n  ) => {\n    let elementsNodes: any = [];\n    Object.keys(schema).forEach((key, index) => {\n      if (schema[key].type === ESchemaTypes.ref) {\n        elementsNodes.push({\n          id: `e1-${id}-${index}-${key}`,\n          source: collectionName,\n          target: schema[key].ref,\n          type: \"smoothstep\",\n          label: `${collectionName} ${schema[key].relationship} ${schema[key].ref}`,\n          animated: false,\n          labelStyle: {\n            textTransform: \"lowercase\",\n            fontSize: 20,\n            letterSpacing: 1.2,\n            backgroundColor: \"#ff9c6e\",\n          },\n          style: {\n            width: \"100%\",\n            padding: 20,\n            borderRadius: 5,\n          },\n        });\n      }\n    });\n\n    return elementsNodes;\n  };\n\n  const mapNodes = () => {\n    let nodes: any = [];\n\n    collections.forEach((collection: ICollection, index) => {\n      nodes.push({\n        id: collection.name,\n        data: {\n          label: (\n            <div>\n              <SchemaView collection={collection} />\n            </div>\n          ),\n        },\n        style: {\n          padding: 0,\n          width: \"300px\",\n          borderColor: \"#40a9ff\",\n          borderRadius: 0,\n        },\n        position: { x: collection.x, y: collection.y },\n      });\n      nodes.push(\n        ...checkIfRefExists(collection.schema, collection.name, collection.id)\n      );\n    });\n\n    setCollectionNodes(nodes);\n  };\n\n  useEffect(() => {\n    mapNodes();\n    if (collections.length) {\n      setPosition([\n        parseInt(collections[0].x.toString()),\n        parseInt(collections[0].y.toString()),\n      ]);\n      console.log(position);\n    }\n  }, [collections]);\n\n  const updateCollectionPosition = async (id: string, x: number, y: number) => {\n    let collection: ICollection | undefined = collections.find(\n      (collection) => collection.name === id\n    );\n    if (!collection) return;\n    try {\n      collection.x = x;\n      collection.y = y;\n      await upsertCollectionData(collection);\n      console.log(\"Node Position Updated\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"auto\",\n      }}\n    >\n      <ReactFlow\n        defaultPosition={position}\n        elements={collectionNodes}\n        minZoom={0.4}\n        defaultZoom={1}\n        snapToGrid={true}\n        snapGrid={[15, 15]}\n        onlyRenderVisibleElements={true}\n        onNodeDragStop={(event, node) => {\n          updateCollectionPosition(node.id, node.position.x, node.position.y);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SchemaFlowPage;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Form } from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\n\nconst { Option } = Select;\n\nfunction RefSelect({ schemaValue, action, selectedRecord }: { schemaValue: any, action: string, selectedRecord: any }) {\n  const [data, setData] = useState<Array<any>>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const [searchValues, setSearchValues] = useState<Array<string>>([]);\n  const [value, setValue] = useState<Array<string>>([]);\n\n\n  const makeSearch = async () => {\n    try {\n      const action: ICurdBody = {\n        model: schemaValue.ref,\n        operations: EOperations.ref,\n        data: {\n          query: {\n            search: search,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setData(data.list);\n      setSearchValues(data.searchValues);\n    } catch (error) { }\n  };\n\n  const options = data.map((d) => (\n    <Option value={d._id}>\n      {searchValues.map((value) => (d[value]?.length ? `${d[value]}` : d._id))}\n    </Option>\n  ));\n\n  useEffect(() => {\n    makeSearch();\n  }, [search]);\n\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n\n      initialValue={\n        action === \"update\" && selectedRecord[schemaValue.name]\n          ? !Array.isArray(selectedRecord[schemaValue.name]) ? [selectedRecord[schemaValue.name]._id] : selectedRecord[schemaValue.name].map(value => value._id || value)\n          : \"\"\n      }\n    >\n      <Select\n        showSearch\n        value={value}\n        placeholder={`Search anything in ${schemaValue.name}`}\n        defaultActiveFirstOption={true}\n        showArrow={false}\n        filterOption={false}\n        onSearch={(s) => setSearch(s)}\n        onChange={(v) => setValue(v)}\n        notFoundContent={null}\n        mode={schemaValue.relationship === \"hasmany\" ? \"multiple\" : undefined}\n      >\n        {options}\n      </Select>\n    </Form.Item>\n  );\n}\n\nexport default RefSelect;\n","import { useEffect, useState } from \"react\";\nimport {\n  PageHeader,\n  Button,\n  Tag,\n  Space,\n  Modal,\n  message,\n  Skeleton,\n  Image,\n  Pagination,\n  Upload,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\n\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  InboxOutlined,\n} from \"@ant-design/icons\";\n\nimport prettySize from \"prettysize\";\n\nconst { confirm } = Modal;\nconst { Dragger } = Upload;\n\nfunction FilesView({\n  setCustomFiles,\n  deleteButton,\n  filterButton,\n}: {\n  setCustomFiles?: Function;\n  deleteButton?: boolean;\n  filterButton?: boolean;\n}) {\n  const collectionName = \"file\";\n\n  const [list, setList] = useState<Array<any>>([]);\n\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [uploadModal, setUploadModal] = useState(false);\n\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  useEffect(() => {\n    if (typeof setCustomFiles === \"function\") {\n      setCustomFiles([...selectedFiles]);\n    }\n  }, [selectedFiles]);\n\n  const props = {\n    multiple: true,\n    name: \"manual\",\n    action: \"/admin/file/manual\",\n    defaultFileList: [],\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== \"uploading\") {\n      }\n      if (status === \"done\") {\n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n\n      info.fileList = [];\n    },\n    onDrop(e) {\n      console.log(\"Dropped files\", e.dataTransfer.files);\n    },\n  };\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: selectedFiles,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setSelectedFiles([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getCollectionList(collectionName, pagination);\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <div style={{ padding: 20 }}>\n          <Skeleton active={true} />\n        </div>\n      ) : (\n        <>\n          <PageHeader\n            style={{ marginTop: 2 }}\n            ghost={true}\n            title={\n              <Space>\n                {pagination?.total && (\n                  <Tag color=\"green\">Total {pagination.total}</Tag>\n                )}\n\n                <Tag color=\"blue\">Selected {selectedFiles.length}</Tag>\n              </Space>\n            }\n            extra={[\n              selectedFiles.length && deleteButton ? (\n                <Button\n                  onClick={() => {\n                    return confirm({\n                      title: \"Sure you want to delete selected records?\",\n                      icon: <ExclamationCircleOutlined />,\n                      content: null,\n                      onOk() {\n                        deleteManyRecord();\n                      },\n                      onCancel() {\n                        console.log(\"Cancel\");\n                      },\n                    });\n                  }}\n                >\n                  <DeleteOutlined />\n                  Delete\n                </Button>\n              ) : null,\n              filterButton && (\n                <Button key=\"2\">\n                  <FilterOutlined />\n                  Filter\n                </Button>\n              ),\n              <Button\n                key=\"1\"\n                type=\"primary\"\n                onClick={() => {\n                  setUploadModal(true);\n                }}\n              >\n                <PlusOutlined />\n                Upload\n              </Button>,\n            ]}\n          />\n\n          <div className=\"grid-responsive\">\n            {list.map((l) => (\n              <div\n                key={l._id}\n                className=\"on-hover\"\n                style={{\n                  border: selectedFiles.includes(l._id)\n                    ? \"1px solid #40a9ff\"\n                    : \"none\",\n                  backgroundColor: \"white\",\n                  cursor: \"pointer\",\n                }}\n                onClick={() => {\n                  setSelectedFiles((prev: any) => {\n                    let tempArray = [...prev];\n                    if (tempArray.includes(l._id)) {\n                      tempArray = tempArray.filter(\n                        (fileId) => fileId !== l._id\n                      );\n                    } else {\n                      tempArray.push(l._id);\n                    }\n                    return tempArray;\n                  });\n                }}\n              >\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <Image\n                    preview={false}\n                    width={200}\n                    height={200}\n                    src={\"/admin/file/get/\" + l.filename}\n                    fallback={\"/img/file.svg\"}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    padding: 10,\n                  }}\n                >\n                  <b>{l.originalname}</b>\n                  <span\n                    style={{\n                      color: \"GrayText\",\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                    }}\n                  >\n                    {prettySize(l.size)} {l.mimetype}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <Pagination\n            style={{ textAlign: \"right\", margin: 10 }}\n            current={pagination.current}\n            pageSize={pagination.pageSize}\n            total={pagination.total}\n            onChange={(page, pageSize) => {\n              const p = {\n                current: page,\n                pageSize: pageSize,\n                total: pagination.total,\n              };\n              getCollectionList(collectionName, p);\n            }}\n          />\n          <Modal\n            title=\"Upload File\"\n            visible={uploadModal}\n            onOk={() => {\n              getCollectionList(collectionName, pagination);\n              setUploadModal(false);\n            }}\n            onCancel={() => setUploadModal(false)}\n            destroyOnClose={true}\n          >\n            <Dragger {...props} className=\"upload-list-inline\">\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                Click or drag file to this area to upload\n              </p>\n              <p className=\"ant-upload-hint\">\n                Support for a single or bulk upload. Strictly prohibit from\n                uploading company data or other band files\n              </p>\n            </Dragger>\n          </Modal>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default FilesView;\n","import { useEffect, useState } from \"react\"\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { Form } from \"antd\";\nimport FilesView from \"../../components/File/FilesView\";\n\n\n\nfunction UploadFile({ schemaValue, form }: { schemaValue: any, form: any }) {\n\n  const [selectedFiles, setSelectedFiles] = useState([])\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [schemaValue.name]: selectedFiles,\n    })\n  }, [selectedFiles])\n\n  return (\n    <>\n      <Form.Item\n        label={\n          <span\n            style={{\n              textTransform: \"capitalize\",\n              color: \"#434343\",\n            }}\n          >\n            {schemaValue.name}\n          </span>\n        }\n        name={schemaValue.name}\n        rules={[\n          {\n            required: schemaValue.required,\n          },\n        ]}\n      >\n\n        <div >\n\n          <FilesView setCustomFiles={setSelectedFiles} />\n        </div>\n\n\n      </Form.Item>\n    </>\n  );\n}\n\nexport default UploadFile;\n","import { Form } from \"antd\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport { useState } from \"react\";\n\n\nfunction JSONEditor({ schemaValue, form, action, selectedRecord }: { schemaValue: any; form: any, action: string, selectedRecord: any }) {\n    const [jsonData, setJsonData] = useState(\n        action === \"update\" && selectedRecord[schemaValue.name]\n            ? selectedRecord[schemaValue.name].jsObject\n            : null);\n\n    return (\n        <Form.Item\n            label={\n                <span\n                    style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                    }}\n                >\n                    {schemaValue.name}\n                </span>\n            }\n            name={schemaValue.name}\n            rules={[\n                {\n                    required: schemaValue.required,\n                },\n            ]}\n        >\n            <div style={{ border: \"1px solid #161f59\", borderRadius: 1 }}>\n\n                <JSONInput\n\n                    theme=\"dark_mitsuketa_tribute\"\n\n                    locale={locale}\n                    placeholder={jsonData}\n                    onChange={(e) => {\n                        form.setFieldsValue({\n                            [schemaValue.name]: { ...e.jsObject },\n                        })\n                        setJsonData(e.jsObject);\n                    }}\n                    height=\"550px\"\n                    width=\"100%\"\n                />\n            </div>\n        </Form.Item>\n    );\n}\n\nexport default JSONEditor;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport { ICollection, ICollectionSchema } from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\"\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction CreateCollectionAction({\n  selectedCollection,\n  action = \"create\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action?: \"create\" | \"update\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  const schema: ICollectionSchema = selectedCollection?.schema;\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    console.log(values);\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations:\n          action === \"create\" ? EOperations.create : EOperations.update,\n        data: {\n          body: formData,\n          id: id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={action === \"create\" ? \"Create New\" : \"Edit\"}\n      />\n      <Card\n        style={{ marginLeft: 10, marginRight: 10 }}\n        title={\n          <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n            {selectedCollection?.name}\n          </span>\n        }\n      >\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          size=\"large\"\n          form={form}\n        >\n          {schema &&\n            Object.keys(schema).map((key: any) => {\n              const schemaValue = getKeyValue<\n                keyof ICollectionSchema,\n                ICollectionSchema\n              >(key)(schema);\n\n              switch (schemaValue.type) {\n                case \"string\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                          enum: [\"male\", \"female\"],\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      {schemaValue.enum.length ? (\n                        <Select placeholder={`Select ${schemaValue.name}`}>\n                          <>\n                            {schemaValue.enum.map((e: any) => (\n                              <Option value={e}>{e}</Option>\n                            ))}\n                          </>\n                        </Select>\n                      ) : (\n                        <Input />\n                      )}\n                    </Form.Item>\n                  );\n\n                case \"number\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      <InputNumber style={{ width: 300 }} />\n                    </Form.Item>\n                  );\n                case \"date\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? moment(selectedRecord[schemaValue.name])\n                          : moment()\n                      }\n                    >\n                      <DatePicker />\n                    </Form.Item>\n                  );\n                case \"boolean\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]?.toString()\n                          : \"false\"\n                      }\n                    >\n                      <Select placeholder={`Select`}>\n                        <Option value={\"true\"}>True</Option>\n                        <Option value={\"false\"}>False</Option>\n                      </Select>\n                    </Form.Item>\n                  );\n                case \"ref\":\n                  return <RefSelect action={action} selectedRecord={selectedRecord} schemaValue={schemaValue} />;\n                case \"file\":\n                  return <UploadFile schemaValue={schemaValue} form={form} />;\n                case \"json\":\n                  return <JSONEditor action={action} selectedRecord={selectedRecord} schemaValue={schemaValue} form={form} />\n\n                default:\n                  return null;\n              }\n            })}\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {action === \"create\" ? \"Save\" : \"Update\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CreateCollectionAction;\n","import { Card, PageHeader, Space } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { ICollection } from \"../../types/global\";\n\nfunction ShowCollectionAction({\n  selectedCollection,\n  action = \"show\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action: \"show\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  return (\n    <>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={selectedCollection.name}\n        style={{ textTransform: \"capitalize\" }}\n        ghost={false}\n      />\n      <Card style={{ margin: 10 }}>\n        <div>\n          {Object.keys(selectedRecord).map((key: any) => {\n            console.log(selectedRecord[key])\n            return (\n              key !== \"key\" && (\n                <div>\n                  <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                    <Text\n                      style={{ textTransform: \"capitalize\" }}\n                      type=\"secondary\"\n                    >\n                      {key}\n                    </Text>\n\n                    <p>\n                      {Array.isArray(selectedRecord[key]) ? (\n                        selectedRecord[key].map((data: any) => (\n                          <DisplayData data={data} />\n                        ))\n                      ) : typeof selectedRecord[key] === \"object\" ? (\n                        <DisplayData data={selectedRecord[key]} />\n                      ) : (\n                        selectedRecord[key].toString()\n                      )}\n                    </p>\n                  </Space>\n                  <br />\n                </div>\n              )\n            );\n          })}\n        </div>\n      </Card>\n    </>\n  );\n}\n\nconst DisplayData = (data: any) => {\n  data = data[\"data\"];\n  return (\n    <div\n      style={{\n        borderLeft: \"6px solid #1890ff\",\n        border: \"1px dotted #1890ff\",\n        padding: 10,\n        margin: 2,\n        width: \"100%\",\n      }}\n    >\n      {typeof data === \"string\" ? data : Object.keys(data).map((key: any) => {\n        return (\n          <>\n            <Space direction=\"vertical\">\n              <Text style={{ textTransform: \"capitalize\" }} type=\"secondary\">\n                {key}\n              </Text>\n              <p>\n                {typeof data[key] === \"object\" ? (\n                  <DisplayData data={data[key]} />\n                ) : (\n                  data[key]\n                )}\n              </p>\n            </Space>\n            <br />\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ShowCollectionAction;\n","import { Dispatch, useCallback, useEffect, useState } from \"react\";\nimport {\n  Table,\n  PageHeader,\n  Button,\n  Tag,\n  Modal,\n  message,\n  List,\n  Image,\n  Space,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../http\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport queryString from \"query-string\";\nimport { selectCollection } from \"../store/actionCreators\";\nimport CreateCollectionAction from \"../components/DataFlow/CreateCollectionAction\";\nimport ShowCollectionAction from \"../components/DataFlow/ShowCollectionAction\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n} from \"@ant-design/icons\";\n\nimport moment from \"moment\";\nimport prettySize from \"prettysize\";\n\nconst { Column } = Table;\nconst { confirm } = Modal;\ninterface IParams {\n  action?: string;\n  id?: string;\n}\n\nfunction DataFlowPage() {\n  const { collection: collectionName }: any = useParams();\n\n  const history = useHistory();\n  const params: IParams = queryString.parse(window.location.href.split(\"?\")[1]);\n\n  const [list, setList] = useState<Array<{ name: string; type: string }>>([]);\n  const [columns, setColumns] = useState([]);\n\n  const [selectedRecord, setSelectedRecord] = useState<any>({});\n\n  const [loading, setLoading] = useState(true);\n  const [rowSelection, setRowSelection] = useState<any>([]);\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const setSelectedCollection = useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  ).filter((collection) => collection.show);\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n      setColumns(data.column);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteRecord = async (id: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.delete,\n        data: {\n          id: id,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Record Deleted\");\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: rowSelection,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setRowSelection([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (collectionName && Object.keys(params).length === 0) {\n      setColumns([]);\n      setList([]);\n      getCollectionList(collectionName, pagination);\n    }\n    if (!selectedCollection) {\n      history.push(\"/data\");\n    }\n  }, [collectionName, selectedCollection, window.location.href]);\n\n  const dataSource = list.map((l: any, index) => ({ key: index, ...l }));\n\n  const dataColumns: any = columns.map(\n    ({ name, type, file }: { name: string; type: string; file: boolean }) => ({\n      title: name.toString(),\n      dataIndex: name.toString(),\n      key: name.toString(),\n      type,\n      file,\n    })\n  );\n\n  dataColumns.push({\n    title: \"Action\",\n    key: \"operation\",\n    fixed: \"right\",\n    width: 50,\n    type: \"operation\",\n  });\n\n  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    setPagination(pagination);\n    getCollectionList(collectionName, pagination);\n  };\n\n  if (!collectionName)\n    return (\n      <>\n        <PageHeader\n          title=\"Available Collections\"\n          subTitle=\"Select any collection to view data\"\n          ghost={false}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            padding: 20,\n            width: \"100%\",\n          }}\n        >\n          <List\n            dataSource={collections}\n            renderItem={(collection) => (\n              <Tag\n                style={{\n                  paddingTop: 15,\n                  paddingBottom: 15,\n                  textTransform: \"capitalize\",\n                  margin: 5,\n                  letterSpacing: 1.2,\n                  cursor: \"pointer\",\n                  alignContent: \"center\",\n                  paddingLeft: 30,\n                  paddingRight: 30,\n                  fontWeight: 600,\n                  fontSize: 20,\n                }}\n                color=\"orange\"\n                onClick={() => {\n                  setSelectedCollection(collection);\n                  history.push(`/data/${collection.name}`);\n                }}\n              >\n                <span>{collection.name}</span>\n              </Tag>\n            )}\n          />\n        </div>\n      </>\n    );\n\n  if (params.action && params.action === \"create\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"create\"\n      />\n    );\n  if (params.action && params.action === \"update\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"update\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  if (params.action && params.action === \"show\" && selectedCollection)\n    return (\n      <ShowCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"show\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  return (\n    <>\n      <PageHeader\n        style={{ marginTop: 2 }}\n        ghost={false}\n        onBack={() => window.history.back()}\n        title={\n          <Space>\n            <span style={{ textTransform: \"capitalize\" }}>\n              {collectionName}{\" \"}\n            </span>\n            {pagination?.total && (\n              <Tag color=\"blue\" style={{ borderRadius: \"50%\" }}>\n                {pagination.total}\n              </Tag>\n            )}\n          </Space>\n        }\n        extra={[\n          rowSelection.length ? (\n            <Button\n              onClick={() => {\n                return confirm({\n                  title: \"Sure you want to delete selected records?\",\n                  icon: <ExclamationCircleOutlined />,\n                  content: null,\n                  onOk() {\n                    deleteManyRecord();\n                  },\n                  onCancel() {\n                    console.log(\"Cancel\");\n                  },\n                });\n              }}\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          ) : null,\n          <Button key=\"2\">\n            <FilterOutlined />\n            Filter\n          </Button>,\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => {\n              history.push(`/data/${collectionName}?action=create`);\n            }}\n          >\n            <PlusOutlined />\n            Create\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Table\n        loading={loading}\n        style={{ padding: 10 }}\n        dataSource={dataSource}\n        size=\"middle\"\n        rowKey={(record) => record._id}\n        rowSelection={{\n          selectedRowKeys: rowSelection,\n          onChange: (selectedRows) => {\n            setRowSelection(selectedRows);\n          },\n        }}\n        pagination={pagination}\n        onChange={handleTableChange}\n      >\n        {dataColumns.map((column: any) => {\n          switch (column.type) {\n            case \"objectId\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={70}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n            case \"boolean\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text, record, index) => {\n                    if (text === undefined) return null;\n                    return (\n                      <>\n                        {text ? (\n                          <Tag\n                            color={\"green\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <Tag\n                            color={\"red\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n\n            case \"date\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: Date) => {\n                    return text ? (\n                      <span>{moment(text).format(\"MM/DD/YYYY hh:mm\")}</span>\n                    ) : null;\n                  }}\n                />\n              );\n\n            case \"mixed\":\n              return (\n                <Column\n                  title={\n                    <span style={{\n                      textTransform: \"capitalize\", display: \"flex\",\n                      justifyContent: \"space-between\",\n                    }}>\n                      {column.title}\n\n                      <Tag color=\"magenta\">JSON</Tag>\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: any) => {\n                    return text ? (\n                      <span  >{Object.keys(text).map(key => <Tag>{key}</Tag>)}</span>\n                    ) : null;\n                  }}\n                />\n              );\n            case \"operation\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={60}\n                  render={(text, record: any) => {\n                    return (\n                      <Space>\n                        <Button\n                          className=\"button-blue\"\n                          shape=\"circle\"\n                          icon={<EyeOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=show&id=${record._id}`\n                            );\n                          }}\n                        ></Button>\n                        <Button\n                          className=\"button-green\"\n                          shape=\"circle\"\n                          icon={<EditOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=update&id=${record._id}`\n                            );\n                          }}\n                        />\n                        <Button\n                          className=\"button-red\"\n                          shape=\"circle\"\n                          icon={<DeleteOutlined />}\n                          onClick={() => {\n                            return confirm({\n                              title: \"Sure you want to delete this record?\",\n                              icon: <ExclamationCircleOutlined />,\n                              content: null,\n                              onOk() {\n                                deleteRecord(record._id);\n                              },\n                              onCancel() {\n                                console.log(\"Cancel\");\n                              },\n                            });\n                          }}\n                        />\n                      </Space>\n                    );\n                  }}\n                />\n              );\n            case \"hasone\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">File</Tag>}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      text && (\n                        <Space direction=\"vertical\">\n                          {column.file ? (\n                            <Space>\n\n                              <Image\n                                preview={false}\n                                width={100}\n                                height={100}\n                                src={\"/admin/file/get/\" + text.filename}\n                                fallback={\"/img/file.svg\"}\n                              />\n\n                              <span\n                                style={{\n                                  color: \"GrayText\",\n                                  display: \"flex\",\n                                  justifyContent: \"space-between\",\n                                  flexDirection: \"column\"\n                                }}\n                              >\n                                <b>{text.originalname}</b>\n                                {prettySize(text.size)} {text.mimetype}\n                              </span>\n                            </Space>\n                          ) : typeof text === \"string\" ? (\n                            <span>{text} </span>\n                          ) : (\n                            Object.values(text).map((value, index) => {\n                              if (!(typeof value === \"string\")) return null;\n                              if (index > 1) return null;\n                              return <span>{value} </span>;\n                            })\n                          )}\n                        </Space>\n                      )\n                    );\n                  }}\n                />\n              );\n            case \"hasmany\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-around\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">Files</Tag>}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      <span>\n                        {text?.length} {column.title}\n                      </span>\n                    );\n                  }}\n                ></Column>\n              );\n            default:\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n          }\n        })}\n      </Table>\n    </>\n  );\n}\n\nexport default DataFlowPage;\n","import { PageHeader } from \"antd\";\n\nimport FilesView from \"../components/File/FilesView\";\n\nfunction FilePage() {\n    return (\n        <>\n            <PageHeader title=\"File Management\" ghost={false} />\n\n            <FilesView deleteButton={true} />\n        </>\n    );\n}\n\nexport default FilePage;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout } from \"antd\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { initData } from \"./store/actionCreators\";\n// components\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport SchemaFlowPage from \"./pages/SchemaFlowPage\";\nimport DataFlowPage from \"./pages/DataFlowPage\";\nimport FilePage from \"./pages/FilePage\";\n\nconst { Content } = Layout;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, []);\n\n  return (\n    <Layout className=\"main\">\n      <Router basename=\"/admin-ui\" >\n        <SideBar />\n        <Layout>\n          <Header />\n          <Content style={{ overflow: \"auto\" }}>\n            <Switch>\n              <Route path=\"/\" exact component={SchemaFlowPage} />\n              <Route path=\"/collections\" exact component={CollectionsPage} />\n              <Route path=\"/data\" exact component={DataFlowPage} />\n              <Route path=\"/data/:collection\" exact component={DataFlowPage} />\n              <Route path=\"/files\" exact component={FilePage} />\n\n            </Switch>\n          </Content>\n        </Layout>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  CollectionAction,\n} from \"../types/global\";\n\nconst initialState: CollectionsState = {\n  collections: [],\n  selectedCollection: undefined,\n};\n\nconst reducer = (\n  state: CollectionsState = initialState,\n  action: CollectionAction\n): CollectionsState => {\n  switch (action.type) {\n    case actionTypes.INIT_COLLECTION:\n      return {\n        ...state,\n        collections: action.collections || [],\n      };\n    case actionTypes.ADD_COLLECTION:\n      return {\n        ...state,\n        collections: state.collections\n          .concat(action.collection)\n          .sort((a, b) => a.name.localeCompare(b.name)),\n      };\n\n    case actionTypes.REMOVE_COLLECTION:\n      const updatedCollections: ICollection[] = state.collections\n        .filter((article) => article.id !== action.collection.id)\n        .sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...state,\n        collections: updatedCollections,\n        selectedCollection: undefined,\n      };\n\n    case actionTypes.SET_COLLECTION:\n      const selectedCollection: ICollection = action.collection;\n\n      return {\n        ...state,\n        selectedCollection,\n      };\n\n    case actionTypes.UPDATE_COLLECTION:\n      const updatedCollection: ICollection = action.collection;\n\n      state.collections = state.collections.map((collection) => {\n        if (collection.id === updatedCollection.id) {\n          return updatedCollection;\n        }\n        return collection;\n      });\n\n      state.selectedCollection = updatedCollection;\n\n      return { ...state };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// state\nimport reducer from \"./store/reducer\";\n\nimport {\n  CollectionsState,\n  CollectionAction,\n  DispatchType,\n} from \"./types/global\";\n\nconst store: Store<CollectionsState, CollectionAction> & {\n  dispatch: DispatchType;\n} = createStore(reducer, applyMiddleware(thunk));\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}