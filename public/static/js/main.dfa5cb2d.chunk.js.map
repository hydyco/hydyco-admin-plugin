{"version":3,"sources":["components/Header.tsx","http.tsx","store/actionTypes.ts","store/actionCreators.ts","components/SideBar.tsx","types/global.ts","components/Badge.tsx","components/common/RequiredText.tsx","components/NewCollectionModal.tsx","components/DataTypes/Boolean.tsx","components/DataTypes/Number.tsx","components/DataTypes/Ref.tsx","components/DataTypes/String.tsx","components/DataTypes/Date.tsx","components/DataTypes/File.tsx","components/NewCollectionTypeModal.tsx","components/RemoveCollectionTypeModal.tsx","components/RemoveCollectionModal.tsx","pages/CollectionsPage.tsx","components/SchemaView.tsx","pages/SchemaFlowPage.tsx","components/DataFlow/RefSelect.tsx","components/DataFlow/UploadFile.tsx","components/DataFlow/CreateCollectionAction.tsx","components/DataFlow/ShowCollectionAction.tsx","pages/DataFlowPage.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["AppHeader","EOperations","location","useLocation","headerName","collections","data","pathname","split","subHeaderName","ghost","title","subTitle","INIT_COLLECTION","ADD_COLLECTION","REMOVE_COLLECTION","SET_COLLECTION","UPDATE_COLLECTION","upsertCollectionData","collection","axios","post","name","deleteCollection","delete","crudCollection","crudBody","selectCollection","disPatchAction","type","actionTypes","updateCollection","action","dispatch","a","Sider","Layout","SideBar","ESchemaTypes","ERelationShip","useState","className","src","alt","header","setHeader","selectedMenu","useDispatch","useSelector","state","React","useCallback","collapsible","collapsedWidth","theme","onCollapse","collapsed","style","marginTop","mode","defaultSelectedKeys","Item","icon","LineChartOutlined","to","AlignCenterOutlined","DatabaseOutlined","Badge","toLowerCase","color","string","number","boolean","ref","date","file","getBadgeColor","fontWeight","getBadgeName","Text","Typography","RequiredText","message","fontSize","strong","NewCollectionModal","isModalVisible","setIsModalVisible","collectionName","setCollectionName","nameInput","useRef","newCollection","addCollection","setSelectedCollection","handleOk","length","find","error","col","id","uuidv4","schema","fields","x","Math","floor","y","useEffect","current","focus","shape","onClick","PlusOutlined","visible","onOk","onCancel","placeholder","value","onChange","target","test","onKeyDown","e","key","Boolean","setState","updateState","updatedData","prev","direction","width","defaultValue","checkedChildren","unCheckedChildren","defaultChecked","default","required","Number","typeSettings","setTypeSettings","min","max","Group","settings","index","unique","Object","keys","forEach","includes","Ref","shallowEqual","overflow","relationship","Button","hasMany","hasOne","autopopulate","height","map","textTransform","TextArea","Input","trim","uppercase","lowercase","maxLength","minLength","String","enumText","setEnumText","getStateSettings","filter","obj","getKeyValue","enum","join","showCount","lg","disabled","Date","File","NewCollectionTypeModal","selectedCollection","editSchema","saveCollection","footer","schemas","updatedCollection","confirm","Modal","RemoveCollectionModal","removeCollectionType","ExclamationCircleOutlined","content","deleteType","console","log","deleteCollectionAction","success","Content","Search","CreateSchema","setEditSchema","openCollectionModal","setOpenCollectionModal","localCollections","setLocalCollections","setSelectCollection","removeCollection","backgroundColor","extra","borderRadius","padding","size","searchCollections","grid","gutter","xs","sm","md","xl","xxl","dataSource","renderItem","cursor","display","placeItems","letterSpacing","span","bordered","boxShadow","justifyContent","bodyStyle","borderBottom","align","EditOutlined","DeleteOutlined","RemoveCollectionTypeModal","SchemaView","field","setCollapsed","margin","CaretDownOutlined","CaretRightOutlined","transition","paddingLeft","textAlign","paddingRight","SchemaFlowPage","collectionNodes","setCollectionNodes","position","setPosition","mapNodes","nodes","push","label","borderColor","elementsNodes","source","animated","labelStyle","checkIfRefExists","parseInt","toString","updateCollectionPosition","defaultPosition","elements","minZoom","defaultZoom","snapToGrid","snapGrid","onlyRenderVisibleElements","onNodeDragStop","event","node","Option","Select","RefSelect","schemaValue","setData","search","setSearch","searchValues","setSearchValues","setValue","makeSearch","model","operations","query","list","options","d","_id","rules","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","s","v","notFoundContent","undefined","Dragger","Upload","UploadFile","props","multiple","info","status","fileList","onDrop","dataTransfer","files","InboxOutlined","CreateCollectionAction","selectedRecord","createData","formData","body","create","update","window","history","back","response","onBack","marginLeft","marginRight","onFinish","values","onFinishFailed","errorInfo","layout","initialValue","moment","htmlType","DisplayData","borderLeft","border","ShowCollectionAction","Array","isArray","Column","Table","DataFlowPage","useParams","useHistory","params","queryString","parse","href","setList","columns","setColumns","setSelectedRecord","loading","setLoading","rowSelection","setRowSelection","pageSize","pagination","setPagination","getCollectionList","column","deleteRecord","deleteManyRecord","deleteAll","l","dataColumns","dataIndex","fixed","total","FilterOutlined","rowKey","record","selectedRowKeys","selectedRows","filters","sorter","render","text","format","EyeOutlined","flexWrap","paddingTop","paddingBottom","alignContent","App","get","initialState","Header","path","exact","component","CollectionsPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","concat","sort","b","localeCompare","updatedCollections","article","store","createStore","applyMiddleware","thunk","process","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dfa5cb2d.chunk.js","sourcesContent":["import { useLocation } from \"react-router-dom\";\nimport { PageHeader } from \"antd\";\n\nfunction AppHeader() {\n  const location = useLocation();\n  const headerNames: any = {\n    \"\": \"Schema Flow\",\n    collections: \"Schema\",\n    data: \"Data Flow\",\n  };\n  const subHeaderNames: any = {\n    \"\": \"Visualize you database\",\n    collections: \"Manage your mongoose schema\",\n    data: \"Manage your data\",\n  };\n\n  const headerName = headerNames[location.pathname.split(\"/\")[1]];\n\n  const subHeaderName = subHeaderNames[location.pathname.split(\"/\")[1]];\n\n  if (headerName === \"Data Flow\") return null;\n  return (\n    <PageHeader ghost={false} title={headerName} subTitle={subHeaderName} />\n  );\n}\n\nexport default AppHeader;\n","import axios, { AxiosResponse } from \"axios\";\nimport { ICollection } from \"./types/global\";\n\nexport function getAllCollectionList(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/model/list\");\n}\n\nexport function upsertCollectionData(\n  collection: ICollection\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/create/\" + collection.name, collection);\n}\n\nexport function deleteCollection({\n  name,\n}: ICollection): Promise<AxiosResponse> {\n  return axios.delete(\"/admin/model/delete/\" + name);\n}\n\nexport function crudCollection(crudBody: ICurdBody): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/crud/\", crudBody);\n}\n\nexport enum EOperations {\n  list = \"list\",\n  create = \"create\",\n  update = \"update\",\n  delete = \"delete\",\n  deleteAll = \"deleteAll\",\n  ref = \"ref\",\n}\n\ninterface ICurdData {\n  id?: string | Array<string>;\n  query?: {\n    pagination?: {\n      current: number;\n      pageSize: number;\n    };\n    find?: {};\n    search?: string;\n  };\n  body?: {};\n}\n\nexport interface ICurdBody {\n  model: string;\n  operations: EOperations;\n  data: ICurdData;\n}\n","export const INIT_COLLECTION = \"INIT_COLLECTION\";\nexport const ADD_COLLECTION = \"ADD_COLLECTION\";\nexport const REMOVE_COLLECTION = \"REMOVE_COLLECTION\";\nexport const SET_COLLECTION = \"SET_COLLECTION\";\nexport const UPDATE_COLLECTION = \"UPDATE_COLLECTION\";\n","import * as actionTypes from \"./actionTypes\";\n\nimport { ICollection, CollectionAction, DispatchType } from \"../types/global\";\nimport {\n  deleteCollection,\n  getAllCollectionList,\n  upsertCollectionData,\n} from \"../http\";\nimport { AxiosResponse } from \"axios\";\n\nexport function addCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.ADD_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function removeCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.REMOVE_COLLECTION,\n    collection,\n  };\n\n  return async (dispatch: DispatchType) => {\n    await deleteCollection(collection);\n    dispatch(action);\n  };\n}\n\nexport function selectCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.SET_COLLECTION,\n    collection,\n  };\n  return disPatchAction(action);\n}\n\nexport function updateCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.UPDATE_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function simulateHttpRequest(collection: CollectionAction) {\n  return (dispatch: DispatchType) => {\n    setTimeout(() => {\n      dispatch(collection);\n    }, 500);\n  };\n}\n\nconst disPatchAction = (collection: CollectionAction) => {\n  return (dispatch: DispatchType) => dispatch(collection);\n};\n\nexport const initData = () => async (dispatch: DispatchType) => {\n  let { data: initialState }: AxiosResponse = await getAllCollectionList();\n  const collection: CollectionAction = {\n    type: actionTypes.INIT_COLLECTION,\n    collections: initialState,\n    collection: initialState[0] || {},\n  };\n\n  dispatch(collection);\n};\n","import React, { useState } from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport {\n  AlignCenterOutlined,\n  LineChartOutlined,\n  DatabaseOutlined,\n  CaretRightOutlined,\n  CaretDownOutlined,\n} from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport { Dispatch } from \"redux\";\nimport { selectCollection } from \"../store/actionCreators\";\n\nconst { Sider } = Layout;\n\nfunction SideBar() {\n  const location = useLocation();\n  const [header, setHeader] = useState(\n    <img className=\"logo-large\" src=\"/img/black-logo.png\" alt=\"\"></img>\n  );\n\n  const selectedMenu = location.pathname.split(\"/\")[1];\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n  return (\n    <Sider\n      collapsible={true}\n      collapsedWidth=\"50\"\n      theme=\"light\"\n      onCollapse={(collapsed, type) => {\n        if (collapsed)\n          setHeader(\n            <img className=\"logo-small\" src=\"/img/o-logo.png\" alt=\"\"></img>\n          );\n        else\n          setHeader(\n            <img className=\"logo-large\" src=\"/img/black-logo.png\" alt=\"\"></img>\n          );\n      }}\n    >\n      <div className=\"logo-container\">{header}</div>\n      <Menu\n        style={{ marginTop: 10 }}\n        mode=\"inline\"\n        defaultSelectedKeys={[selectedMenu]}\n      >\n        <Menu.Item key=\"\" icon={<LineChartOutlined />}>\n          <Link to=\"/\">Schema Flow</Link>\n        </Menu.Item>\n        <Menu.Item key=\"collection\" icon={<AlignCenterOutlined />}>\n          <Link to=\"/collections\">Collections</Link>\n        </Menu.Item>\n        <Menu.Item key=\"data\" icon={<DatabaseOutlined />}>\n          <Link to=\"/data\">Data Flow</Link>\n          {/* <span style={{ float: \"right\" }}>\n            {selectedMenu !== \"data\" ? (\n              <CaretRightOutlined />\n            ) : (\n              <CaretDownOutlined />\n            )}{\" \"}\n          </span> */}\n        </Menu.Item>\n        {/* {selectedMenu === \"data\" && (\n          <Menu theme=\"dark\" mode=\"inline\">\n            {collections.map((collection, index) => {\n              return (\n                <Menu.Item\n                  style={{\n                    color: \"white\",\n                    textTransform: \"capitalize\",\n                    letterSpacing: 1.2,\n                  }}\n                  key={index.toString()}\n                >\n                  <Link\n                    to={\"/data/\" + collection.name}\n                    onClick={() => setSelectedCollection(collection)}\n                  >\n                    {\" \"}\n                    {collection.name}\n                  </Link>\n                </Menu.Item>\n              );\n            })}\n          </Menu>\n        )} */}\n      </Menu>\n    </Sider>\n  );\n}\n\nexport default SideBar;\n","export enum ESchemaTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  ref = \"ref\",\n  date = \"date\",\n  array = \"array\",\n  object = \"object\",\n  enums = \"enums\",\n  file = \"file\",\n}\n\nexport enum ERelationShip {\n  hasOne = \"hasone\",\n  hasMany = \"hasmany\",\n  none = \"none\",\n}\n\nexport interface ICollectionSchema {\n  name: string;\n  type: ESchemaTypes;\n  default?: any;\n  required?: boolean;\n  index?: boolean;\n  unique?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  trim?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  ref?: string;\n  relationship?: ERelationShip;\n  enum: Array<string>;\n  autopopulate: boolean;\n}\n\nexport interface ICollection {\n  id: string;\n  name: string;\n  schema: any;\n  fields: number;\n  x: Number;\n  y: Number;\n}\n\nexport type CollectionsState = {\n  collections: ICollection[];\n  selectedCollection: ICollection | undefined;\n  newCollection?: ICollection;\n};\n\nexport type CollectionAction = {\n  type: string;\n  collection: ICollection;\n  collections?: Array<ICollection>;\n};\n\nexport type DispatchType = (args: CollectionAction) => CollectionAction;\n","import { Tag } from \"antd\";\n\nimport { ESchemaTypes } from \"../types/global\";\n\nfunction Badge({ type }: { type: any }) {\n  type = type.toLowerCase();\n  const getBadgeColor = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"#f50\";\n      case ESchemaTypes.number:\n        return \"#d4b106\";\n      case ESchemaTypes.boolean:\n        return \"#52c41a\";\n      case ESchemaTypes.ref:\n        return \"#13c2c2\";\n      case ESchemaTypes.date:\n        return \"#13c2c2\";\n      case ESchemaTypes.file:\n        return \"#13c2c2\";\n      default:\n        return \"#8c8c8c\";\n    }\n  };\n\n  const getBadgeName = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"Abc\";\n      case ESchemaTypes.number:\n        return \"123\";\n      case ESchemaTypes.boolean:\n        return \"true\";\n      case ESchemaTypes.ref:\n        return \"Relation\";\n      case ESchemaTypes.date:\n        return \"17 Aug\";\n      case ESchemaTypes.file:\n        return \"File\";\n      default:\n        return \"NA\";\n    }\n  };\n\n  return (\n    <div>\n      <Tag color={getBadgeColor()} style={{ fontWeight: \"bold\" }}>\n        {getBadgeName()}\n      </Tag>\n    </div>\n  );\n}\n\nexport default Badge;\n","import { Typography } from 'antd'\n\nconst { Text } = Typography;\n\nexport default function RequiredText({ message = \"This field is required\" }: { message?: string }) {\n    return (\n        <Text type=\"danger\" style={{ fontSize: 12 }} strong >{message}</Text>\n    )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Input, message } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { addCollection, selectCollection } from \"../store/actionCreators\";\n\nimport { ICollection } from \"../types/global\";\n\nimport RequiredText from \"./common/RequiredText\";\n\nfunction NewCollectionModal({\n  collections,\n  isModalVisible,\n  setIsModalVisible,\n}: {\n  collections: Array<ICollection>;\n  isModalVisible: boolean;\n  setIsModalVisible: Function;\n}) {\n  const [collectionName, setCollectionName] = useState(\"\");\n  const nameInput = useRef<any>();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const newCollection = React.useCallback(\n    (collection: ICollection) => dispatch(addCollection(collection)),\n    [dispatch]\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const error = () => {\n    message.error(\"Collection already exists\");\n  };\n\n  const handleOk = () => {\n    if (collectionName.length === 0) return;\n    if (collections.find((collection) => collection.name === collectionName)) {\n      error();\n      return;\n    }\n\n    const col: ICollection = {\n      id: uuidv4(),\n      name: collectionName,\n      schema: {},\n      fields: 0,\n      x: Math.floor(collections.length % 4) * 300 + 20,\n      y: (Math.floor(collections.length / 4) + 1) * 60,\n    };\n    newCollection(col);\n    setSelectedCollection(col);\n    setCollectionName(\"\");\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (nameInput.current) {\n      nameInput.current.focus();\n    }\n  }, []);\n  return (\n    <>\n      <Button type=\"primary\" shape=\"round\" onClick={showModal}>\n        Create New\n      </Button>\n      <Modal\n        title={\n          <span>\n            {\" \"}\n            <PlusOutlined /> Create new collection\n          </span>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Input\n          ref={nameInput}\n          placeholder=\"Collection Name\"\n          value={collectionName}\n          onChange={({ target: { value } }) => {\n            if (/[^a-zA-Z]/.test(value)) return;\n            setCollectionName(value);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handleOk();\n            }\n          }}\n        />\n        {collectionName.length === 0 && <RequiredText />}\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionModal;\n","import { Space, Switch, Input } from \"antd\";\nimport React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Boolean({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"boolean\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            defaultValue={state.name}\n          />\n          <span>Default value</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.default}\n            onChange={(e) => updateState(\"default\", e)}\n          />\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Boolean;\n","import { Space, InputNumber, Input, Checkbox } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { useState } from \"react\"\n\nfunction Number({ state, setState }: { state: ICollectionSchema & { name: string }, setState: Function }) {\n\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>([]);\n\n\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {}\n    updatedData[key] = value\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }))\n  }\n\n  return (\n    <>{\n      state.type === \"number\" &&\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <span>Name for the type</span>\n        <Input placeholder=\"Type Name\" onChange={(e) => updateState(\"name\", e.target.value)} />\n        <span>Default value</span>\n        <InputNumber\n          min={1}\n          max={10}\n          onChange={(e) => updateState(\"default\", e)}\n          placeholder={\"10\"}\n          style={{ width: \"100%\" }}\n        />\n\n        <span>Settings</span>\n        <Checkbox.Group\n          style={{ width: \"100%\" }}\n          onChange={(e) => {\n            const settings: any = {\n              index: false,\n              required: false,\n              unique: false,\n            }\n\n            setState((prev: ICollectionSchema) => {\n              Object.keys(settings).forEach(key => {\n                if (e.includes(key)) {\n                  settings[key] = true\n                }\n              })\n              return { ...prev, ...settings }\n\n            })\n            setTypeSettings(e)\n          }}\n          value={typeSettings}\n        >\n          <Space direction=\"vertical\">\n            <Checkbox value=\"required\">Required</Checkbox>\n            <Checkbox value=\"index\">Index</Checkbox>\n            <Checkbox value=\"unique\">Unique</Checkbox>\n            <Checkbox value=\"minLength\">Minimum Length</Checkbox>\n            {typeSettings.includes(\"minLength\") && (\n              <InputNumber\n                min={1}\n                onChange={(number) => updateState(\"minLength\", number)}\n              />\n            )}\n            <Checkbox value=\"maxLength\">Maximum Length</Checkbox>\n            {typeSettings.includes(\"maxLength\") && (\n              <InputNumber\n                min={1}\n                onChange={(number) => updateState(\"maxLength\", number)}\n              />\n            )}\n          </Space>\n        </Checkbox.Group>\n      </Space>\n    }</>\n  );\n}\n\nexport default Number;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction Ref({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"ref\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            {collections.map(({ name }, index) => (\n              <Radio.Button\n                value={name}\n                style={{ textTransform: \"capitalize\" }}\n                key={index}\n              >\n                {name}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Ref;\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Input, Checkbox, InputNumber, Row, Col } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nconst { TextArea } = Input;\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n  maxLength: 0,\n  minLength: 0,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction String({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const [enumText, setEnumText] = useState(\"\");\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        settings[key] &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n    if (state.enum.length) {\n      setEnumText(state.enum.join(\"\\n\"));\n    }\n  }, [state]);\n\n  return (\n    <>\n      {state.type === \"string\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            value={state.name}\n          />\n          <RequiredText />\n          <span>Default value</span>\n          <Input\n            onChange={(e) => updateState(\"default\", e.target.value)}\n            value={state.default}\n            placeholder=\"Keep empty for not setting the value\"\n          />\n          <span>Enums</span>\n\n          <TextArea\n            showCount\n            maxLength={100}\n            style={{ width: \"100%\" }}\n            value={enumText}\n            placeholder=\"Keep empty for not setting the value\"\n            onChange={(e) => {\n              setEnumText(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                updateState(\"enum\", enumText.trim().split(\"\\n\"));\n              }\n            }}\n          />\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            onChange={(e) => {\n              setState((prev: ICollectionSchema) => {\n                if (!e.includes(\"maxLength\")) {\n                  prev[\"maxLength\"] = 0;\n                }\n                if (!e.includes(\"minLength\")) {\n                  prev[\"minLength\"] = 0;\n                }\n                Object.keys(settings).forEach((key: any) => {\n                  settings[key] = e.includes(key);\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Row>\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"required\">Required</Checkbox>\n                <Checkbox value=\"index\">Index</Checkbox>\n                <Checkbox value=\"unique\">Unique</Checkbox>\n                <Checkbox\n                  value=\"lowercase\"\n                  disabled={typeSettings.includes(\"uppercase\")}\n                >\n                  Lowercase\n                </Checkbox>\n                <Checkbox\n                  value=\"uppercase\"\n                  disabled={typeSettings.includes(\"lowercase\")}\n                >\n                  Uppercase\n                </Checkbox>\n              </Col>\n\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"trim\">Trim</Checkbox>\n                <Checkbox value=\"minLength\">Minimum Length</Checkbox>\n                {typeSettings.includes(\"minLength\") && (\n                  <InputNumber\n                    min={1}\n                    value={state.minLength || 0}\n                    onChange={(number) => updateState(\"minLength\", number)}\n                  />\n                )}\n                <Checkbox value=\"maxLength\">Maximum Length</Checkbox>\n                {typeSettings.includes(\"maxLength\") && (\n                  <InputNumber\n                    min={1}\n                    value={state.maxLength || 0}\n                    onChange={(number) => updateState(\"maxLength\", number)}\n                  />\n                )}\n              </Col>\n            </Row>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default String;\n","import { Space, Input, DatePicker } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Date({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"date\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <DatePicker onChange={(e) => updateState(\"default\", e)} />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Date;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction File({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"file\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            <Radio.Button\n              value={\"file\"}\n              style={{ textTransform: \"capitalize\" }}\n            >\n              File\n            </Radio.Button>\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default File;\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Dispatch } from \"redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Space, Button, Radio, Modal, message } from \"antd\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Boolean from \"./DataTypes/Boolean\";\nimport Number from \"./DataTypes/Number\";\nimport Ref from \"./DataTypes/Ref\";\nimport String from \"./DataTypes/String\";\nimport Date from \"./DataTypes/Date\";\nimport File from \"./DataTypes/File\";\n\nimport {\n  ICollection,\n  ESchemaTypes,\n  ICollectionSchema,\n  ERelationShip,\n} from \"../types/global\";\nimport { updateCollection } from \"../store/actionCreators\";\n\nfunction NewCollectionTypeModal({\n  selectedCollection,\n  editSchema,\n}: {\n  selectedCollection: ICollection;\n  editSchema: ICollectionSchema | undefined;\n}) {\n  // variables\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const error = () => {\n    message.error(\"Type already exist\");\n  };\n\n  // local state\n  const [state, setState] = useState<ICollectionSchema>({\n    name: \"\",\n    type: ESchemaTypes.string,\n    default: \"\",\n    index: false,\n    maxLength: 0,\n    minLength: 0,\n    required: false,\n    trim: false,\n    unique: false,\n    uppercase: false,\n    lowercase: false,\n    enum: [],\n    ref: \"none\",\n    relationship: ERelationShip.hasMany,\n    autopopulate: true,\n  });\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const resetState = () => {\n    setState({\n      name: \"\",\n      type: ESchemaTypes.string,\n      default: \"\",\n      index: false,\n      maxLength: 0,\n      minLength: 0,\n      required: false,\n      trim: false,\n      unique: false,\n      uppercase: false,\n      lowercase: false,\n      ref: \"none\",\n      relationship: ERelationShip.hasMany,\n      enum: [],\n      autopopulate: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      resetState();\n    }\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    if (editSchema) {\n      setIsModalVisible(true);\n      setState(editSchema);\n    }\n  }, [editSchema]);\n\n  const footer = (\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        const schemas: any = {\n          ...selectedCollection.schema,\n        };\n        if (!editSchema && schemas[state.name]) {\n          error();\n          return;\n        }\n        let fields = selectedCollection.fields + 1;\n        schemas[state.name] = state;\n\n        const updatedCollection: ICollection = {\n          ...selectedCollection,\n          schema: schemas,\n          fields: fields,\n        };\n        saveCollection(updatedCollection);\n        handleOk();\n      }}\n      disabled={state.name.length === 0}\n    >\n      {\"Save\"}\n    </Button>\n  );\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={showModal}\n        style={{\n          width: \"100%\",\n          height: 50,\n          textTransform: \"uppercase\",\n          fontWeight: \"bold\",\n        }}\n      >\n        Add New Field\n      </Button>\n      <Modal\n        title={\n          <Space>\n            {\" \"}\n            <PlusOutlined />\n            <Radio.Group\n              onChange={(e) => {\n                setState((prev: any) => ({ ...prev, type: e.target.value }));\n              }}\n              value={state.type}\n            >\n              <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n              <Radio.Button value={ESchemaTypes.boolean}>Boolean</Radio.Button>\n              <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n              <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n              <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n              <Radio.Button value={ESchemaTypes.file}>File</Radio.Button>\n            </Radio.Group>\n          </Space>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={footer}\n        width={800}\n      >\n        <String state={state} setState={setState} />\n        <Boolean state={state} setState={setState} />\n\n        <Number state={state} setState={setState} />\n\n        <Ref state={state} setState={setState} />\n        <Date state={state} setState={setState} />\n\n        <File state={state} setState={setState} />\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionTypeModal;\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  removeCollectionType,\n  collection,\n  key,\n}: {\n  removeCollectionType: Function;\n  collection: ICollection;\n  key: any;\n}) {\n  const deleteType = () => {\n    const { schema } = collection;\n    delete schema[key];\n    collection.schema = schema;\n    collection.fields = collection.fields - 1;\n    removeCollectionType(collection);\n  };\n\n  return confirm({\n    title: \"Sure you want to delete type?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteType();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import { Modal, message } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  collection,\n  deleteCollectionAction,\n}: {\n  collection: ICollection;\n  deleteCollectionAction: Function;\n}) {\n  const deleteCollection = () => {\n    deleteCollectionAction(collection);\n    message.success(\"Collection removed\");\n  };\n\n  return confirm({\n    title: \"Sure you want to delete this collection?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteCollection();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  List,\n  Button,\n  Space,\n  Card,\n  Tag,\n  Layout,\n  Input,\n  PageHeader,\n  message,\n} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nimport Badge from \"../components/Badge\";\n\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  selectCollection,\n  updateCollection,\n  removeCollection,\n} from \"../store/actionCreators\";\n\nimport NewCollectionModal from \"../components/NewCollectionModal\";\nimport NewCollectionTypeModal from \"../components/NewCollectionTypeModal\";\nimport RemoveCollectionTypeModal from \"../components/RemoveCollectionTypeModal\";\nimport RemoveCollectionModal from \"../components/RemoveCollectionModal\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  ICollectionSchema,\n} from \"../types/global\";\n\n// define vars\nconst { Sider, Content } = Layout;\nconst { Search } = Input;\n\nfunction CreateSchema() {\n  const [editSchema, setEditSchema] = useState<ICollectionSchema>();\n  const [openCollectionModal, setOpenCollectionModal] = useState(false);\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [localCollections, setLocalCollections] = useState<Array<ICollection>>(\n    []\n  );\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const setSelectCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const removeCollectionType = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const deleteCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(removeCollection(collection)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (!selectedCollection && collections.length) {\n      setSelectCollection(collections[0]);\n    }\n    setLocalCollections(collections);\n  }, [collections]);\n\n  return (\n    <>\n      <Layout style={{ height: \"100%\" }}>\n        <Sider\n          width=\"400\"\n          theme=\"light\"\n          style={{\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <PageHeader\n            title=\"Collection List\"\n            extra={[\n              <Tag color=\"black\" style={{ borderRadius: \"50%\" }}>\n                {collections.length}\n              </Tag>,\n              <NewCollectionModal\n                collections={collections}\n                isModalVisible={openCollectionModal}\n                setIsModalVisible={setOpenCollectionModal}\n              />,\n            ]}\n          />\n\n          <div style={{ padding: 10 }}>\n            <Input\n              size=\"large\"\n              placeholder=\"Search Collection\"\n              onChange={(e) => {\n                let searchCollections: Array<ICollection> = [];\n\n                if (e.target.value.length) {\n                  searchCollections = collections.filter(\n                    (collection: ICollection) =>\n                      collection.name\n                        .trim()\n                        .toLowerCase()\n                        .includes(e.target.value.toLowerCase())\n                  );\n                  setLocalCollections(searchCollections);\n                } else {\n                  setLocalCollections(collections);\n                }\n              }}\n            />\n          </div>\n\n          <List\n            grid={{\n              gutter: 10,\n              xs: 1,\n              sm: 1,\n              md: 1,\n              lg: 1,\n              xl: 1,\n              xxl: 1,\n            }}\n            dataSource={localCollections}\n            style={{ padding: 10, height: \"80vh\", overflow: \"auto\" }}\n            renderItem={(collection, index) => (\n              <List.Item key={index}>\n                <Tag\n                  key={index}\n                  style={{\n                    textTransform: \"capitalize\",\n                    cursor: \"pointer\",\n                    height: 55,\n                    width: \"100%\",\n                    display: \"grid\",\n                    placeItems: \"center\",\n                    fontSize: \"20px\",\n                    letterSpacing: 1.3,\n                  }}\n                  color={\n                    collection.name === selectedCollection?.name\n                      ? \"black\"\n                      : \"default\"\n                  }\n                  onClick={() => {\n                    setSelectCollection(collection);\n                  }}\n                >\n                  {collection.name}\n\n                  <span style={{ fontSize: 12 }}>\n                    {collection.fields} fields\n                  </span>\n                </Tag>\n              </List.Item>\n            )}\n          />\n        </Sider>\n\n        {selectedCollection && (\n          <Layout style={{ backgroundColor: \"#fafafb\", height: \"100%\" }}>\n            <Content>\n              <PageHeader\n                title={\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {selectedCollection.name}\n                  </span>\n                }\n                extra={[\n                  <Space>\n                    <Button\n                      onClick={() => {\n                        saveCollection(selectedCollection);\n                        message.success(\"Collection Saved\");\n                      }}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => {\n                        RemoveCollectionModal({\n                          deleteCollectionAction: deleteCollectionAction,\n                          collection: selectedCollection,\n                        });\n                      }}\n                    >\n                      Delete\n                    </Button>\n                  </Space>,\n                ]}\n              />\n\n              <br />\n              <Row>\n                <Col span={24} style={{ padding: 20 }}>\n                  <Card\n                    bordered={false}\n                    style={{ boxShadow: \"rgb(227 233 243) 0px 2px 4px\" }}\n                    title={\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <h1>{`${selectedCollection.fields} fields`}</h1>\n                      </div>\n                    }\n                    bodyStyle={{ padding: 0 }}\n                  >\n                    {Object.keys(selectedCollection.schema).map(\n                      (key: any, index) => {\n                        const schema: ICollectionSchema =\n                          selectedCollection.schema[key];\n                        const { type } = schema;\n                        return (\n                          <Row\n                            gutter={0}\n                            style={{\n                              height: 60,\n                              padding: 15,\n                              borderBottom: \"1px solid #f0f0f0\",\n                            }}\n                            align=\"middle\"\n                            key={index}\n                          >\n                            <Col span={6}>\n                              <Badge type={type} />\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  fontWeight: 500,\n                                }}\n                              >\n                                {key}\n                              </span>{\" \"}\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  textTransform: \"capitalize\",\n                                }}\n                              >\n                                {type}\n                              </span>{\" \"}\n                            </Col>\n                            <Col\n                              span={6}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-end\",\n                              }}\n                            >\n                              <Space size={25}>\n                                <EditOutlined\n                                  style={{ color: \"#8c8c8c\", fontSize: 20 }}\n                                  onClick={() =>\n                                    setEditSchema({ ...schema, name: key })\n                                  }\n                                />\n\n                                <DeleteOutlined\n                                  style={{ color: \"#cf1322\", fontSize: 20 }}\n                                  className=\"pointer\"\n                                  onClick={() =>\n                                    RemoveCollectionTypeModal({\n                                      removeCollectionType,\n                                      collection: selectedCollection,\n                                      key,\n                                    })\n                                  }\n                                />\n                              </Space>\n                            </Col>\n                          </Row>\n                        );\n                      }\n                    )}\n\n                    <NewCollectionTypeModal\n                      selectedCollection={selectedCollection}\n                      editSchema={editSchema}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </Content>\n          </Layout>\n        )}\n      </Layout>\n    </>\n  );\n}\n\nexport default CreateSchema;\n","import { ICollection } from \"../types/global\";\nimport { useState } from \"react\";\nimport { CaretRightOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nfunction SchemaView({ collection }: { collection: ICollection }) {\n  const dataSource = Object.keys(collection.schema).map((key, index) => ({\n    key: index,\n    field: key,\n    type: collection.schema[key].type,\n  }));\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <>\n      <h2\n        style={{\n          backgroundColor: \"#1890ff\",\n          textTransform: \"capitalize\",\n          padding: 10,\n          color: \"white\",\n          letterSpacing: 1.5,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: 0,\n        }}\n      >\n        {collection.name}\n        <span\n          style={{ cursor: collapsed ? \"zoom-out\" : \"zoom-in\" }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          {\" \"}\n          {!collapsed ? <CaretRightOutlined /> : <CaretDownOutlined />}{\" \"}\n        </span>\n      </h2>\n      {collapsed && (\n        <table style={{ width: \"100%\", transition: \"5s\" }}>\n          {dataSource.map((data) => (\n            <tr key={data.key}>\n              <td\n                style={{\n                  paddingLeft: 8,\n                  textAlign: \"left\",\n                  fontSize: 16,\n                  letterSpacing: 1.2,\n                }}\n              >\n                {data.field}\n              </td>\n              <td\n                style={{\n                  paddingRight: 8,\n                  textAlign: \"right\",\n                  fontSize: 14,\n                  letterSpacing: 1.2,\n                  color: \"#8c8c8c\",\n                }}\n              >\n                {data.type}\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default SchemaView;\n","import { useEffect, useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\nimport { CollectionsState, ESchemaTypes, ICollection } from \"../types/global\";\nimport { upsertCollectionData } from \"../http\";\n\nimport SchemaView from \"../components/SchemaView\";\n\nconst SchemaFlowPage = () => {\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [collectionNodes, setCollectionNodes] = useState([]);\n  const [position, setPosition] = useState<[number, number]>([0, 0]);\n\n  const checkIfRefExists = (\n    schema: any,\n    collectionName: string,\n    id: string\n  ) => {\n    let elementsNodes: any = [];\n    Object.keys(schema).forEach((key, index) => {\n      if (schema[key].type === ESchemaTypes.ref) {\n        elementsNodes.push({\n          id: `e1-${id}-${index}-${key}`,\n          source: collectionName,\n          target: schema[key].ref,\n          type: \"smoothstep\",\n          label: `${collectionName} ${schema[key].relationship} ${schema[key].ref}`,\n          animated: false,\n          labelStyle: {\n            textTransform: \"lowercase\",\n            fontSize: 20,\n            letterSpacing: 1.2,\n            backgroundColor: \"#ff9c6e\",\n          },\n          style: {\n            width: \"100%\",\n            padding: 20,\n            borderRadius: 5,\n          },\n        });\n      }\n    });\n\n    return elementsNodes;\n  };\n\n  const mapNodes = () => {\n    let nodes: any = [];\n\n    collections.forEach((collection: ICollection, index) => {\n      nodes.push({\n        id: collection.name,\n        data: {\n          label: (\n            <div>\n              <SchemaView collection={collection} />\n            </div>\n          ),\n        },\n        style: {\n          padding: 0,\n          width: \"300px\",\n          borderColor: \"#40a9ff\",\n          borderRadius: 0,\n        },\n        position: { x: collection.x, y: collection.y },\n      });\n      nodes.push(\n        ...checkIfRefExists(collection.schema, collection.name, collection.id)\n      );\n    });\n\n    setCollectionNodes(nodes);\n  };\n\n  useEffect(() => {\n    mapNodes();\n    if (collections.length) {\n      setPosition([\n        parseInt(collections[0].x.toString()),\n        parseInt(collections[0].y.toString()),\n      ]);\n      console.log(position);\n    }\n  }, [collections]);\n\n  const updateCollectionPosition = async (id: string, x: number, y: number) => {\n    let collection: ICollection | undefined = collections.find(\n      (collection) => collection.name === id\n    );\n    if (!collection) return;\n    try {\n      collection.x = x;\n      collection.y = y;\n      await upsertCollectionData(collection);\n      console.log(\"Node Position Updated\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"auto\",\n      }}\n    >\n      <ReactFlow\n        defaultPosition={position}\n        elements={collectionNodes}\n        minZoom={0.4}\n        defaultZoom={1}\n        snapToGrid={true}\n        snapGrid={[15, 15]}\n        onlyRenderVisibleElements={true}\n        onNodeDragStop={(event, node) => {\n          updateCollectionPosition(node.id, node.position.x, node.position.y);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SchemaFlowPage;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Form } from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\n\nconst { Option } = Select;\n\nfunction RefSelect({ schemaValue }: { schemaValue: any }) {\n  const [data, setData] = useState<Array<any>>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const [searchValues, setSearchValues] = useState<Array<string>>([]);\n  const [value, setValue] = useState<string>(\"\");\n\n  const makeSearch = async () => {\n    try {\n      const action: ICurdBody = {\n        model: schemaValue.ref,\n        operations: EOperations.ref,\n        data: {\n          query: {\n            search: search,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setData(data.list);\n      setSearchValues(data.searchValues);\n    } catch (error) {}\n  };\n\n  const options = data.map((d) => (\n    <Option value={d._id}>\n      {searchValues.map((value) => (d[value]?.length ? `${d[value]}` : d._id))}\n    </Option>\n  ));\n\n  useEffect(() => {\n    makeSearch();\n  }, [search]);\n\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n    >\n      <Select\n        showSearch\n        value={value}\n        placeholder={`Search anything in ${schemaValue.name}`}\n        defaultActiveFirstOption={true}\n        showArrow={false}\n        filterOption={false}\n        onSearch={(s) => setSearch(s)}\n        onChange={(v) => setValue(v)}\n        notFoundContent={null}\n        mode={schemaValue.relationship === \"hasmany\" ? \"multiple\" : undefined}\n      >\n        {options}\n      </Select>\n    </Form.Item>\n  );\n}\n\nexport default RefSelect;\n","import { Upload, message } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { Form } from \"antd\";\n\nconst { Dragger } = Upload;\n\nfunction UploadFile({ schemaValue }: { schemaValue: any }) {\n  const props = {\n    name: schemaValue.name,\n    multiple: schemaValue.relationship === \"hasmany\" ? true : false,\n    action: \"/file/\" + schemaValue.name,\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== \"uploading\") {\n        console.log(info.fileList);\n      }\n      if (status === \"done\") {\n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n    onDrop(e) {\n      console.log(\"Dropped files\", e.dataTransfer.files);\n    },\n  };\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n    >\n      <Dragger {...props}>\n        <p className=\"ant-upload-drag-icon\">\n          <InboxOutlined />\n        </p>\n        <p className=\"ant-upload-text\">\n          Click or drag file to this area to upload\n        </p>\n        <p className=\"ant-upload-hint\">\n          Support for a single or bulk upload. Strictly prohibit from uploading\n          company data or other band files\n        </p>\n      </Dragger>\n    </Form.Item>\n  );\n}\n\nexport default UploadFile;\n","import React from \"react\";\nimport {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport { ICollection, ICollectionSchema } from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction CreateCollectionAction({\n  selectedCollection,\n  action = \"create\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action?: \"create\" | \"update\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  const schema: ICollectionSchema = selectedCollection?.schema;\n\n  const onFinish = (values: any) => {\n    const file = Object.keys(values).find(\n      (key) => typeof values[key] === \"object\" && values[key][\"file\"]\n    );\n    if (file) {\n      values[file] = values[file].fileList.map((file) => file.response);\n      values[file] = values[file].length === 1 ? values[file][0] : values[file];\n    }\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations:\n          action === \"create\" ? EOperations.create : EOperations.update,\n        data: {\n          body: formData,\n          id: id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={action === \"create\" ? \"Create New\" : \"Edit\"}\n      />\n      <Card\n        style={{ marginLeft: 10, marginRight: 10 }}\n        title={\n          <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n            {selectedCollection?.name}\n          </span>\n        }\n      >\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          size=\"large\"\n        >\n          {schema &&\n            Object.keys(schema).map((key: any) => {\n              const schemaValue = getKeyValue<\n                keyof ICollectionSchema,\n                ICollectionSchema\n              >(key)(schema);\n\n              switch (schemaValue.type) {\n                case \"string\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                          enum: [\"male\", \"female\"],\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      {schemaValue.enum.length ? (\n                        <Select placeholder={`Select ${schemaValue.name}`}>\n                          <>\n                            {schemaValue.enum.map((e: any) => (\n                              <Option value={e}>{e}</Option>\n                            ))}\n                          </>\n                        </Select>\n                      ) : (\n                        <Input />\n                      )}\n                    </Form.Item>\n                  );\n\n                case \"number\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      <InputNumber style={{ width: 300 }} />\n                    </Form.Item>\n                  );\n                case \"date\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? moment(selectedRecord[schemaValue.name])\n                          : moment()\n                      }\n                    >\n                      <DatePicker />\n                    </Form.Item>\n                  );\n                case \"boolean\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]?.toString()\n                          : \"false\"\n                      }\n                    >\n                      <Select placeholder={`Select`}>\n                        <Option value={\"true\"}>True</Option>\n                        <Option value={\"false\"}>False</Option>\n                      </Select>\n                    </Form.Item>\n                  );\n                case \"ref\":\n                  return <RefSelect schemaValue={schemaValue} />;\n                case \"file\":\n                  return <UploadFile schemaValue={schemaValue} />;\n                default:\n                  return null;\n              }\n            })}\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {action === \"create\" ? \"Save\" : \"Update\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CreateCollectionAction;\n","import { Card, PageHeader, Space } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { ICollection } from \"../../types/global\";\n\nfunction ShowCollectionAction({\n  selectedCollection,\n  action = \"show\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action: \"show\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  return (\n    <>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={selectedCollection.name}\n        style={{ textTransform: \"capitalize\" }}\n        ghost={false}\n      />\n      <Card style={{ margin: 10 }}>\n        <div>\n          {Object.keys(selectedRecord).map((key: any) => {\n            return (\n              key !== \"key\" && (\n                <div>\n                  <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                    <Text\n                      style={{ textTransform: \"capitalize\" }}\n                      type=\"secondary\"\n                    >\n                      {key}\n                    </Text>\n\n                    <p>\n                      {Array.isArray(selectedRecord[key]) ? (\n                        selectedRecord[key].map((data: any) => (\n                          <DisplayData data={data} />\n                        ))\n                      ) : typeof selectedRecord[key] === \"object\" ? (\n                        <DisplayData data={selectedRecord[key]} />\n                      ) : (\n                        selectedRecord[key].toString()\n                      )}\n                    </p>\n                  </Space>\n                  <br />\n                </div>\n              )\n            );\n          })}\n        </div>\n      </Card>\n    </>\n  );\n}\n\nconst DisplayData = (data: any) => {\n  data = data[\"data\"];\n  return (\n    <div\n      style={{\n        borderLeft: \"6px solid #1890ff\",\n        border: \"1px dotted #1890ff\",\n        padding: 10,\n        margin: 2,\n        width: \"100%\",\n      }}\n    >\n      {Object.keys(data).map((key: any) => {\n        console.log(key);\n        return (\n          <>\n            <Space direction=\"vertical\">\n              <Text style={{ textTransform: \"capitalize\" }} type=\"secondary\">\n                {key}\n              </Text>\n              <p>\n                {typeof data[key] === \"object\" ? (\n                  <DisplayData data={data[key]} />\n                ) : (\n                  data[key]\n                )}\n              </p>\n            </Space>\n            <br />\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ShowCollectionAction;\n","import { Dispatch, useCallback, useEffect, useState } from \"react\";\nimport {\n  Table,\n  PageHeader,\n  Button,\n  Card,\n  Tag,\n  Space,\n  Modal,\n  message,\n  List,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../http\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport queryString from \"query-string\";\nimport { selectCollection } from \"../store/actionCreators\";\nimport CreateCollectionAction from \"../components/DataFlow/CreateCollectionAction\";\nimport ShowCollectionAction from \"../components/DataFlow/ShowCollectionAction\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n} from \"@ant-design/icons\";\n\nimport moment from \"moment\";\n\nconst { Column } = Table;\nconst { confirm } = Modal;\ninterface IParams {\n  action?: string;\n  id?: string;\n}\n\nfunction DataFlowPage() {\n  const { collection: collectionName }: any = useParams();\n  const history = useHistory();\n  const params: IParams = queryString.parse(window.location.href.split(\"?\")[1]);\n\n  const [list, setList] = useState<Array<{ name: string; type: string }>>([]);\n  const [create, setCreate] = useState({});\n  const [update, setUpdate] = useState({});\n  const [deleteC, setDeleteC] = useState({});\n  const [columns, setColumns] = useState([]);\n\n  const [selectedRecord, setSelectedRecord] = useState<any>({});\n\n  const [loading, setLoading] = useState(true);\n  const [rowSelection, setRowSelection] = useState<any>([]);\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const setSelectedCollection = useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n      setColumns(data.column);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteRecord = async (id: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.delete,\n        data: {\n          id: id,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Record Deleted\");\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: rowSelection,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setRowSelection([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (collectionName && Object.keys(params).length === 0) {\n      setColumns([]);\n      setList([]);\n      getCollectionList(collectionName, pagination);\n    }\n    if (!selectedCollection) {\n      history.push(\"/data\");\n    }\n  }, [collectionName, selectedCollection, window.location.href]);\n\n  const dataSource = list.map((l: any, index) => ({ key: index, ...l }));\n\n  const dataColumns: any = columns.map(\n    ({ name, type }: { name: string; type: string }) => ({\n      title: name.toString(),\n      dataIndex: name.toString(),\n      key: name.toString(),\n      type,\n    })\n  );\n\n  dataColumns.push({\n    title: \"Action\",\n    key: \"operation\",\n    fixed: \"right\",\n    width: 50,\n    type: \"operation\",\n  });\n\n  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    setPagination(pagination);\n    getCollectionList(collectionName, pagination);\n  };\n\n  if (!collectionName)\n    return (\n      <>\n        <PageHeader\n          title=\"Available Collections\"\n          subTitle=\"Select any collection to view data\"\n          ghost={false}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            padding: 20,\n            width: \"100%\",\n          }}\n        >\n          <List\n            dataSource={collections}\n            renderItem={(collection) => (\n              <Tag\n                style={{\n                  paddingTop: 15,\n                  paddingBottom: 15,\n                  textTransform: \"capitalize\",\n                  margin: 5,\n                  letterSpacing: 1.2,\n                  cursor: \"pointer\",\n                  alignContent: \"center\",\n                  paddingLeft: 30,\n                  paddingRight: 30,\n                  fontWeight: 600,\n                  fontSize: 20,\n                }}\n                onClick={() => {\n                  setSelectedCollection(collection);\n                  history.push(`/data/${collection.name}`);\n                }}\n              >\n                <span>{collection.name}</span>\n              </Tag>\n            )}\n          />\n        </div>\n      </>\n    );\n\n  if (params.action && params.action === \"create\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"create\"\n      />\n    );\n  if (params.action && params.action === \"update\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"update\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  if (params.action && params.action === \"show\" && selectedCollection)\n    return (\n      <ShowCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"show\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  return (\n    <>\n      <PageHeader\n        style={{ marginTop: 2 }}\n        ghost={false}\n        onBack={() => window.history.back()}\n        title={\n          <Space>\n            <span style={{ textTransform: \"capitalize\" }}>\n              {collectionName}{\" \"}\n            </span>\n            {pagination?.total && (\n              <Tag color=\"blue\" style={{ borderRadius: \"50%\" }}>\n                {pagination.total}\n              </Tag>\n            )}\n          </Space>\n        }\n        extra={[\n          rowSelection.length ? (\n            <Button\n              onClick={() => {\n                return confirm({\n                  title: \"Sure you want to delete selected records?\",\n                  icon: <ExclamationCircleOutlined />,\n                  content: null,\n                  onOk() {\n                    deleteManyRecord();\n                  },\n                  onCancel() {\n                    console.log(\"Cancel\");\n                  },\n                });\n              }}\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          ) : null,\n          <Button key=\"2\">\n            <FilterOutlined />\n            Filter\n          </Button>,\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => {\n              history.push(`/data/${collectionName}?action=create`);\n            }}\n          >\n            <PlusOutlined />\n            Create\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Table\n        loading={loading}\n        style={{ padding: 10 }}\n        dataSource={dataSource}\n        size=\"middle\"\n        rowKey={(record) => record._id}\n        rowSelection={{\n          selectedRowKeys: rowSelection,\n          onChange: (selectedRows) => {\n            setRowSelection(selectedRows);\n          },\n        }}\n        pagination={pagination}\n        onChange={handleTableChange}\n      >\n        {dataColumns.map((column: any) => {\n          switch (column.type) {\n            case \"objectId\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={70}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n            case \"boolean\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text, record, index) => {\n                    if (text === undefined) return null;\n                    return (\n                      <>\n                        {text ? (\n                          <Tag\n                            color={\"green\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <Tag\n                            color={\"red\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n\n            case \"date\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: Date) => {\n                    return text ? (\n                      <span>{moment(text).format(\"MM/DD/YYYY hh:mm\")}</span>\n                    ) : null;\n                  }}\n                />\n              );\n            case \"operation\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={60}\n                  render={(text, record: any) => {\n                    return (\n                      <Space>\n                        <Button\n                          icon={<EyeOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=show&id=${record._id}`\n                            );\n                          }}\n                        ></Button>\n                        <Button\n                          type=\"text\"\n                          icon={<EditOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=update&id=${record._id}`\n                            );\n                          }}\n                        />\n                        <Button\n                          type=\"text\"\n                          icon={<DeleteOutlined />}\n                          onClick={() => {\n                            return confirm({\n                              title: \"Sure you want to delete this record?\",\n                              icon: <ExclamationCircleOutlined />,\n                              content: null,\n                              onOk() {\n                                deleteRecord(record._id);\n                              },\n                              onCancel() {\n                                console.log(\"Cancel\");\n                              },\n                            });\n                          }}\n                        />\n                      </Space>\n                    );\n                  }}\n                />\n              );\n            case \"hasone\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      text && (\n                        <Space direction=\"vertical\">\n                          {typeof text === \"string\" ? (\n                            <span>{text} </span>\n                          ) : (\n                            Object.values(text).map((value) => {\n                              if (!(typeof value === \"string\")) return null;\n                              return <span>{value} </span>;\n                            })\n                          )}\n                        </Space>\n                      )\n                    );\n                  }}\n                />\n              );\n            case \"hasmany\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      <span>\n                        {text?.length} {column.title}\n                      </span>\n                    );\n                  }}\n                ></Column>\n              );\n            default:\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n          }\n        })}\n      </Table>\n    </>\n  );\n}\n\nexport default DataFlowPage;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout } from \"antd\";\nimport { useEffect } from \"react\";\n\n// components\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport SchemaFlowPage from \"./pages/SchemaFlowPage\";\nimport { useDispatch } from \"react-redux\";\nimport { initData } from \"./store/actionCreators\";\nimport DataFlowPage from \"./pages/DataFlowPage\";\n\nconst { Content } = Layout;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, []);\n\n  return (\n    <Layout className=\"main\">\n      <Router>\n        <SideBar />\n        <Layout>\n          <Header />\n          <Content style={{ overflow: \"auto\" }}>\n            <Switch>\n              <Route path=\"/\" exact component={SchemaFlowPage} />\n              <Route path=\"/collections\" exact component={CollectionsPage} />\n              <Route path=\"/data\" exact component={DataFlowPage} />\n              <Route path=\"/data/:collection\" exact component={DataFlowPage} />\n            </Switch>\n          </Content>\n        </Layout>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  CollectionAction,\n} from \"../types/global\";\n\nconst initialState: CollectionsState = {\n  collections: [],\n  selectedCollection: undefined,\n};\n\nconst reducer = (\n  state: CollectionsState = initialState,\n  action: CollectionAction\n): CollectionsState => {\n  switch (action.type) {\n    case actionTypes.INIT_COLLECTION:\n      return {\n        ...state,\n        collections: action.collections || [],\n      };\n    case actionTypes.ADD_COLLECTION:\n      return {\n        ...state,\n        collections: state.collections\n          .concat(action.collection)\n          .sort((a, b) => a.name.localeCompare(b.name)),\n      };\n\n    case actionTypes.REMOVE_COLLECTION:\n      const updatedCollections: ICollection[] = state.collections\n        .filter((article) => article.id !== action.collection.id)\n        .sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...state,\n        collections: updatedCollections,\n        selectedCollection: undefined,\n      };\n\n    case actionTypes.SET_COLLECTION:\n      const selectedCollection: ICollection = action.collection;\n\n      return {\n        ...state,\n        selectedCollection,\n      };\n\n    case actionTypes.UPDATE_COLLECTION:\n      const updatedCollection: ICollection = action.collection;\n\n      state.collections = state.collections.map((collection) => {\n        if (collection.id === updatedCollection.id) {\n          return updatedCollection;\n        }\n        return collection;\n      });\n\n      state.selectedCollection = updatedCollection;\n\n      return { ...state };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// state\nimport reducer from \"./store/reducer\";\n\nimport {\n  CollectionsState,\n  CollectionAction,\n  DispatchType,\n} from \"./types/global\";\n\nconst store: Store<CollectionsState, CollectionAction> & {\n  dispatch: DispatchType;\n} = createStore(reducer, applyMiddleware(thunk));\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}