{"version":3,"sources":["components/Header.tsx","http.tsx","store/actionTypes.ts","store/actionCreators.ts","components/SideBar.tsx","types/global.ts","components/Badge.tsx","components/common/RequiredText.tsx","components/NewCollectionModal.tsx","components/DataTypes/Boolean.tsx","components/DataTypes/Number.tsx","components/DataTypes/Ref.tsx","components/DataTypes/String.tsx","components/DataTypes/Date.tsx","components/NewCollectionTypeModal.tsx","components/RemoveCollectionTypeModal.tsx","components/RemoveCollectionModal.tsx","pages/CollectionsPage.tsx","components/SchemaView.tsx","pages/SchemaFlowPage.tsx","components/DataFlow/RefSelect.tsx","components/DataFlow/CreateCollectionAction.tsx","components/DataFlow/ShowCollectionAction.tsx","pages/DataFlowPage.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["AppHeader","EOperations","location","useLocation","headerName","collections","data","pathname","split","subHeaderName","ghost","title","subTitle","INIT_COLLECTION","ADD_COLLECTION","REMOVE_COLLECTION","SET_COLLECTION","UPDATE_COLLECTION","upsertCollectionData","collection","axios","post","name","deleteCollection","delete","crudCollection","crudBody","selectCollection","disPatchAction","type","actionTypes","updateCollection","action","dispatch","a","Sider","Layout","SideBar","ESchemaTypes","ERelationShip","useState","className","src","alt","header","setHeader","selectedMenu","useDispatch","useSelector","state","React","useCallback","collapsible","collapsedWidth","theme","onCollapse","collapsed","style","marginTop","mode","defaultSelectedKeys","Item","icon","LineChartOutlined","to","AlignCenterOutlined","DatabaseOutlined","Badge","toLowerCase","color","string","number","boolean","ref","date","getBadgeColor","fontWeight","getBadgeName","Text","Typography","RequiredText","message","fontSize","strong","NewCollectionModal","isModalVisible","setIsModalVisible","collectionName","setCollectionName","nameInput","useRef","newCollection","addCollection","setSelectedCollection","handleOk","length","find","error","col","id","uuidv4","schema","fields","x","Math","floor","y","useEffect","current","focus","shape","onClick","PlusOutlined","visible","onOk","onCancel","placeholder","value","onChange","target","test","onKeyDown","e","key","Boolean","setState","updateState","updatedData","prev","direction","width","defaultValue","checkedChildren","unCheckedChildren","defaultChecked","default","required","Number","typeSettings","setTypeSettings","min","max","Group","settings","index","unique","Object","keys","forEach","includes","Ref","shallowEqual","overflow","relationship","Button","hasMany","hasOne","autopopulate","height","map","textTransform","TextArea","Input","trim","uppercase","lowercase","maxLength","minLength","String","enumText","setEnumText","getStateSettings","filter","obj","getKeyValue","enum","join","showCount","lg","disabled","Date","Tabs","TabPane","NewCollectionTypeModal","selectedCollection","editSchema","tabKey","setTabKey","saveCollection","footer","toString","schemas","updatedCollection","confirm","Modal","RemoveCollectionModal","removeCollectionType","ExclamationCircleOutlined","content","deleteType","console","log","deleteCollectionAction","success","Content","Search","CreateSchema","setEditSchema","openCollectionModal","setOpenCollectionModal","localCollections","setLocalCollections","setSelectCollection","removeCollection","backgroundColor","extra","borderRadius","padding","size","searchCollections","grid","gutter","xs","sm","md","xl","xxl","dataSource","renderItem","cursor","display","placeItems","letterSpacing","span","bordered","boxShadow","justifyContent","bodyStyle","borderBottom","align","EditOutlined","DeleteOutlined","RemoveCollectionTypeModal","SchemaView","field","setCollapsed","margin","CaretDownOutlined","CaretRightOutlined","transition","paddingLeft","textAlign","paddingRight","SchemaFlowPage","collectionNodes","setCollectionNodes","position","setPosition","mapNodes","nodes","push","label","borderColor","elementsNodes","source","animated","labelStyle","checkIfRefExists","parseInt","updateCollectionPosition","defaultPosition","elements","minZoom","defaultZoom","snapToGrid","snapGrid","onlyRenderVisibleElements","onNodeDragStop","event","node","Option","Select","RefSelect","schemaValue","setData","search","setSearch","searchValues","setSearchValues","setValue","makeSearch","model","operations","query","list","options","d","_id","rules","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","s","v","notFoundContent","undefined","CreateCollectionAction","selectedRecord","createData","formData","body","create","update","window","history","back","response","onBack","marginLeft","marginRight","onFinish","values","onFinishFailed","errorInfo","layout","initialValue","moment","htmlType","DisplayData","borderLeft","border","ShowCollectionAction","Array","isArray","Column","Table","DataFlowPage","useParams","useHistory","params","queryString","parse","href","setList","columns","setColumns","setSelectedRecord","loading","setLoading","rowSelection","setRowSelection","pageSize","pagination","setPagination","getCollectionList","column","deleteRecord","deleteManyRecord","deleteAll","l","dataColumns","dataIndex","fixed","total","FilterOutlined","rowKey","record","selectedRowKeys","selectedRows","filters","sorter","render","text","format","EyeOutlined","flexWrap","paddingTop","paddingBottom","alignContent","App","get","initialState","Header","path","exact","component","CollectionsPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","concat","sort","b","localeCompare","updatedCollections","article","store","createStore","applyMiddleware","thunk","process","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.77834a5e.chunk.js","sourcesContent":["import { useLocation } from \"react-router-dom\";\nimport { PageHeader } from \"antd\";\n\nfunction AppHeader() {\n  const location = useLocation();\n  const headerNames: any = {\n    \"\": \"Schema Flow\",\n    collections: \"Schema\",\n    data: \"Data Flow\",\n  };\n  const subHeaderNames: any = {\n    \"\": \"Visualize you database\",\n    collections: \"Manage your mongoose schema\",\n    data: \"Manage your data\",\n  };\n\n  const headerName = headerNames[location.pathname.split(\"/\")[1]];\n\n  const subHeaderName = subHeaderNames[location.pathname.split(\"/\")[1]];\n\n  if (headerName === \"Data Flow\") return null;\n  return (\n    <PageHeader ghost={false} title={headerName} subTitle={subHeaderName} />\n  );\n}\n\nexport default AppHeader;\n","import axios, { AxiosResponse } from \"axios\";\nimport { ICollection } from \"./types/global\";\n\nexport function getAllCollectionList(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/model/list\");\n}\n\nexport function upsertCollectionData(\n  collection: ICollection\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/create/\" + collection.name, collection);\n}\n\nexport function deleteCollection({\n  name,\n}: ICollection): Promise<AxiosResponse> {\n  return axios.delete(\"/admin/model/delete/\" + name);\n}\n\nexport function crudCollection(crudBody: ICurdBody): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/crud/\", crudBody);\n}\n\nexport enum EOperations {\n  list = \"list\",\n  create = \"create\",\n  update = \"update\",\n  delete = \"delete\",\n  deleteAll = \"deleteAll\",\n  ref = \"ref\",\n}\n\ninterface ICurdData {\n  id?: string | Array<string>;\n  query?: {\n    pagination?: {\n      current: number;\n      pageSize: number;\n    };\n    find?: {};\n    search?: string;\n  };\n  body?: {};\n}\n\nexport interface ICurdBody {\n  model: string;\n  operations: EOperations;\n  data: ICurdData;\n}\n","export const INIT_COLLECTION = \"INIT_COLLECTION\";\nexport const ADD_COLLECTION = \"ADD_COLLECTION\";\nexport const REMOVE_COLLECTION = \"REMOVE_COLLECTION\";\nexport const SET_COLLECTION = \"SET_COLLECTION\";\nexport const UPDATE_COLLECTION = \"UPDATE_COLLECTION\";\n","import * as actionTypes from \"./actionTypes\";\n\nimport { ICollection, CollectionAction, DispatchType } from \"../types/global\";\nimport {\n  deleteCollection,\n  getAllCollectionList,\n  upsertCollectionData,\n} from \"../http\";\nimport { AxiosResponse } from \"axios\";\n\nexport function addCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.ADD_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function removeCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.REMOVE_COLLECTION,\n    collection,\n  };\n\n  return async (dispatch: DispatchType) => {\n    await deleteCollection(collection);\n    dispatch(action);\n  };\n}\n\nexport function selectCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.SET_COLLECTION,\n    collection,\n  };\n  return disPatchAction(action);\n}\n\nexport function updateCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.UPDATE_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function simulateHttpRequest(collection: CollectionAction) {\n  return (dispatch: DispatchType) => {\n    setTimeout(() => {\n      dispatch(collection);\n    }, 500);\n  };\n}\n\nconst disPatchAction = (collection: CollectionAction) => {\n  return (dispatch: DispatchType) => dispatch(collection);\n};\n\nexport const initData = () => async (dispatch: DispatchType) => {\n  let { data: initialState }: AxiosResponse = await getAllCollectionList();\n  const collection: CollectionAction = {\n    type: actionTypes.INIT_COLLECTION,\n    collections: initialState,\n    collection: initialState[0] || {},\n  };\n\n  dispatch(collection);\n};\n","import React, { useState } from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport {\n  AlignCenterOutlined,\n  LineChartOutlined,\n  DatabaseOutlined,\n  CaretRightOutlined,\n  CaretDownOutlined,\n} from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport { Dispatch } from \"redux\";\nimport { selectCollection } from \"../store/actionCreators\";\n\nconst { Sider } = Layout;\n\nfunction SideBar() {\n  const location = useLocation();\n  const [header, setHeader] = useState(\n    <img className=\"logo-large\" src=\"/img/black-logo.png\" alt=\"\"></img>\n  );\n\n  const selectedMenu = location.pathname.split(\"/\")[1];\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n  return (\n    <Sider\n      collapsible={true}\n      collapsedWidth=\"50\"\n      theme=\"light\"\n      onCollapse={(collapsed, type) => {\n        if (collapsed)\n          setHeader(\n            <img className=\"logo-small\" src=\"/img/o-logo.png\" alt=\"\"></img>\n          );\n        else\n          setHeader(\n            <img className=\"logo-large\" src=\"/img/black-logo.png\" alt=\"\"></img>\n          );\n      }}\n    >\n      <div className=\"logo-container\">{header}</div>\n      <Menu\n        style={{ marginTop: 10 }}\n        mode=\"inline\"\n        defaultSelectedKeys={[selectedMenu]}\n      >\n        <Menu.Item key=\"\" icon={<LineChartOutlined />}>\n          <Link to=\"/\">Schema Flow</Link>\n        </Menu.Item>\n        <Menu.Item key=\"collection\" icon={<AlignCenterOutlined />}>\n          <Link to=\"/collections\">Collections</Link>\n        </Menu.Item>\n        <Menu.Item key=\"data\" icon={<DatabaseOutlined />}>\n          <Link to=\"/data\">Data Flow</Link>\n          {/* <span style={{ float: \"right\" }}>\n            {selectedMenu !== \"data\" ? (\n              <CaretRightOutlined />\n            ) : (\n              <CaretDownOutlined />\n            )}{\" \"}\n          </span> */}\n        </Menu.Item>\n        {/* {selectedMenu === \"data\" && (\n          <Menu theme=\"dark\" mode=\"inline\">\n            {collections.map((collection, index) => {\n              return (\n                <Menu.Item\n                  style={{\n                    color: \"white\",\n                    textTransform: \"capitalize\",\n                    letterSpacing: 1.2,\n                  }}\n                  key={index.toString()}\n                >\n                  <Link\n                    to={\"/data/\" + collection.name}\n                    onClick={() => setSelectedCollection(collection)}\n                  >\n                    {\" \"}\n                    {collection.name}\n                  </Link>\n                </Menu.Item>\n              );\n            })}\n          </Menu>\n        )} */}\n      </Menu>\n    </Sider>\n  );\n}\n\nexport default SideBar;\n","export enum ESchemaTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  ref = \"ref\",\n  date = \"date\",\n  array = \"array\",\n  object = \"object\",\n  enums = \"enums\",\n}\n\nexport enum ERelationShip {\n  hasOne = \"hasone\",\n  hasMany = \"hasmany\",\n  none = \"none\",\n}\n\nexport interface ICollectionSchema {\n  name: string;\n  type: ESchemaTypes;\n  default?: any;\n  required?: boolean;\n  index?: boolean;\n  unique?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  trim?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  ref?: string;\n  relationship?: ERelationShip;\n  enum: Array<string>;\n  autopopulate: boolean;\n}\n\nexport interface ICollection {\n  id: string;\n  name: string;\n  schema: any;\n  fields: number;\n  x: Number;\n  y: Number;\n}\n\nexport type CollectionsState = {\n  collections: ICollection[];\n  selectedCollection: ICollection | undefined;\n  newCollection?: ICollection;\n};\n\nexport type CollectionAction = {\n  type: string;\n  collection: ICollection;\n  collections?: Array<ICollection>;\n};\n\nexport type DispatchType = (args: CollectionAction) => CollectionAction;\n","import { Tag } from \"antd\";\n\nimport { ESchemaTypes } from \"../types/global\";\n\nfunction Badge({ type }: { type: any }) {\n  type = type.toLowerCase();\n  const getBadgeColor = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"#f50\";\n      case ESchemaTypes.number:\n        return \"#d4b106\";\n      case ESchemaTypes.boolean:\n        return \"#52c41a\";\n      case ESchemaTypes.ref:\n        return \"#13c2c2\";\n      case ESchemaTypes.date:\n        return \"#13c2c2\";\n      default:\n        return \"#8c8c8c\";\n    }\n  };\n\n  const getBadgeName = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"Abc\";\n      case ESchemaTypes.number:\n        return \"123\";\n      case ESchemaTypes.boolean:\n        return \"true\";\n      case ESchemaTypes.ref:\n        return \"Relation\";\n      case ESchemaTypes.date:\n        return \"17 Aug\";\n      default:\n        return \"NA\";\n    }\n  };\n\n  return (\n    <div>\n      <Tag color={getBadgeColor()} style={{ fontWeight: \"bold\" }}>\n        {getBadgeName()}\n      </Tag>\n    </div>\n  );\n}\n\nexport default Badge;\n","import { Typography } from 'antd'\n\nconst { Text } = Typography;\n\nexport default function RequiredText({ message = \"This field is required\" }: { message?: string }) {\n    return (\n        <Text type=\"danger\" style={{ fontSize: 12 }} strong >{message}</Text>\n    )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Input, message } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { addCollection, selectCollection } from \"../store/actionCreators\";\n\nimport { ICollection } from \"../types/global\";\n\nimport RequiredText from \"./common/RequiredText\";\n\nfunction NewCollectionModal({\n  collections,\n  isModalVisible,\n  setIsModalVisible,\n}: {\n  collections: Array<ICollection>;\n  isModalVisible: boolean;\n  setIsModalVisible: Function;\n}) {\n  const [collectionName, setCollectionName] = useState(\"\");\n  const nameInput = useRef<any>();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const newCollection = React.useCallback(\n    (collection: ICollection) => dispatch(addCollection(collection)),\n    [dispatch]\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const error = () => {\n    message.error(\"Collection already exists\");\n  };\n\n  const handleOk = () => {\n    if (collectionName.length === 0) return;\n    if (collections.find((collection) => collection.name === collectionName)) {\n      error();\n      return;\n    }\n\n    const col: ICollection = {\n      id: uuidv4(),\n      name: collectionName,\n      schema: {},\n      fields: 0,\n      x: Math.floor(collections.length % 4) * 300 + 20,\n      y: (Math.floor(collections.length / 4) + 1) * 60,\n    };\n    newCollection(col);\n    setSelectedCollection(col);\n    setCollectionName(\"\");\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (nameInput.current) {\n      nameInput.current.focus();\n    }\n  }, []);\n  return (\n    <>\n      <Button type=\"primary\" shape=\"round\" onClick={showModal}>\n        Create New\n      </Button>\n      <Modal\n        title={\n          <span>\n            {\" \"}\n            <PlusOutlined /> Create new collection\n          </span>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Input\n          ref={nameInput}\n          placeholder=\"Collection Name\"\n          value={collectionName}\n          onChange={({ target: { value } }) => {\n            if (/[^a-zA-Z]/.test(value)) return;\n            setCollectionName(value);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handleOk();\n            }\n          }}\n        />\n        {collectionName.length === 0 && <RequiredText />}\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionModal;\n","import { Space, Switch, Input } from \"antd\";\nimport React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Boolean({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"boolean\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            defaultValue={state.name}\n          />\n          <span>Default value</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.default}\n            onChange={(e) => updateState(\"default\", e)}\n          />\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Boolean;\n","import { Space, InputNumber, Input, Checkbox } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { useState } from \"react\"\n\nfunction Number({ state, setState }: { state: ICollectionSchema & { name: string }, setState: Function }) {\n\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>([]);\n\n\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {}\n    updatedData[key] = value\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }))\n  }\n\n  return (\n    <>{\n      state.type === \"number\" &&\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <span>Name for the type</span>\n        <Input placeholder=\"Type Name\" onChange={(e) => updateState(\"name\", e.target.value)} />\n        <span>Default value</span>\n        <InputNumber\n          min={1}\n          max={10}\n          onChange={(e) => updateState(\"default\", e)}\n          placeholder={\"10\"}\n          style={{ width: \"100%\" }}\n        />\n\n        <span>Settings</span>\n        <Checkbox.Group\n          style={{ width: \"100%\" }}\n          onChange={(e) => {\n            const settings: any = {\n              index: false,\n              required: false,\n              unique: false,\n            }\n\n            setState((prev: ICollectionSchema) => {\n              Object.keys(settings).forEach(key => {\n                if (e.includes(key)) {\n                  settings[key] = true\n                }\n              })\n              return { ...prev, ...settings }\n\n            })\n            setTypeSettings(e)\n          }}\n          value={typeSettings}\n        >\n          <Space direction=\"vertical\">\n            <Checkbox value=\"required\">Required</Checkbox>\n            <Checkbox value=\"index\">Index</Checkbox>\n            <Checkbox value=\"unique\">Unique</Checkbox>\n            <Checkbox value=\"minLength\">Minimum Length</Checkbox>\n            {typeSettings.includes(\"minLength\") && (\n              <InputNumber\n                min={1}\n                onChange={(number) => updateState(\"minLength\", number)}\n              />\n            )}\n            <Checkbox value=\"maxLength\">Maximum Length</Checkbox>\n            {typeSettings.includes(\"maxLength\") && (\n              <InputNumber\n                min={1}\n                onChange={(number) => updateState(\"maxLength\", number)}\n              />\n            )}\n          </Space>\n        </Checkbox.Group>\n      </Space>\n    }</>\n  );\n}\n\nexport default Number;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction Ref({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"ref\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            {collections.map(({ name }, index) => (\n              <Radio.Button\n                value={name}\n                style={{ textTransform: \"capitalize\" }}\n                key={index}\n              >\n                {name}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Ref;\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Input, Checkbox, InputNumber, Row, Col } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nconst { TextArea } = Input;\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n  maxLength: 0,\n  minLength: 0,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction String({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const [enumText, setEnumText] = useState(\"\");\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        settings[key] &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n    if (state.enum.length) {\n      setEnumText(state.enum.join(\"\\n\"));\n    }\n  }, [state]);\n\n  return (\n    <>\n      {state.type === \"string\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            value={state.name}\n          />\n          <RequiredText />\n          <span>Default value</span>\n          <Input\n            onChange={(e) => updateState(\"default\", e.target.value)}\n            value={state.default}\n            placeholder=\"Keep empty for not setting the value\"\n          />\n          <span>Enums</span>\n\n          <TextArea\n            showCount\n            maxLength={100}\n            style={{ width: \"100%\" }}\n            value={enumText}\n            placeholder=\"Keep empty for not setting the value\"\n            onChange={(e) => {\n              setEnumText(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                updateState(\"enum\", enumText.trim().split(\"\\n\"));\n              }\n            }}\n          />\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            onChange={(e) => {\n              setState((prev: ICollectionSchema) => {\n                if (!e.includes(\"maxLength\")) {\n                  prev[\"maxLength\"] = 0;\n                }\n                if (!e.includes(\"minLength\")) {\n                  prev[\"minLength\"] = 0;\n                }\n                Object.keys(settings).forEach((key: any) => {\n                  settings[key] = e.includes(key);\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Row>\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"required\">Required</Checkbox>\n                <Checkbox value=\"index\">Index</Checkbox>\n                <Checkbox value=\"unique\">Unique</Checkbox>\n                <Checkbox\n                  value=\"lowercase\"\n                  disabled={typeSettings.includes(\"uppercase\")}\n                >\n                  Lowercase\n                </Checkbox>\n                <Checkbox\n                  value=\"uppercase\"\n                  disabled={typeSettings.includes(\"lowercase\")}\n                >\n                  Uppercase\n                </Checkbox>\n              </Col>\n\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"trim\">Trim</Checkbox>\n                <Checkbox value=\"minLength\">Minimum Length</Checkbox>\n                {typeSettings.includes(\"minLength\") && (\n                  <InputNumber\n                    min={1}\n                    value={state.minLength || 0}\n                    onChange={(number) => updateState(\"minLength\", number)}\n                  />\n                )}\n                <Checkbox value=\"maxLength\">Maximum Length</Checkbox>\n                {typeSettings.includes(\"maxLength\") && (\n                  <InputNumber\n                    min={1}\n                    value={state.maxLength || 0}\n                    onChange={(number) => updateState(\"maxLength\", number)}\n                  />\n                )}\n              </Col>\n            </Row>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default String;\n","import { Space, Input, DatePicker } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Date({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"date\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <DatePicker onChange={(e) => updateState(\"default\", e)} />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Date;\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Dispatch } from \"redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Tabs, Space, Button, Radio, Modal, message } from \"antd\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Boolean from \"./DataTypes/Boolean\";\nimport Number from \"./DataTypes/Number\";\nimport Ref from \"./DataTypes/Ref\";\nimport String from \"./DataTypes/String\";\nimport Date from \"./DataTypes/Date\";\n\nimport {\n  ICollection,\n  ESchemaTypes,\n  ICollectionSchema,\n  ERelationShip,\n} from \"../types/global\";\nimport { updateCollection } from \"../store/actionCreators\";\n\nconst { TabPane } = Tabs;\n\nfunction NewCollectionTypeModal({\n  selectedCollection,\n  editSchema,\n}: {\n  selectedCollection: ICollection;\n  editSchema: ICollectionSchema | undefined;\n}) {\n  // variables\n  const [tabKey, setTabKey] = useState(\"1\");\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const error = () => {\n    message.error(\"Type already exist\");\n  };\n\n  // local state\n  const [state, setState] = useState<ICollectionSchema>({\n    name: \"\",\n    type: ESchemaTypes.string,\n    default: \"\",\n    index: false,\n    maxLength: 0,\n    minLength: 0,\n    required: false,\n    trim: false,\n    unique: false,\n    uppercase: false,\n    lowercase: false,\n    enum: [],\n    ref: \"none\",\n    relationship: ERelationShip.hasMany,\n    autopopulate: true,\n  });\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const resetState = () => {\n    setState({\n      name: \"\",\n      type: ESchemaTypes.string,\n      default: \"\",\n      index: false,\n      maxLength: 0,\n      minLength: 0,\n      required: false,\n      trim: false,\n      unique: false,\n      uppercase: false,\n      lowercase: false,\n      ref: \"none\",\n      relationship: ERelationShip.hasMany,\n      enum: [],\n      autopopulate: true,\n    });\n    setTabKey(\"1\");\n  };\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      resetState();\n    }\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    if (editSchema) {\n      setIsModalVisible(true);\n      setState(editSchema);\n      setTabKey(\"2\");\n    }\n  }, [editSchema]);\n\n  const footer = (\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        if (tabKey !== \"2\") {\n          setTabKey((prev) => {\n            return (+prev + 1).toString();\n          });\n        } else {\n          const schemas: any = {\n            ...selectedCollection.schema,\n          };\n          if (!editSchema && schemas[state.name]) {\n            error();\n            return;\n          }\n          let fields = selectedCollection.fields + 1;\n          schemas[state.name] = state;\n\n          const updatedCollection: ICollection = {\n            ...selectedCollection,\n            schema: schemas,\n            fields: fields,\n          };\n          saveCollection(updatedCollection);\n          handleOk();\n        }\n      }}\n      disabled={state.name.length === 0}\n    >\n      {\"Save\"}\n    </Button>\n  );\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={showModal}\n        style={{\n          width: \"100%\",\n          height: 50,\n          textTransform: \"uppercase\",\n          fontWeight: \"bold\",\n        }}\n      >\n        Add New Field\n      </Button>\n      <Modal\n        title={\n          <Space>\n            {\" \"}\n            <PlusOutlined />\n            <Radio.Group\n              onChange={(e) => {\n                setState((prev: any) => ({ ...prev, type: e.target.value }));\n              }}\n              value={state.type}\n            >\n              <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n              <Radio.Button value={ESchemaTypes.boolean}>Boolean</Radio.Button>\n              <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n              <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n              <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n            </Radio.Group>\n          </Space>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={footer}\n        width={800}\n      >\n        <String state={state} setState={setState} />\n        <Boolean state={state} setState={setState} />\n\n        <Number state={state} setState={setState} />\n\n        <Ref state={state} setState={setState} />\n        <Date state={state} setState={setState} />\n        {/* <Tabs\n          tabPosition=\"left\"\n          activeKey={tabKey}\n          style={{ height: \"60vh\", width: \"100%\" }}\n        >\n          <TabPane tab=\"Type\" key=\"1\">\n            <div style={{ margin: 15 }}>\n              <Radio.Group\n                onChange={(e) => {\n                  setState((prev: any) => ({ ...prev, type: e.target.value }));\n                }}\n                value={state.type}\n              >\n                <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n                <Radio.Button value={ESchemaTypes.boolean}>\n                  Boolean\n                </Radio.Button>\n                <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n                <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n                <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n              </Radio.Group>\n            </div>\n          </TabPane>\n          <TabPane tab=\"Details\" key=\"2\">\n            <String state={state} setState={setState} />\n            <Boolean state={state} setState={setState} />\n\n            <Number state={state} setState={setState} />\n\n            <Ref state={state} setState={setState} />\n            <Date state={state} setState={setState} />\n          </TabPane>\n        </Tabs> */}\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionTypeModal;\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  removeCollectionType,\n  collection,\n  key,\n}: {\n  removeCollectionType: Function;\n  collection: ICollection;\n  key: any;\n}) {\n  const deleteType = () => {\n    const { schema } = collection;\n    delete schema[key];\n    collection.schema = schema;\n    collection.fields = collection.fields - 1;\n    removeCollectionType(collection);\n  };\n\n  return confirm({\n    title: \"Sure you want to delete type?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteType();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import { Modal, message } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  collection,\n  deleteCollectionAction,\n}: {\n  collection: ICollection;\n  deleteCollectionAction: Function;\n}) {\n  const deleteCollection = () => {\n    deleteCollectionAction(collection);\n    message.success(\"Collection removed\");\n  };\n\n  return confirm({\n    title: \"Sure you want to delete this collection?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteCollection();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  List,\n  Button,\n  Space,\n  Card,\n  Tag,\n  Layout,\n  Input,\n  PageHeader,\n  message,\n} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nimport Badge from \"../components/Badge\";\n\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  selectCollection,\n  updateCollection,\n  removeCollection,\n} from \"../store/actionCreators\";\n\nimport NewCollectionModal from \"../components/NewCollectionModal\";\nimport NewCollectionTypeModal from \"../components/NewCollectionTypeModal\";\nimport RemoveCollectionTypeModal from \"../components/RemoveCollectionTypeModal\";\nimport RemoveCollectionModal from \"../components/RemoveCollectionModal\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  ICollectionSchema,\n} from \"../types/global\";\n\n// define vars\nconst { Sider, Content } = Layout;\nconst { Search } = Input;\n\nfunction CreateSchema() {\n  const [editSchema, setEditSchema] = useState<ICollectionSchema>();\n  const [openCollectionModal, setOpenCollectionModal] = useState(false);\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [localCollections, setLocalCollections] = useState<Array<ICollection>>(\n    []\n  );\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const setSelectCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const removeCollectionType = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const deleteCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(removeCollection(collection)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (!selectedCollection && collections.length) {\n      setSelectCollection(collections[0]);\n    }\n    setLocalCollections(collections);\n  }, [collections]);\n\n  return (\n    <>\n      <Layout style={{ height: \"100%\" }}>\n        <Sider\n          width=\"400\"\n          theme=\"light\"\n          style={{\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <PageHeader\n            title=\"Collection List\"\n            extra={[\n              <Tag color=\"black\" style={{ borderRadius: \"50%\" }}>\n                {collections.length}\n              </Tag>,\n              <NewCollectionModal\n                collections={collections}\n                isModalVisible={openCollectionModal}\n                setIsModalVisible={setOpenCollectionModal}\n              />,\n            ]}\n          />\n\n          <div style={{ padding: 10 }}>\n            <Input\n              size=\"large\"\n              placeholder=\"Search Collection\"\n              onChange={(e) => {\n                let searchCollections: Array<ICollection> = [];\n\n                if (e.target.value.length) {\n                  searchCollections = collections.filter(\n                    (collection: ICollection) =>\n                      collection.name\n                        .trim()\n                        .toLowerCase()\n                        .includes(e.target.value.toLowerCase())\n                  );\n                  setLocalCollections(searchCollections);\n                } else {\n                  setLocalCollections(collections);\n                }\n              }}\n            />\n          </div>\n\n          <List\n            grid={{\n              gutter: 10,\n              xs: 1,\n              sm: 1,\n              md: 1,\n              lg: 1,\n              xl: 1,\n              xxl: 1,\n            }}\n            dataSource={localCollections}\n            style={{ padding: 10, height: \"80vh\", overflow: \"auto\" }}\n            renderItem={(collection, index) => (\n              <List.Item key={index}>\n                <Tag\n                  key={index}\n                  style={{\n                    textTransform: \"capitalize\",\n                    cursor: \"pointer\",\n                    height: 55,\n                    width: \"100%\",\n                    display: \"grid\",\n                    placeItems: \"center\",\n                    fontSize: \"20px\",\n                    letterSpacing: 1.3,\n                  }}\n                  color={\n                    collection.name === selectedCollection?.name\n                      ? \"black\"\n                      : \"default\"\n                  }\n                  onClick={() => {\n                    setSelectCollection(collection);\n                  }}\n                >\n                  {collection.name}\n\n                  <span style={{ fontSize: 12 }}>\n                    {collection.fields} fields\n                  </span>\n                </Tag>\n              </List.Item>\n            )}\n          />\n        </Sider>\n\n        {selectedCollection && (\n          <Layout style={{ backgroundColor: \"#fafafb\", height: \"100%\" }}>\n            <Content>\n              <PageHeader\n                title={\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {selectedCollection.name}\n                  </span>\n                }\n                extra={[\n                  <Space>\n                    <Button\n                      onClick={() => {\n                        saveCollection(selectedCollection);\n                        message.success(\"Collection Saved\");\n                      }}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => {\n                        RemoveCollectionModal({\n                          deleteCollectionAction: deleteCollectionAction,\n                          collection: selectedCollection,\n                        });\n                      }}\n                    >\n                      Delete\n                    </Button>\n                  </Space>,\n                ]}\n              />\n\n              <br />\n              <Row>\n                <Col span={24} style={{ padding: 20 }}>\n                  <Card\n                    bordered={false}\n                    style={{ boxShadow: \"rgb(227 233 243) 0px 2px 4px\" }}\n                    title={\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <h1>{`${selectedCollection.fields} fields`}</h1>\n                      </div>\n                    }\n                    bodyStyle={{ padding: 0 }}\n                  >\n                    {Object.keys(selectedCollection.schema).map(\n                      (key: any, index) => {\n                        const schema: ICollectionSchema =\n                          selectedCollection.schema[key];\n                        const { type } = schema;\n                        return (\n                          <Row\n                            gutter={0}\n                            style={{\n                              height: 60,\n                              padding: 15,\n                              borderBottom: \"1px solid #f0f0f0\",\n                            }}\n                            align=\"middle\"\n                            key={index}\n                          >\n                            <Col span={6}>\n                              <Badge type={type} />\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  fontWeight: 500,\n                                }}\n                              >\n                                {key}\n                              </span>{\" \"}\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  textTransform: \"capitalize\",\n                                }}\n                              >\n                                {type}\n                              </span>{\" \"}\n                            </Col>\n                            <Col\n                              span={6}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-end\",\n                              }}\n                            >\n                              <Space size={25}>\n                                <EditOutlined\n                                  style={{ color: \"#8c8c8c\", fontSize: 20 }}\n                                  onClick={() =>\n                                    setEditSchema({ ...schema, name: key })\n                                  }\n                                />\n\n                                <DeleteOutlined\n                                  style={{ color: \"#cf1322\", fontSize: 20 }}\n                                  className=\"pointer\"\n                                  onClick={() =>\n                                    RemoveCollectionTypeModal({\n                                      removeCollectionType,\n                                      collection: selectedCollection,\n                                      key,\n                                    })\n                                  }\n                                />\n                              </Space>\n                            </Col>\n                          </Row>\n                        );\n                      }\n                    )}\n\n                    <NewCollectionTypeModal\n                      selectedCollection={selectedCollection}\n                      editSchema={editSchema}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </Content>\n          </Layout>\n        )}\n      </Layout>\n    </>\n  );\n}\n\nexport default CreateSchema;\n","import { ICollection } from \"../types/global\";\nimport { useState } from \"react\";\nimport { CaretRightOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nfunction SchemaView({ collection }: { collection: ICollection }) {\n  const dataSource = Object.keys(collection.schema).map((key, index) => ({\n    key: index,\n    field: key,\n    type: collection.schema[key].type,\n  }));\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <>\n      <h2\n        style={{\n          backgroundColor: \"#1890ff\",\n          textTransform: \"capitalize\",\n          padding: 10,\n          color: \"white\",\n          letterSpacing: 1.5,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: 0,\n        }}\n      >\n        {collection.name}\n        <span\n          style={{ cursor: collapsed ? \"zoom-out\" : \"zoom-in\" }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          {\" \"}\n          {!collapsed ? <CaretRightOutlined /> : <CaretDownOutlined />}{\" \"}\n        </span>\n      </h2>\n      {collapsed && (\n        <table style={{ width: \"100%\", transition: \"5s\" }}>\n          {dataSource.map((data) => (\n            <tr key={data.key}>\n              <td\n                style={{\n                  paddingLeft: 8,\n                  textAlign: \"left\",\n                  fontSize: 16,\n                  letterSpacing: 1.2,\n                }}\n              >\n                {data.field}\n              </td>\n              <td\n                style={{\n                  paddingRight: 8,\n                  textAlign: \"right\",\n                  fontSize: 14,\n                  letterSpacing: 1.2,\n                  color: \"#8c8c8c\",\n                }}\n              >\n                {data.type}\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default SchemaView;\n","import { useEffect, useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\nimport { CollectionsState, ESchemaTypes, ICollection } from \"../types/global\";\nimport { upsertCollectionData } from \"../http\";\n\nimport SchemaView from \"../components/SchemaView\";\n\nconst SchemaFlowPage = () => {\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [collectionNodes, setCollectionNodes] = useState([]);\n  const [position, setPosition] = useState<[number, number]>([0, 0]);\n\n  const checkIfRefExists = (\n    schema: any,\n    collectionName: string,\n    id: string\n  ) => {\n    let elementsNodes: any = [];\n    Object.keys(schema).forEach((key, index) => {\n      if (schema[key].type === ESchemaTypes.ref) {\n        elementsNodes.push({\n          id: `e1-${id}-${index}-${key}`,\n          source: collectionName,\n          target: schema[key].ref,\n          type: \"smoothstep\",\n          label: `${collectionName} ${schema[key].relationship} ${schema[key].ref}`,\n          animated: false,\n          labelStyle: {\n            textTransform: \"lowercase\",\n            fontSize: 20,\n            letterSpacing: 1.2,\n            backgroundColor: \"#ff9c6e\",\n          },\n          style: {\n            width: \"100%\",\n            padding: 20,\n            borderRadius: 5,\n          },\n        });\n      }\n    });\n\n    return elementsNodes;\n  };\n\n  const mapNodes = () => {\n    let nodes: any = [];\n\n    collections.forEach((collection: ICollection, index) => {\n      nodes.push({\n        id: collection.name,\n        data: {\n          label: (\n            <div>\n              <SchemaView collection={collection} />\n            </div>\n          ),\n        },\n        style: {\n          padding: 0,\n          width: \"300px\",\n          borderColor: \"#40a9ff\",\n          borderRadius: 0,\n        },\n        position: { x: collection.x, y: collection.y },\n      });\n      nodes.push(\n        ...checkIfRefExists(collection.schema, collection.name, collection.id)\n      );\n    });\n\n    setCollectionNodes(nodes);\n  };\n\n  useEffect(() => {\n    mapNodes();\n    if (collections.length) {\n      setPosition([\n        parseInt(collections[0].x.toString()),\n        parseInt(collections[0].y.toString()),\n      ]);\n      console.log(position);\n    }\n  }, [collections]);\n\n  const updateCollectionPosition = async (id: string, x: number, y: number) => {\n    let collection: ICollection | undefined = collections.find(\n      (collection) => collection.name === id\n    );\n    if (!collection) return;\n    try {\n      collection.x = x;\n      collection.y = y;\n      await upsertCollectionData(collection);\n      console.log(\"Node Position Updated\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"auto\",\n      }}\n    >\n      <ReactFlow\n        defaultPosition={position}\n        elements={collectionNodes}\n        minZoom={0.4}\n        defaultZoom={1}\n        snapToGrid={true}\n        snapGrid={[15, 15]}\n        onlyRenderVisibleElements={true}\n        onNodeDragStop={(event, node) => {\n          updateCollectionPosition(node.id, node.position.x, node.position.y);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SchemaFlowPage;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Form } from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\n\nconst { Option } = Select;\n\nfunction RefSelect({ schemaValue }: { schemaValue: any }) {\n  const [data, setData] = useState<Array<any>>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const [searchValues, setSearchValues] = useState<Array<string>>([]);\n  const [value, setValue] = useState<string>(\"\");\n\n  const makeSearch = async () => {\n    try {\n      const action: ICurdBody = {\n        model: schemaValue.ref,\n        operations: EOperations.ref,\n        data: {\n          query: {\n            search: search,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setData(data.list);\n      setSearchValues(data.searchValues);\n    } catch (error) {}\n  };\n\n  const options = data.map((d) => (\n    <Option value={d._id}>\n      {searchValues.map((value) => (d[value]?.length ? `${d[value]}` : d._id))}\n    </Option>\n  ));\n\n  useEffect(() => {\n    makeSearch();\n  }, [search]);\n\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n    >\n      <Select\n        showSearch\n        value={value}\n        placeholder={`Search anything in ${schemaValue.name}`}\n        defaultActiveFirstOption={true}\n        showArrow={false}\n        filterOption={false}\n        onSearch={(s) => setSearch(s)}\n        onChange={(v) => setValue(v)}\n        notFoundContent={null}\n        mode={schemaValue.relationship === \"hasmany\" ? \"multiple\" : undefined}\n      >\n        {options}\n      </Select>\n    </Form.Item>\n  );\n}\n\nexport default RefSelect;\n","import React from \"react\";\nimport {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport { ICollection, ICollectionSchema } from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction CreateCollectionAction({\n  selectedCollection,\n  action = \"create\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action?: \"create\" | \"update\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  const schema: ICollectionSchema = selectedCollection?.schema;\n\n  const onFinish = (values: any) => {\n    console.log(\"Success:\", values);\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations:\n          action === \"create\" ? EOperations.create : EOperations.update,\n        data: {\n          body: formData,\n          id: id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={action === \"create\" ? \"Create New\" : \"Edit\"}\n      />\n      <Card\n        style={{ marginLeft: 10, marginRight: 10 }}\n        title={\n          <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n            {selectedCollection?.name}\n          </span>\n        }\n      >\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          size=\"large\"\n        >\n          {schema &&\n            Object.keys(schema).map((key: any) => {\n              const schemaValue = getKeyValue<\n                keyof ICollectionSchema,\n                ICollectionSchema\n              >(key)(schema);\n\n              switch (schemaValue.type) {\n                case \"string\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                          enum: [\"male\", \"female\"],\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      {schemaValue.enum.length ? (\n                        <Select placeholder={`Select ${schemaValue.name}`}>\n                          <>\n                            {schemaValue.enum.map((e: any) => (\n                              <Option value={e}>{e}</Option>\n                            ))}\n                          </>\n                        </Select>\n                      ) : (\n                        <Input />\n                      )}\n                    </Form.Item>\n                  );\n\n                case \"number\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      <InputNumber style={{ width: 300 }} />\n                    </Form.Item>\n                  );\n                case \"date\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? moment(selectedRecord[schemaValue.name])\n                          : moment()\n                      }\n                    >\n                      <DatePicker />\n                    </Form.Item>\n                  );\n                case \"boolean\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]?.toString()\n                          : \"false\"\n                      }\n                    >\n                      <Select placeholder={`Select`}>\n                        <Option value={\"true\"}>True</Option>\n                        <Option value={\"false\"}>False</Option>\n                      </Select>\n                    </Form.Item>\n                  );\n                case \"ref\":\n                  return <RefSelect schemaValue={schemaValue} />;\n                default:\n                  return null;\n              }\n            })}\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {action === \"create\" ? \"Save\" : \"Update\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CreateCollectionAction;\n","import { Card, PageHeader, Space } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { ICollection } from \"../../types/global\";\n\nfunction ShowCollectionAction({\n  selectedCollection,\n  action = \"show\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action: \"show\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  return (\n    <>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={selectedCollection.name}\n        style={{ textTransform: \"capitalize\" }}\n        ghost={false}\n      />\n      <Card style={{ margin: 10 }}>\n        <div>\n          {Object.keys(selectedRecord).map((key: any) => {\n            return (\n              key !== \"key\" && (\n                <div>\n                  <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                    <Text\n                      style={{ textTransform: \"capitalize\" }}\n                      type=\"secondary\"\n                    >\n                      {key}\n                    </Text>\n\n                    <p>\n                      {Array.isArray(selectedRecord[key]) ? (\n                        selectedRecord[key].map((data: any) => (\n                          <DisplayData data={data} />\n                        ))\n                      ) : typeof selectedRecord[key] === \"object\" ? (\n                        <DisplayData data={selectedRecord[key]} />\n                      ) : (\n                        selectedRecord[key].toString()\n                      )}\n                    </p>\n                  </Space>\n                  <br />\n                </div>\n              )\n            );\n          })}\n        </div>\n      </Card>\n    </>\n  );\n}\n\nconst DisplayData = (data: any) => {\n  data = data[\"data\"];\n  return (\n    <div\n      style={{\n        borderLeft: \"6px solid #1890ff\",\n        border: \"1px dotted #1890ff\",\n        padding: 10,\n        margin: 2,\n        width: \"100%\",\n      }}\n    >\n      {Object.keys(data).map((key: any) => {\n        console.log(key);\n        return (\n          <>\n            <Space direction=\"vertical\">\n              <Text style={{ textTransform: \"capitalize\" }} type=\"secondary\">\n                {key}\n              </Text>\n              <p>\n                {typeof data[key] === \"object\" ? (\n                  <DisplayData data={data[key]} />\n                ) : (\n                  data[key]\n                )}\n              </p>\n            </Space>\n            <br />\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ShowCollectionAction;\n","import { Dispatch, useCallback, useEffect, useState } from \"react\";\nimport {\n  Table,\n  PageHeader,\n  Button,\n  Card,\n  Tag,\n  Space,\n  Modal,\n  message,\n  List,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../http\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport queryString from \"query-string\";\nimport { selectCollection } from \"../store/actionCreators\";\nimport CreateCollectionAction from \"../components/DataFlow/CreateCollectionAction\";\nimport ShowCollectionAction from \"../components/DataFlow/ShowCollectionAction\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n} from \"@ant-design/icons\";\n\nimport moment from \"moment\";\n\nconst { Column } = Table;\nconst { confirm } = Modal;\ninterface IParams {\n  action?: string;\n  id?: string;\n}\n\nfunction DataFlowPage() {\n  const { collection: collectionName }: any = useParams();\n  const history = useHistory();\n  const params: IParams = queryString.parse(window.location.href.split(\"?\")[1]);\n\n  const [list, setList] = useState<Array<{ name: string; type: string }>>([]);\n  const [create, setCreate] = useState({});\n  const [update, setUpdate] = useState({});\n  const [deleteC, setDeleteC] = useState({});\n  const [columns, setColumns] = useState([]);\n\n  const [selectedRecord, setSelectedRecord] = useState<any>({});\n\n  const [loading, setLoading] = useState(true);\n  const [rowSelection, setRowSelection] = useState<any>([]);\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const setSelectedCollection = useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n      setColumns(data.column);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteRecord = async (id: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.delete,\n        data: {\n          id: id,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Record Deleted\");\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: rowSelection,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setRowSelection([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (collectionName && Object.keys(params).length === 0) {\n      setColumns([]);\n      setList([]);\n      getCollectionList(collectionName, pagination);\n    }\n    if (!selectedCollection) {\n      history.push(\"/data\");\n    }\n  }, [collectionName, selectedCollection, window.location.href]);\n\n  const dataSource = list.map((l: any, index) => ({ key: index, ...l }));\n\n  const dataColumns: any = columns.map(\n    ({ name, type }: { name: string; type: string }) => ({\n      title: name.toString(),\n      dataIndex: name.toString(),\n      key: name.toString(),\n      type,\n    })\n  );\n\n  dataColumns.push({\n    title: \"Action\",\n    key: \"operation\",\n    fixed: \"right\",\n    width: 50,\n    type: \"operation\",\n  });\n\n  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    setPagination(pagination);\n    getCollectionList(collectionName, pagination);\n  };\n\n  if (!collectionName)\n    return (\n      <>\n        <PageHeader\n          title=\"Available Collections\"\n          subTitle=\"Select any collection to view data\"\n          ghost={false}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            padding: 20,\n            width: \"100%\",\n          }}\n        >\n          <List\n            dataSource={collections}\n            renderItem={(collection) => (\n              <Tag\n                style={{\n                  paddingTop: 15,\n                  paddingBottom: 15,\n                  textTransform: \"capitalize\",\n                  margin: 5,\n                  letterSpacing: 1.2,\n                  cursor: \"pointer\",\n                  alignContent: \"center\",\n                  paddingLeft: 30,\n                  paddingRight: 30,\n                  fontWeight: 600,\n                  fontSize: 20,\n                }}\n                onClick={() => {\n                  setSelectedCollection(collection);\n                  history.push(`/data/${collection.name}`);\n                }}\n              >\n                <span>{collection.name}</span>\n              </Tag>\n            )}\n          />\n        </div>\n      </>\n    );\n\n  if (params.action && params.action === \"create\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"create\"\n      />\n    );\n  if (params.action && params.action === \"update\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"update\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  if (params.action && params.action === \"show\" && selectedCollection)\n    return (\n      <ShowCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"show\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  return (\n    <>\n      <PageHeader\n        style={{ marginTop: 2 }}\n        ghost={false}\n        onBack={() => window.history.back()}\n        title={\n          <Space>\n            <span style={{ textTransform: \"capitalize\" }}>\n              {collectionName}{\" \"}\n            </span>\n            {pagination.total && (\n              <Tag color=\"blue\" style={{ borderRadius: \"50%\" }}>\n                {pagination.total}\n              </Tag>\n            )}\n          </Space>\n        }\n        extra={[\n          rowSelection.length ? (\n            <Button\n              onClick={() => {\n                return confirm({\n                  title: \"Sure you want to delete selected records?\",\n                  icon: <ExclamationCircleOutlined />,\n                  content: null,\n                  onOk() {\n                    deleteManyRecord();\n                  },\n                  onCancel() {\n                    console.log(\"Cancel\");\n                  },\n                });\n              }}\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          ) : null,\n          <Button key=\"2\">\n            <FilterOutlined />\n            Filter\n          </Button>,\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => {\n              history.push(`/data/${collectionName}?action=create`);\n            }}\n          >\n            <PlusOutlined />\n            Create\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Table\n        loading={loading}\n        style={{ padding: 10 }}\n        dataSource={dataSource}\n        size=\"middle\"\n        rowKey={(record) => record._id}\n        rowSelection={{\n          selectedRowKeys: rowSelection,\n          onChange: (selectedRows) => {\n            setRowSelection(selectedRows);\n          },\n        }}\n        pagination={pagination}\n        onChange={handleTableChange}\n      >\n        {dataColumns.map((column: any) => {\n          switch (column.type) {\n            case \"objectId\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={70}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n            case \"boolean\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text, record, index) => {\n                    if (text === undefined) return null;\n                    return (\n                      <>\n                        {text ? (\n                          <Tag\n                            color={\"green\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <Tag\n                            color={\"red\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n\n            case \"date\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: Date) => {\n                    return text ? (\n                      <span>{moment(text).format(\"MM/DD/YYYY hh:mm\")}</span>\n                    ) : null;\n                  }}\n                />\n              );\n            case \"operation\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={60}\n                  render={(text, record: any) => {\n                    return (\n                      <Space>\n                        <Button\n                          icon={<EyeOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=show&id=${record._id}`\n                            );\n                          }}\n                        ></Button>\n                        <Button\n                          type=\"text\"\n                          icon={<EditOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=update&id=${record._id}`\n                            );\n                          }}\n                        />\n                        <Button\n                          type=\"text\"\n                          icon={<DeleteOutlined />}\n                          onClick={() => {\n                            return confirm({\n                              title: \"Sure you want to delete this record?\",\n                              icon: <ExclamationCircleOutlined />,\n                              content: null,\n                              onOk() {\n                                deleteRecord(record._id);\n                              },\n                              onCancel() {\n                                console.log(\"Cancel\");\n                              },\n                            });\n                          }}\n                        />\n                      </Space>\n                    );\n                  }}\n                />\n              );\n            case \"hasone\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      text && (\n                        <Space direction=\"vertical\">\n                          {typeof text === \"string\" ? (\n                            <span>{text} </span>\n                          ) : (\n                            Object.values(text).map((value) => {\n                              if (!(typeof value === \"string\")) return null;\n                              return <span>{value} </span>;\n                            })\n                          )}\n                        </Space>\n                      )\n                    );\n                  }}\n                />\n              );\n            case \"hasmany\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      <span>\n                        {text?.length} {column.title}\n                      </span>\n                    );\n                  }}\n                ></Column>\n              );\n            default:\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n          }\n        })}\n      </Table>\n    </>\n  );\n}\n\nexport default DataFlowPage;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout } from \"antd\";\nimport { useEffect } from \"react\";\n\n// components\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport SchemaFlowPage from \"./pages/SchemaFlowPage\";\nimport { useDispatch } from \"react-redux\";\nimport { initData } from \"./store/actionCreators\";\nimport DataFlowPage from \"./pages/DataFlowPage\";\n\nconst { Content } = Layout;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, []);\n\n  return (\n    <Layout className=\"main\">\n      <Router>\n        <SideBar />\n        <Layout>\n          <Header />\n          <Content style={{ overflow: \"auto\" }}>\n            <Switch>\n              <Route path=\"/\" exact component={SchemaFlowPage} />\n              <Route path=\"/collections\" exact component={CollectionsPage} />\n              <Route path=\"/data\" exact component={DataFlowPage} />\n              <Route path=\"/data/:collection\" exact component={DataFlowPage} />\n            </Switch>\n          </Content>\n        </Layout>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  CollectionAction,\n} from \"../types/global\";\n\nconst initialState: CollectionsState = {\n  collections: [],\n  selectedCollection: undefined,\n};\n\nconst reducer = (\n  state: CollectionsState = initialState,\n  action: CollectionAction\n): CollectionsState => {\n  switch (action.type) {\n    case actionTypes.INIT_COLLECTION:\n      return {\n        ...state,\n        collections: action.collections || [],\n      };\n    case actionTypes.ADD_COLLECTION:\n      return {\n        ...state,\n        collections: state.collections\n          .concat(action.collection)\n          .sort((a, b) => a.name.localeCompare(b.name)),\n      };\n\n    case actionTypes.REMOVE_COLLECTION:\n      const updatedCollections: ICollection[] = state.collections\n        .filter((article) => article.id !== action.collection.id)\n        .sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...state,\n        collections: updatedCollections,\n        selectedCollection: undefined,\n      };\n\n    case actionTypes.SET_COLLECTION:\n      const selectedCollection: ICollection = action.collection;\n\n      return {\n        ...state,\n        selectedCollection,\n      };\n\n    case actionTypes.UPDATE_COLLECTION:\n      const updatedCollection: ICollection = action.collection;\n\n      state.collections = state.collections.map((collection) => {\n        if (collection.id === updatedCollection.id) {\n          return updatedCollection;\n        }\n        return collection;\n      });\n\n      state.selectedCollection = updatedCollection;\n\n      return { ...state };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// state\nimport reducer from \"./store/reducer\";\n\nimport {\n  CollectionsState,\n  CollectionAction,\n  DispatchType,\n} from \"./types/global\";\n\nconst store: Store<CollectionsState, CollectionAction> & {\n  dispatch: DispatchType;\n} = createStore(reducer, applyMiddleware(thunk));\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}