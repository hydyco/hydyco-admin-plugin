{"version":3,"sources":["http.tsx","store/actionTypes.ts","store/actionCreators.ts","components/Header.tsx","components/SideBar.tsx","types/global.ts","components/Badge.tsx","components/common/RequiredText.tsx","components/NewCollectionModal.tsx","components/DataTypes/Boolean.tsx","components/DataTypes/Number.tsx","components/DataTypes/Ref.tsx","components/DataTypes/String.tsx","components/DataTypes/Date.tsx","components/DataTypes/File.tsx","components/DataTypes/JSON.tsx","components/NewCollectionTypeModal.tsx","components/RemoveCollectionTypeModal.tsx","components/RemoveCollectionModal.tsx","pages/CollectionsPage.tsx","components/SchemaView.tsx","pages/SchemaFlowPage.tsx","components/DataFlow/RefSelect.tsx","components/File/FilesView.tsx","components/DataFlow/UploadFile.tsx","components/DataFlow/JSONEditor.tsx","components/DataFlow/CreateCollectionAction.tsx","components/DataFlow/ShowCollectionAction.tsx","pages/DataFlowPage.tsx","pages/FilePage.tsx","pages/AuthPage.tsx","pages/ApiDocsPage.tsx","pages/LoginPage.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["EOperations","INIT_COLLECTION","ADD_COLLECTION","REMOVE_COLLECTION","SET_COLLECTION","UPDATE_COLLECTION","upsertCollectionData","collection","axios","post","name","deleteCollection","delete","crudCollection","crudBody","selectCollection","disPatchAction","type","actionTypes","updateCollection","action","dispatch","a","key","message","loading","content","success","duration","interceptors","request","use","config","localStorage","getItem","headers","authorization","error","Promise","reject","AppHeader","location","useLocation","headerName","collections","data","pathname","split","subHeaderName","ghost","title","subTitle","Sider","Layout","SideBar","ESchemaTypes","ERelationShip","useState","collapsed","setCollapsed","selectedMenu","pages","to","icon","LineChartOutlined","AlignCenterOutlined","DatabaseOutlined","plugins","FileOutlined","UserSwitchOutlined","collapsible","collapsedWidth","theme","onCollapse","style","height","className","src","alt","marginTop","mode","defaultSelectedKeys","orientation","CodeSandboxCircleFilled","CodeSandboxOutlined","map","page","Item","ApiTwoTone","ApiOutlined","plugin","SlidersTwoTone","SlidersOutlined","display","flexDirection","alignItems","onClick","window","open","focus","clear","replace","PoweroffOutlined","Badge","toLowerCase","color","string","number","boolean","ref","date","file","json","getBadgeColor","fontWeight","getBadgeName","Text","Typography","RequiredText","fontSize","strong","NewCollectionModal","isModalVisible","setIsModalVisible","edit","selectedCollection","collectionName","setCollectionName","showData","setShowData","operations","list","create","read","update","deleteAll","crudOperation","setCrudOperation","nameInput","useRef","useDispatch","newCollection","React","useCallback","addCollection","setSelectedCollection","updateCollectionAction","handleOk","length","col","show","find","id","uuidv4","schema","fields","publicMethods","x","Math","floor","y","useEffect","current","PlusOutlined","visible","onOk","onCancel","direction","placeholder","value","onChange","target","test","onKeyDown","e","checked","Object","keys","Boolean","state","setState","updateState","updatedData","prev","width","defaultValue","checkedChildren","unCheckedChildren","defaultChecked","default","required","settings","index","trim","unique","uppercase","lowercase","Number","typeSettings","setTypeSettings","getStateSettings","filter","includes","obj","getKeyValue","min","max","Group","forEach","minLength","maxLength","Ref","useSelector","shallowEqual","overflow","relationship","Button","hasMany","hasOne","autopopulate","textTransform","TextArea","Input","String","enumText","setEnumText","enum","join","showCount","lg","disabled","Date","File","JSON","NewCollectionTypeModal","editSchema","saveCollection","footer","schemas","updatedCollection","confirm","Modal","RemoveCollectionModal","removeCollectionType","ExclamationCircleOutlined","deleteType","console","log","deleteCollectionAction","Content","CreateSchema","setEditSchema","openCollectionModal","setOpenCollectionModal","editCollectionModal","setEditCollectionModal","localCollections","setLocalCollections","setSelectCollection","removeCollection","backgroundColor","extra","padding","size","searchCollections","grid","gutter","xs","sm","md","xl","xxl","dataSource","renderItem","cursor","placeItems","letterSpacing","marginLeft","span","paddingLeft","operation","bordered","boxShadow","justifyContent","bodyStyle","borderBottom","align","EditOutlined","DeleteOutlined","RemoveCollectionTypeModal","SchemaView","field","margin","CaretDownOutlined","CaretRightOutlined","transition","textAlign","paddingRight","SchemaFlowPage","collectionNodes","setCollectionNodes","position","setPosition","mapNodes","nodes","push","label","borderColor","borderRadius","elementsNodes","source","animated","labelStyle","checkIfRefExists","parseInt","toString","updateCollectionPosition","defaultPosition","elements","minZoom","defaultZoom","snapToGrid","snapGrid","onlyRenderVisibleElements","onNodeDragStop","event","node","Option","Select","RefSelect","schemaValue","selectedRecord","setData","search","setSearch","searchValues","setSearchValues","setValue","makeSearch","model","query","options","d","_id","rules","initialValue","Array","isArray","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","s","v","notFoundContent","undefined","Dragger","Upload","FilesView","setCustomFiles","deleteButton","filterButton","setList","selectedFiles","setSelectedFiles","setLoading","uploadModal","setUploadModal","pageSize","pagination","setPagination","props","multiple","defaultFileList","info","status","fileList","onDrop","dataTransfer","files","getCollectionList","deleteManyRecord","active","total","FilterOutlined","l","border","zIndex","tempArray","fileId","preview","filename","fallback","originalname","prettySize","mimetype","float","packageJson","proxy","p","destroyOnClose","InboxOutlined","UploadFile","form","setFieldsValue","JSONEditor","jsonData","setJsonData","locale","jsObject","CreateCollectionAction","Form","useForm","createData","formData","body","history","back","response","onBack","marginRight","onFinish","values","onFinishFailed","errorInfo","layout","moment","htmlType","DisplayData","borderLeft","ShowCollectionAction","Column","Table","DataFlowPage","useParams","useHistory","params","queryString","parse","href","columns","setColumns","setSelectedRecord","rowSelection","setRowSelection","column","deleteRecord","dataColumns","dataIndex","fixed","rowKey","record","selectedRowKeys","selectedRows","filters","sorter","render","text","format","shape","EyeOutlined","flexWrap","paddingTop","paddingBottom","alignContent","FilePage","AuthPage","parseOptions","method","parseDefaults","checkedValues","allMethods","ApiDocsPage","CarryOutOutlined","children","showLine","showIcon","defaultExpandParent","onSelect","selectedKeys","treeData","LoginPage","email","setEmail","password","setPassword","Password","iconRender","EyeTwoTone","EyeInvisibleOutlined","loginData","then","setItem","token","setTimeout","reload","ErrorFallback","resetErrorBoundary","description","danger","AuthRoutes","get","initialState","Header","path","exact","component","CollectionsPage","App","isAuth","FallbackComponent","onReset","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","concat","sort","b","localeCompare","updatedCollections","article","store","createStore","applyMiddleware","thunk","process","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.20d3b0fe.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { ICollection } from \"./types/global\";\n\naxios.interceptors.request.use(\n  (config) => {\n    if (localStorage.getItem(\"token\"))\n      config.headers.authorization = localStorage.getItem(\"token\");\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport function getAllCollectionList(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/model/list\");\n}\n\nexport function upsertCollectionData(\n  collection: ICollection\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/create/\" + collection.name, collection);\n}\n\nexport function deleteCollection({\n  name,\n}: ICollection): Promise<AxiosResponse> {\n  return axios.delete(\"/admin/model/delete/\" + name);\n}\n\nexport function crudCollection(crudBody: ICurdBody): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/crud/\", crudBody);\n}\n\nexport enum EOperations {\n  list = \"list\",\n  create = \"create\",\n  update = \"update\",\n  delete = \"delete\",\n  deleteAll = \"deleteAll\",\n  ref = \"ref\",\n}\n\ninterface ICurdData {\n  id?: string | Array<string>;\n  query?: {\n    pagination?: {\n      current: number;\n      pageSize: number;\n    };\n    find?: {};\n    search?: string;\n  };\n  body?: {};\n}\n\nexport interface ICurdBody {\n  model: string;\n  operations: EOperations;\n  data: ICurdData;\n}\n\nexport function getSwaggerJson(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/api-docs/editor\");\n}\n\nexport function loginAdmin(loginData): Promise<AxiosResponse> {\n  return axios.post(\"/auth/login\", loginData).then((response: any) => {\n    const { data } = response;\n    if (data.status) {\n      localStorage.setItem(\"token\", data.token);\n      return response;\n    } else {\n    }\n    return response;\n  });\n}\n","export const INIT_COLLECTION = \"INIT_COLLECTION\";\nexport const ADD_COLLECTION = \"ADD_COLLECTION\";\nexport const REMOVE_COLLECTION = \"REMOVE_COLLECTION\";\nexport const SET_COLLECTION = \"SET_COLLECTION\";\nexport const UPDATE_COLLECTION = \"UPDATE_COLLECTION\";\n","import * as actionTypes from \"./actionTypes\";\nimport { message } from \"antd\";\n\nimport { ICollection, CollectionAction, DispatchType } from \"../types/global\";\nimport {\n  deleteCollection,\n  getAllCollectionList,\n  upsertCollectionData,\n} from \"../http\";\nimport { AxiosResponse } from \"axios\";\n\nexport function addCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.ADD_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function removeCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.REMOVE_COLLECTION,\n    collection,\n  };\n\n  return async (dispatch: DispatchType) => {\n    await deleteCollection(collection);\n    dispatch(action);\n  };\n}\n\nexport function selectCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.SET_COLLECTION,\n    collection,\n  };\n  return disPatchAction(action);\n}\n\nexport function updateCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.UPDATE_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    const key = \"updatable\";\n\n    message.loading({ content: \"Saving...\", key });\n    await upsertCollectionData(collection);\n    message.success({ content: \"Saved!\", key, duration: 2 });\n\n    dispatch(action);\n  };\n}\n\nexport function simulateHttpRequest(collection: CollectionAction) {\n  return (dispatch: DispatchType) => {\n    setTimeout(() => {\n      dispatch(collection);\n    }, 500);\n  };\n}\n\nconst disPatchAction = (collection: CollectionAction) => {\n  return (dispatch: DispatchType) => dispatch(collection);\n};\n\nexport const initData = () => async (dispatch: DispatchType) => {\n  let { data: initialState }: AxiosResponse = await getAllCollectionList();\n  const collection: CollectionAction = {\n    type: actionTypes.INIT_COLLECTION,\n    collections: initialState,\n    collection: initialState[0] || {},\n  };\n\n  dispatch(collection);\n};\n","import { useLocation } from \"react-router-dom\";\nimport { PageHeader } from \"antd\";\n\nfunction AppHeader() {\n  const location = useLocation();\n  const headerNames: any = {\n    \"\": \"Schema Flow\",\n    collections: \"Schema\",\n    data: \"Data Flow\",\n  };\n  const subHeaderNames: any = {\n    \"\": \"Visualize you database\",\n    collections: \"Manage your mongoose schema\",\n    data: \"Manage your data\",\n  };\n\n  const headerName = headerNames[location.pathname.split(\"/\")[1]];\n\n  const subHeaderName = subHeaderNames[location.pathname.split(\"/\")[1]];\n\n  if (headerName === \"Data Flow\") return null;\n  return (\n    <>\n      {headerName && <PageHeader ghost={false} title={headerName} subTitle={subHeaderName} />}\n    </>\n  );\n}\n\nexport default AppHeader;\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Divider, Button, Space } from \"antd\";\nimport {\n  AlignCenterOutlined,\n  LineChartOutlined,\n  DatabaseOutlined,\n  FileOutlined,\n  ApiTwoTone,\n  ApiOutlined,\n  UserSwitchOutlined,\n  SlidersTwoTone,\n  SlidersOutlined,\n  CodeSandboxOutlined,\n  CodeSandboxCircleFilled,\n  PoweroffOutlined,\n} from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nfunction SideBar() {\n  const location = useLocation();\n\n  const [collapsed, setCollapsed] = useState(false);\n\n  const selectedMenu = location.pathname.split(\"/\")[1];\n\n  const pages = [\n    {\n      key: \"\",\n      to: \"/\",\n      name: \"Schema Flow\",\n      icon: <LineChartOutlined />,\n    },\n    {\n      key: \"collections\",\n      to: \"/collections\",\n      name: \"Collections\",\n      icon: <AlignCenterOutlined />,\n    },\n    {\n      key: \"data\",\n      to: \"/data\",\n      name: \"Data Flow\",\n      icon: <DatabaseOutlined />,\n    },\n  ];\n\n  const plugins = [\n    {\n      key: \"files\",\n      to: \"/files\",\n      name: \"Files\",\n      icon: <FileOutlined />,\n    },\n    {\n      key: \"auth\",\n      to: \"/auth\",\n      name: \"Auth\",\n      icon: <UserSwitchOutlined />,\n    },\n  ];\n\n  return (\n    <Sider\n      collapsible={true}\n      collapsedWidth=\"50\"\n      theme=\"light\"\n      collapsed={collapsed}\n      onCollapse={(collapsed, type) => {\n        setCollapsed(collapsed);\n      }}\n      style={{ height: \"100vh\" }}\n    >\n      <div className=\"logo-container\">\n        <img\n          className={collapsed ? \"logo-small\" : \"logo-large\"}\n          src={collapsed ? \"/img/o-logo.png\" : \"/img/black-logo.png\"}\n          alt=\"\"\n        ></img>\n      </div>\n      <Menu\n        style={{ marginTop: 10 }}\n        mode=\"inline\"\n        defaultSelectedKeys={[selectedMenu]}\n      >\n        <Divider orientation=\"left\">\n          {collapsed ? (\n            <CodeSandboxCircleFilled />\n          ) : (\n            <Space>\n              <CodeSandboxOutlined /> Core\n            </Space>\n          )}\n        </Divider>\n        {pages.map((page) => (\n          <Menu.Item key={page.key} icon={page.icon}>\n            <Link to={page.to}>{page.name}</Link>\n          </Menu.Item>\n        ))}\n\n        <Divider orientation=\"left\">\n          {collapsed ? (\n            <ApiTwoTone />\n          ) : (\n            <Space>\n              {\" \"}\n              <ApiOutlined /> Plugins{\" \"}\n            </Space>\n          )}\n        </Divider>\n        {plugins.map((plugin) => (\n          <Menu.Item key={plugin.key} icon={plugin.icon}>\n            <Link to={plugin.to}>{plugin.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu>\n\n      <Divider orientation=\"left\">\n        {collapsed ? (\n          <SlidersTwoTone />\n        ) : (\n          <Space>\n            <SlidersOutlined /> General\n          </Space>\n        )}\n      </Divider>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"start\",\n        }}\n      >\n        <Button\n          type=\"link\"\n          onClick={() => {\n            window\n              .open(\"http://localhost:3002/admin/api-docs/\", \"_blank\")\n              .focus();\n          }}\n        >\n          {collapsed ? <b>API</b> : \"Api Documentation\"}\n        </Button>\n\n        <Button\n          type=\"link\"\n          onClick={() => {\n            localStorage.clear();\n            window.location.replace(\"/admin-ui\");\n          }}\n        >\n          {collapsed ? <PoweroffOutlined /> : \"Logout\"}\n        </Button>\n      </div>\n    </Sider>\n  );\n}\n\nexport default SideBar;\n","export enum ESchemaTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  ref = \"ref\",\n  date = \"date\",\n  array = \"array\",\n  object = \"object\",\n  enums = \"enums\",\n  file = \"file\",\n  json = \"json\",\n}\n\nexport enum ERelationShip {\n  hasOne = \"hasone\",\n  hasMany = \"hasmany\",\n  none = \"none\",\n}\n\nexport interface ICollectionSchema {\n  name: string;\n  type: ESchemaTypes;\n  default?: any;\n  required?: boolean;\n  index?: boolean;\n  unique?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  trim?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  ref?: string;\n  relationship?: ERelationShip;\n  enum: Array<string>;\n  autopopulate: boolean;\n}\n\nexport interface ICrudOperations {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\nexport interface IPublicMethods {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\n\nexport interface ICollection {\n  id: string;\n  name: string;\n  schema: any;\n  fields: number;\n  show: boolean;\n  operations: ICrudOperations;\n  publicMethods?: IPublicMethods;\n  x: Number;\n  y: Number;\n}\n\nexport type CollectionsState = {\n  collections: ICollection[];\n  selectedCollection: ICollection | undefined;\n  newCollection?: ICollection;\n};\n\nexport type CollectionAction = {\n  type: string;\n  collection: ICollection;\n  collections?: Array<ICollection>;\n};\n\nexport type DispatchType = (args: CollectionAction) => CollectionAction;\n","import { Tag } from \"antd\";\n\nimport { ESchemaTypes } from \"../types/global\";\n\nfunction Badge({ type }: { type: any }) {\n  type = type.toLowerCase();\n  const getBadgeColor = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"#f50\";\n      case ESchemaTypes.number:\n        return \"#d4b106\";\n      case ESchemaTypes.boolean:\n        return \"#52c41a\";\n      case ESchemaTypes.ref:\n        return \"#13c2c2\";\n      case ESchemaTypes.date:\n        return \"#1890ff\";\n      case ESchemaTypes.file:\n        return \"#2f54eb\";\n      case ESchemaTypes.json:\n        return \"#531dab\";\n      default:\n        return \"#8c8c8c\";\n    }\n  };\n\n  const getBadgeName = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"Abc\";\n      case ESchemaTypes.number:\n        return \"123\";\n      case ESchemaTypes.boolean:\n        return \"true\";\n      case ESchemaTypes.ref:\n        return \"Relation\";\n      case ESchemaTypes.date:\n        return \"17 Aug\";\n      case ESchemaTypes.file:\n        return \"File\";\n      case ESchemaTypes.json:\n        return \"JSON\";\n      default:\n        return \"NA\";\n    }\n  };\n\n  return (\n    <div>\n      <Tag color={getBadgeColor()} style={{ fontWeight: \"bold\" }}>\n        {getBadgeName()}\n      </Tag>\n    </div>\n  );\n}\n\nexport default Badge;\n","import { Typography } from 'antd'\n\nconst { Text } = Typography;\n\nexport default function RequiredText({ message = \"This field is required\" }: { message?: string }) {\n    return (\n        <Text type=\"danger\" style={{ fontSize: 12 }} strong >{message}</Text>\n    )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Input, message, Checkbox, Tag, Space } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n  addCollection,\n  removeCollection,\n  selectCollection,\n  updateCollection,\n} from \"../store/actionCreators\";\n\nimport { ICollection, ICrudOperations } from \"../types/global\";\n\nimport RequiredText from \"./common/RequiredText\";\n\nfunction NewCollectionModal({\n  collections,\n  isModalVisible,\n  setIsModalVisible,\n  edit,\n  selectedCollection,\n}: {\n  collections: Array<ICollection>;\n  isModalVisible: boolean;\n  setIsModalVisible: Function;\n  edit?: boolean;\n  selectedCollection?: ICollection;\n}) {\n  const [collectionName, setCollectionName] = useState(\n    selectedCollection ? selectedCollection.name : \"\"\n  );\n  const [showData, setShowData] = useState(true);\n  const [crudOperation, setCrudOperation] = useState<ICrudOperations>(\n    selectedCollection\n      ? selectedCollection.operations\n      : {\n          list: true,\n          create: true,\n          read: true,\n          update: true,\n          delete: true,\n          deleteAll: true,\n        }\n  );\n  const nameInput = useRef<any>();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const newCollection = React.useCallback(\n    (collection: ICollection) => dispatch(addCollection(collection)),\n    [dispatch]\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const error = () => {\n    message.error(\"Collection already exists\");\n  };\n\n  const handleOk = () => {\n    if (collectionName.length === 0) return;\n    if (!edit) {\n      if (\n        collections.find((collection) => collection.name === collectionName)\n      ) {\n        error();\n        return;\n      }\n      const col: ICollection = {\n        id: uuidv4(),\n        name: collectionName,\n        schema: {},\n        fields: 0,\n        show: showData,\n        operations: crudOperation,\n        publicMethods: {\n          list: false,\n          create: false,\n          read: false,\n          update: false,\n          delete: false,\n          deleteAll: false,\n        },\n        x: Math.floor(collections.length % 4) * 300 + 20,\n        y: (Math.floor(collections.length / 4) + 1) * 60,\n      };\n      newCollection(col);\n      setSelectedCollection(col);\n      setCollectionName(\"\");\n    } else {\n      const col = {\n        ...selectedCollection,\n        name: collectionName,\n        show: showData,\n        operations: crudOperation,\n      };\n\n      updateCollectionAction(col);\n      setSelectedCollection(col);\n    }\n\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (nameInput.current) {\n      nameInput.current.focus();\n    }\n  }, []);\n  return (\n    <>\n      <Button className=\"button-blue\" onClick={showModal}>\n        {edit ? \"Edit\" : \"Create New\"}\n      </Button>\n      <Modal\n        title={\n          <span>\n            {\" \"}\n            <PlusOutlined /> Create new collection\n          </span>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            ref={nameInput}\n            placeholder=\"Collection Name\"\n            value={collectionName}\n            onChange={({ target: { value } }) => {\n              if (/[^a-zA-Z]/.test(value)) return;\n              setCollectionName(value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleOk();\n              }\n            }}\n          />\n          {collectionName.length === 0 && <RequiredText />}\n\n          <Checkbox\n            onChange={() => setShowData(!showData)}\n            value={showData}\n            checked={showData}\n          >\n            {\" \"}\n            <b>Show on data flow ?</b>\n          </Checkbox>\n\n          <Tag color=\"geekblue\">Allowed Operations</Tag>\n          <div>\n            {Object.keys(crudOperation).map((key) => (\n              <Checkbox\n                onChange={() =>\n                  setCrudOperation({\n                    ...crudOperation,\n                    [key]: !crudOperation[key],\n                  })\n                }\n                checked={crudOperation[key]}\n                value={crudOperation[key]}\n              >\n                {\" \"}\n                <b>{key}</b>\n              </Checkbox>\n            ))}\n          </div>\n        </Space>\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionModal;\n","import { Space, Switch, Input } from \"antd\";\nimport React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Boolean({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"boolean\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            defaultValue={state.name}\n          />\n          <span>Default value</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.default}\n            onChange={(e) => updateState(\"default\", e)}\n          />\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Boolean;\n","import { Space, InputNumber, Input, Checkbox } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { useState, useEffect } from \"react\";\n\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction Number({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n  }, [state]);\n\n\n  return (\n    <>\n      {state.type === \"number\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <InputNumber\n            min={1}\n            max={10}\n            onChange={(e) => updateState(\"default\", e)}\n            placeholder={\"10\"}\n            style={{ width: \"100%\" }}\n          />\n\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{ width: \"100%\" }}\n            onChange={(e) => {\n              const settings: any = {\n                index: false,\n                required: false,\n                unique: false,\n              };\n\n              setState((prev: ICollectionSchema) => {\n                Object.keys(settings).forEach((key) => {\n                  if (e.includes(key)) {\n                    settings[key] = true;\n                  }\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Space direction=\"vertical\">\n              <Checkbox value=\"required\">Required</Checkbox>\n              <Checkbox value=\"index\">Index</Checkbox>\n              <Checkbox value=\"unique\">Unique</Checkbox>\n              <h4>Minimum Length</h4>\n              <InputNumber\n                min={0}\n                value={state.minLength || 0}\n                onChange={(number) => updateState(\"minLength\", number)}\n              />\n              <h4>Maximum Length</h4>\n\n              <InputNumber\n                min={0}\n                value={state.maxLength || 0}\n                onChange={(number) => updateState(\"maxLength\", number)}\n              />\n            </Space>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Number;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction Ref({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"ref\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            {collections.map(({ name }, index) => (\n              <Radio.Button\n                value={name}\n                style={{ textTransform: \"capitalize\" }}\n                key={index}\n              >\n                {name}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Ref;\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Input, Checkbox, InputNumber, Row, Col } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nconst { TextArea } = Input;\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction String({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const [enumText, setEnumText] = useState(\"\");\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n    if (state.enum.length) {\n      setEnumText(state.enum.join(\"\\n\"));\n    }\n  }, [state]);\n\n  return (\n    <>\n      {state.type === \"string\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            value={state.name}\n          />\n          <RequiredText />\n          <span>Default value</span>\n          <Input\n            onChange={(e) => updateState(\"default\", e.target.value)}\n            value={state.default}\n            placeholder=\"Keep empty for not setting the value\"\n          />\n          <span>Enums</span>\n\n          <TextArea\n            showCount\n            maxLength={100}\n            style={{ width: \"100%\" }}\n            value={enumText}\n            placeholder=\"Keep empty for not setting the value\"\n            onChange={(e) => {\n              setEnumText(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                updateState(\"enum\", enumText.trim().split(\"\\n\"));\n              }\n            }}\n          />\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            onChange={(e) => {\n              setState((prev: ICollectionSchema) => {\n                if (!e.includes(\"maxLength\")) {\n                  prev[\"maxLength\"] = 0;\n                }\n                if (!e.includes(\"minLength\")) {\n                  prev[\"minLength\"] = 0;\n                }\n                Object.keys(settings).forEach((key: any) => {\n                  if (![\"maxLength\", \"minLength\"].includes(key))\n                    settings[key] = e.includes(key);\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Row>\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"required\">Required</Checkbox>\n                <Checkbox value=\"index\">Index</Checkbox>\n                <Checkbox value=\"unique\">Unique</Checkbox>\n                <Checkbox\n                  value=\"lowercase\"\n                  disabled={typeSettings.includes(\"uppercase\")}\n                >\n                  Lowercase\n                </Checkbox>\n                <Checkbox\n                  value=\"uppercase\"\n                  disabled={typeSettings.includes(\"lowercase\")}\n                >\n                  Uppercase\n                </Checkbox>\n              </Col>\n\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"trim\">Trim</Checkbox>\n\n                <h4>Minimum Length</h4>\n                <InputNumber\n                  min={0}\n                  value={state.minLength || 0}\n                  onChange={(number) => updateState(\"minLength\", number)}\n                />\n                <h4>Maximum Length</h4>\n\n                <InputNumber\n                  min={0}\n                  value={state.maxLength || 0}\n                  onChange={(number) => updateState(\"maxLength\", number)}\n                />\n              </Col>\n\n\n            </Row>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default String;\n","import { Space, Input, DatePicker } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Date({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"date\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <DatePicker onChange={(e) => updateState(\"default\", e)} />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Date;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n\n} from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction File({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n\n  return (\n    <>\n      {state.type === \"file\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            <Radio.Button\n              value={\"file\"}\n              style={{ textTransform: \"capitalize\" }}\n            >\n              File\n            </Radio.Button>\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default File;\n","import React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport { Input, Space } from \"antd\";\nimport RequiredText from \"../common/RequiredText\";\n\nfunction JSON({\n    state,\n    setState,\n}: {\n    state: ICollectionSchema;\n    setState: Function;\n}) {\n    const updateState = (key: string, value: any) => {\n        const updatedData: any = {};\n        updatedData[key] = value;\n        setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n    };\n    return (\n        <div>\n            {state.type === \"json\" && (\n\n                <Space direction=\"vertical\">\n                    <span>Name for the type</span>\n                    <Input\n                        placeholder=\"Type Name\"\n                        onChange={(e) => updateState(\"name\", e.target.value)}\n                    />\n                    <RequiredText />\n                </Space>\n            )}\n        </div>\n    );\n}\n\nexport default JSON;\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Dispatch } from \"redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Space, Button, Radio, Modal, message } from \"antd\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Boolean from \"./DataTypes/Boolean\";\nimport Number from \"./DataTypes/Number\";\nimport Ref from \"./DataTypes/Ref\";\nimport String from \"./DataTypes/String\";\nimport Date from \"./DataTypes/Date\";\nimport File from \"./DataTypes/File\";\n\nimport {\n  ICollection,\n  ESchemaTypes,\n  ICollectionSchema,\n  ERelationShip,\n} from \"../types/global\";\nimport { updateCollection } from \"../store/actionCreators\";\nimport JSON from \"./DataTypes/JSON\";\n\nfunction NewCollectionTypeModal({\n  selectedCollection,\n  editSchema,\n}: {\n  selectedCollection: ICollection;\n  editSchema?: ICollectionSchema;\n}) {\n  // variables\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const error = () => {\n    message.error(\"Type already exist\");\n  };\n\n\n  // local state\n  const [state, setState] = useState<ICollectionSchema>({\n    name: \"\",\n    type: ESchemaTypes.string,\n    default: \"\",\n    index: false,\n    maxLength: 0,\n    minLength: 0,\n    required: false,\n    trim: false,\n    unique: false,\n    uppercase: false,\n    lowercase: false,\n    enum: [],\n    ref: \"none\",\n    relationship: ERelationShip.hasMany,\n    autopopulate: true,\n  });\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const resetState = () => {\n    setState({\n      name: \"\",\n      type: ESchemaTypes.string,\n      default: \"\",\n      index: false,\n      maxLength: 0,\n      minLength: 0,\n      required: false,\n      trim: false,\n      unique: false,\n      uppercase: false,\n      lowercase: false,\n      ref: \"none\",\n      relationship: ERelationShip.hasMany,\n      enum: [],\n      autopopulate: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      resetState();\n    }\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    if (editSchema) {\n      setState(editSchema)\n      setIsModalVisible(true);\n    }\n  }, [editSchema]);\n\n  const footer = (\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        const schemas: any = {\n          ...selectedCollection.schema,\n        };\n        if (!editSchema && schemas[state.name]) {\n          error();\n          return;\n        }\n\n        schemas[state.name] = state;\n\n        const updatedCollection: ICollection = {\n          ...selectedCollection,\n          schema: schemas,\n          fields: Object.keys(schemas).length,\n        };\n        saveCollection(updatedCollection);\n        handleOk();\n      }}\n      disabled={state.name.length === 0}\n    >\n      {\"Save\"}\n    </Button>\n  );\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={showModal}\n        style={{\n          width: \"100%\",\n          height: 50,\n          textTransform: \"uppercase\",\n          fontWeight: \"bold\",\n        }}\n      >\n        Add New Field\n      </Button>\n      <Modal\n        title={\n          <Space>\n            {\" \"}\n            <PlusOutlined />\n            <Radio.Group\n              onChange={(e) => {\n                setState((prev: any) => ({ ...prev, type: e.target.value }));\n              }}\n              value={state.type}\n            >\n              <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n              <Radio.Button value={ESchemaTypes.boolean}>Boolean</Radio.Button>\n              <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n              <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n              <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n              <Radio.Button value={ESchemaTypes.file}>File</Radio.Button>\n              <Radio.Button value={ESchemaTypes.json}>JSON</Radio.Button>\n            </Radio.Group>\n          </Space>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={footer}\n        width={800}\n      >\n        <String state={state} setState={setState} />\n        <Boolean state={state} setState={setState} />\n\n        <Number state={state} setState={setState} />\n\n        <Ref state={state} setState={setState} />\n        <Date state={state} setState={setState} />\n\n        <File state={state} setState={setState} />\n        <JSON state={state} setState={setState} />\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionTypeModal;\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  removeCollectionType,\n  collection,\n  key,\n}: {\n  removeCollectionType: Function;\n  collection: ICollection;\n  key: any;\n}) {\n  const deleteType = () => {\n    const { schema } = collection;\n    delete schema[key];\n    collection.schema = schema;\n    collection.fields = collection.fields - 1;\n    removeCollectionType(collection);\n  };\n\n  return confirm({\n    title: \"Sure you want to delete type?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteType();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import { Modal, message } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  collection,\n  deleteCollectionAction,\n}: {\n  collection: ICollection;\n  deleteCollectionAction: Function;\n}) {\n  const deleteCollection = () => {\n    deleteCollectionAction(collection);\n    message.success(\"Collection removed\");\n  };\n\n  return confirm({\n    title: \"Sure you want to delete this collection?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteCollection();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  List,\n  Button,\n  Space,\n  Card,\n  Tag,\n  Layout,\n  Input,\n  PageHeader,\n  message,\n} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nimport Badge from \"../components/Badge\";\n\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  selectCollection,\n  updateCollection,\n  removeCollection,\n} from \"../store/actionCreators\";\n\nimport NewCollectionModal from \"../components/NewCollectionModal\";\nimport EditCollectionModal from \"../components/NewCollectionModal\";\nimport NewCollectionTypeModal from \"../components/NewCollectionTypeModal\";\nimport RemoveCollectionTypeModal from \"../components/RemoveCollectionTypeModal\";\nimport RemoveCollectionModal from \"../components/RemoveCollectionModal\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  ICollectionSchema,\n} from \"../types/global\";\n\n// define vars\nconst { Sider, Content } = Layout;\n\nfunction CreateSchema() {\n  const [editSchema, setEditSchema] = useState<ICollectionSchema>();\n  const [openCollectionModal, setOpenCollectionModal] = useState(false);\n  const [editCollectionModal, setEditCollectionModal] = useState(false);\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [localCollections, setLocalCollections] = useState<Array<ICollection>>(\n    []\n  );\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const setSelectCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const removeCollectionType = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const deleteCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(removeCollection(collection)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (!selectedCollection && collections.length) {\n      setSelectCollection(collections[0]);\n    }\n    setLocalCollections(collections);\n  }, [collections]);\n\n  return (\n    <>\n      <Layout style={{ height: \"100%\" }}>\n        <Sider\n          width=\"400\"\n          theme=\"light\"\n          style={{\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <PageHeader\n            title=\"Collection List\"\n            extra={[\n              <Tag color=\"green\">\n                Total {collections.length}\n              </Tag>,\n              <NewCollectionModal\n                collections={collections}\n                isModalVisible={openCollectionModal}\n                setIsModalVisible={setOpenCollectionModal}\n              />,\n            ]}\n          />\n\n          <div style={{ padding: 10 }}>\n            <Input\n              size=\"large\"\n              placeholder=\"Search Collection\"\n              onChange={(e) => {\n                let searchCollections: Array<ICollection> = [];\n\n                if (e.target.value.length) {\n                  searchCollections = collections.filter(\n                    (collection: ICollection) =>\n                      collection.name\n                        .trim()\n                        .toLowerCase()\n                        .includes(e.target.value.toLowerCase())\n                  );\n                  setLocalCollections(searchCollections);\n                } else {\n                  setLocalCollections(collections);\n                }\n              }}\n            />\n          </div>\n\n          <List\n            grid={{\n              gutter: 10,\n              xs: 1,\n              sm: 1,\n              md: 1,\n              lg: 1,\n              xl: 1,\n              xxl: 1,\n            }}\n            dataSource={localCollections}\n            style={{ padding: 10, height: \"80vh\", overflow: \"auto\" }}\n            renderItem={(collection, index) => (\n              <List.Item key={index}>\n                <Tag\n                  key={index}\n                  style={{\n                    textTransform: \"capitalize\",\n                    cursor: \"pointer\",\n                    height: 55,\n                    width: \"100%\",\n                    display: \"grid\",\n                    placeItems: \"left\",\n                    fontSize: \"20px\",\n                    letterSpacing: 1.3,\n                    padding: 10\n                  }}\n                  color={\n                    collection.name === selectedCollection?.name\n                      ? \"orange\"\n                      : collection.show ? \"default\" : \"error\"\n                  }\n                  onClick={() => {\n                    setSelectCollection(collection);\n                  }}\n                >\n                  {collection.name}\n\n                  <span style={{ fontSize: 12 }}>\n                    {collection.fields} fields\n                    <span style={{ fontSize: 12, marginLeft: 10 }}>\n                      {collection.show ? null : \"Hidden\"}\n                    </span>\n                  </span>\n                </Tag>\n              </List.Item>\n            )}\n          />\n        </Sider>\n\n        {selectedCollection && (\n          <Layout style={{ backgroundColor: \"#fafafb\", height: \"100%\" }}>\n            <Content>\n              <PageHeader\n                title={\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {selectedCollection.name}\n                  </span>\n                }\n                extra={selectedCollection.show ? [\n                  <Space>\n                    < EditCollectionModal collections={collections}\n\n                      isModalVisible={editCollectionModal}\n                      setIsModalVisible={setEditCollectionModal}\n                      edit={true}\n                      selectedCollection={selectedCollection}\n\n                    />\n                    <Button\n                      className=\"button-green\"\n\n                      onClick={() => {\n                        saveCollection(selectedCollection);\n                        message.success(\"Collection Saved\");\n                      }}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      className=\"button-red\"\n                      onClick={() => {\n                        RemoveCollectionModal({\n                          deleteCollectionAction: deleteCollectionAction,\n                          collection: selectedCollection,\n                        });\n                      }}\n                    >\n                      Delete\n                    </Button>\n                  </Space>,\n                ] : [\n                  <Tag color=\"geekblue\" >Hidden</Tag>\n                ]}\n              />\n\n              <Row>\n                <Col span={24} style={{ paddingLeft: 20 }}>\n                  <h5>Allowed Operations</h5>\n                  {Object.keys(selectedCollection.operations).map(operation => <Tag color={selectedCollection.operations[operation] ? \"geekblue\" : \"volcano\"} >{operation}</Tag>)}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col span={24} style={{ padding: 20 }}>\n                  <Card\n                    bordered={false}\n                    style={{ boxShadow: \"rgb(227 233 243) 0px 2px 4px\" }}\n                    title={\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <h1>{`${selectedCollection.fields} fields`} </h1>\n                      </div>\n                    }\n                    bodyStyle={{ padding: 0 }}\n                  >\n                    {Object.keys(selectedCollection.schema).map(\n                      (key: any, index) => {\n                        const schema: ICollectionSchema =\n                          selectedCollection.schema[key];\n                        const { type } = schema;\n                        return (\n                          <Row\n                            gutter={0}\n                            style={{\n                              height: 60,\n                              padding: 15,\n                              borderBottom: \"1px solid #f0f0f0\",\n                            }}\n                            align=\"middle\"\n                            key={index}\n                          >\n                            <Col span={6}>\n                              <Badge type={type} />\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  fontWeight: 500,\n                                }}\n                              >\n                                {key}\n                              </span>{\" \"}\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  textTransform: \"capitalize\",\n                                }}\n                              >\n                                {type}\n                              </span>{\" \"}\n                            </Col>\n                            <Col\n                              span={6}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-end\",\n                              }}\n                            >\n                              {selectedCollection.show && <Space size={25}>\n                                <EditOutlined\n                                  style={{ color: \"#8c8c8c\", fontSize: 20 }}\n                                  onClick={() =>\n                                    setEditSchema({ ...schema, name: key })\n                                  }\n                                />\n\n                                <DeleteOutlined\n                                  style={{ color: \"#cf1322\", fontSize: 20 }}\n                                  className=\"pointer\"\n                                  onClick={() =>\n                                    RemoveCollectionTypeModal({\n                                      removeCollectionType,\n                                      collection: selectedCollection,\n                                      key,\n                                    })\n                                  }\n                                />\n                              </Space>}\n                            </Col>\n                          </Row>\n                        );\n                      }\n                    )}\n\n                    {selectedCollection.show && <NewCollectionTypeModal\n                      selectedCollection={selectedCollection}\n                      editSchema={editSchema}\n                    />}\n                  </Card>\n                </Col>\n              </Row>\n            </Content>\n          </Layout>\n        )}\n      </Layout>\n    </>\n  );\n}\n\nexport default CreateSchema;\n","import { ICollection } from \"../types/global\";\nimport { useState } from \"react\";\nimport { CaretRightOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nfunction SchemaView({ collection }: { collection: ICollection }) {\n  const dataSource = Object.keys(collection.schema).map((key, index) => ({\n    key: index,\n    field: key,\n    type: collection.schema[key].type,\n  }));\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <>\n      <h2\n        style={{\n          backgroundColor: \"#1890ff\",\n          textTransform: \"capitalize\",\n          padding: 10,\n          color: \"white\",\n          letterSpacing: 1.5,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: 0,\n        }}\n      >\n        {collection.name}\n        <span\n          style={{ cursor: collapsed ? \"zoom-out\" : \"zoom-in\" }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          {\" \"}\n          {!collapsed ? <CaretRightOutlined /> : <CaretDownOutlined />}{\" \"}\n        </span>\n      </h2>\n      {collapsed && (\n        <table style={{ width: \"100%\", transition: \"5s\" }}>\n          {dataSource.map((data) => (\n            <tr key={data.key}>\n              <td\n                style={{\n                  paddingLeft: 8,\n                  textAlign: \"left\",\n                  fontSize: 16,\n                  letterSpacing: 1.2,\n                }}\n              >\n                {data.field}\n              </td>\n              <td\n                style={{\n                  paddingRight: 8,\n                  textAlign: \"right\",\n                  fontSize: 14,\n                  letterSpacing: 1.2,\n                  color: \"#8c8c8c\",\n                }}\n              >\n                {data.type}\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default SchemaView;\n","import { useEffect, useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\nimport { CollectionsState, ESchemaTypes, ICollection } from \"../types/global\";\nimport { upsertCollectionData } from \"../http\";\n\nimport SchemaView from \"../components/SchemaView\";\n\nconst SchemaFlowPage = () => {\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [collectionNodes, setCollectionNodes] = useState([]);\n  const [position, setPosition] = useState<[number, number]>([0, 0]);\n\n  const checkIfRefExists = (\n    schema: any,\n    collectionName: string,\n    id: string\n  ) => {\n    let elementsNodes: any = [];\n    Object.keys(schema).forEach((key, index) => {\n      if (schema[key].type === ESchemaTypes.ref) {\n        elementsNodes.push({\n          id: `e1-${id}-${index}-${key}`,\n          source: collectionName,\n          target: schema[key].ref,\n          type: \"smoothstep\",\n          label: `${collectionName} ${schema[key].relationship} ${schema[key].ref}`,\n          animated: false,\n          labelStyle: {\n            textTransform: \"lowercase\",\n            fontSize: 20,\n            letterSpacing: 1.2,\n            backgroundColor: \"#ff9c6e\",\n          },\n          style: {\n            width: \"100%\",\n            padding: 20,\n            borderRadius: 5,\n          },\n        });\n      }\n    });\n\n    return elementsNodes;\n  };\n\n  const mapNodes = () => {\n    let nodes: any = [];\n\n    collections.forEach((collection: ICollection, index) => {\n      nodes.push({\n        id: collection.name,\n        data: {\n          label: (\n            <div>\n              <SchemaView collection={collection} />\n            </div>\n          ),\n        },\n        style: {\n          padding: 0,\n          width: \"300px\",\n          borderColor: \"#40a9ff\",\n          borderRadius: 0,\n        },\n        position: { x: collection.x, y: collection.y },\n      });\n      nodes.push(\n        ...checkIfRefExists(collection.schema, collection.name, collection.id)\n      );\n    });\n\n    setCollectionNodes(nodes);\n  };\n\n  useEffect(() => {\n    mapNodes();\n    if (collections.length) {\n      setPosition([\n        parseInt(collections[0].x.toString()),\n        parseInt(collections[0].y.toString()),\n      ]);\n      console.log(position);\n    }\n  }, [collections]);\n\n  const updateCollectionPosition = async (id: string, x: number, y: number) => {\n    let collection: ICollection | undefined = collections.find(\n      (collection) => collection.name === id\n    );\n    if (!collection) return;\n    try {\n      collection.x = x;\n      collection.y = y;\n      await upsertCollectionData(collection);\n      console.log(\"Node Position Updated\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"auto\",\n      }}\n    >\n      <ReactFlow\n        defaultPosition={position}\n        elements={collectionNodes}\n        minZoom={0.4}\n        defaultZoom={1}\n        snapToGrid={true}\n        snapGrid={[15, 15]}\n        onlyRenderVisibleElements={true}\n        onNodeDragStop={(event, node) => {\n          updateCollectionPosition(node.id, node.position.x, node.position.y);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SchemaFlowPage;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Form } from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\n\nconst { Option } = Select;\n\nfunction RefSelect({ schemaValue, action, selectedRecord }: { schemaValue: any, action: string, selectedRecord: any }) {\n  const [data, setData] = useState<Array<any>>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const [searchValues, setSearchValues] = useState<Array<string>>([]);\n  const [value, setValue] = useState<Array<string>>([]);\n\n\n  const makeSearch = async () => {\n    try {\n      const action: ICurdBody = {\n        model: schemaValue.ref,\n        operations: EOperations.ref,\n        data: {\n          query: {\n            search: search,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setData(data.list);\n      setSearchValues(data.searchValues);\n    } catch (error) { }\n  };\n\n  const options = data.map((d) => (\n    <Option value={d._id}>\n      {searchValues.map((value) => (d[value]?.length ? `${d[value]}` : d._id))}\n    </Option>\n  ));\n\n  useEffect(() => {\n    makeSearch();\n  }, [search]);\n\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n\n      initialValue={\n        action === \"update\" && selectedRecord[schemaValue.name]\n          ? !Array.isArray(selectedRecord[schemaValue.name]) ? [selectedRecord[schemaValue.name]._id] : selectedRecord[schemaValue.name].map(value => value._id || value)\n          : \"\"\n      }\n    >\n      <Select\n        showSearch\n        value={value}\n        placeholder={`Search anything in ${schemaValue.name}`}\n        defaultActiveFirstOption={true}\n        showArrow={false}\n        filterOption={false}\n        onSearch={(s) => setSearch(s)}\n        onChange={(v) => setValue(v)}\n        notFoundContent={null}\n        mode={schemaValue.relationship === \"hasmany\" ? \"multiple\" : undefined}\n      >\n        {options}\n      </Select>\n    </Form.Item>\n  );\n}\n\nexport default RefSelect;\n","import { useEffect, useState } from \"react\";\nimport {\n  PageHeader,\n  Button,\n  Tag,\n  Space,\n  Modal,\n  message,\n  Skeleton,\n  Image,\n  Pagination,\n  Upload,\n  Checkbox\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\n\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  InboxOutlined,\n} from \"@ant-design/icons\";\n\nimport prettySize from \"prettysize\";\n\nimport packageJson from '../../../package.json';\n\n\nconst { confirm } = Modal;\nconst { Dragger } = Upload;\n\nfunction FilesView({\n  setCustomFiles,\n  deleteButton,\n  filterButton,\n}: {\n  setCustomFiles?: Function;\n  deleteButton?: boolean;\n  filterButton?: boolean;\n}) {\n  const collectionName = \"file\";\n\n  const [list, setList] = useState<Array<any>>([]);\n\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [uploadModal, setUploadModal] = useState(false);\n\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  useEffect(() => {\n    if (typeof setCustomFiles === \"function\") {\n      setCustomFiles([...selectedFiles]);\n    }\n  }, [selectedFiles]);\n\n  const props = {\n    multiple: true,\n    name: \"manual\",\n    action: \"/admin/file/manual\",\n    defaultFileList: [],\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== \"uploading\") {\n      }\n      if (status === \"done\") {\n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n\n      info.fileList = [];\n    },\n    onDrop(e) {\n      console.log(\"Dropped files\", e.dataTransfer.files);\n    },\n  };\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: selectedFiles,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setSelectedFiles([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getCollectionList(collectionName, pagination);\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <div style={{ padding: 20 }}>\n          <Skeleton active={true} />\n        </div>\n      ) : (\n        <>\n          <PageHeader\n            style={{ marginTop: 2 }}\n            ghost={true}\n            title={\n              <Space>\n                {pagination?.total > 0 && (\n                  <Tag color=\"green\">Total {pagination.total}</Tag>\n                )}\n\n                <Tag color=\"blue\">Selected {selectedFiles.length}</Tag>\n              </Space>\n            }\n            extra={[\n              selectedFiles.length && deleteButton ? (\n                <Button\n                  onClick={() => {\n                    return confirm({\n                      title: \"Sure you want to delete selected records?\",\n                      icon: <ExclamationCircleOutlined />,\n                      content: null,\n                      onOk() {\n                        deleteManyRecord();\n                      },\n                      onCancel() {\n                        console.log(\"Cancel\");\n                      },\n                    });\n                  }}\n                >\n                  <DeleteOutlined />\n                  Delete\n                </Button>\n              ) : null,\n              filterButton && (\n                <Button key=\"2\">\n                  <FilterOutlined />\n                  Filter\n                </Button>\n              ),\n              <Button\n                key=\"1\"\n                type=\"primary\"\n                onClick={() => {\n                  setUploadModal(true);\n                }}\n              >\n                <PlusOutlined />\n                Upload\n              </Button>,\n            ]}\n          />\n\n          <div className=\"grid-responsive\">\n            {list.map((l) => (\n              <div\n                key={l._id}\n                className=\"on-hover\"\n                style={{\n                  border: selectedFiles.includes(l._id)\n                    ? \"1px solid #40a9ff\"\n                    : \"none\",\n                  backgroundColor: \"white\",\n                }}\n\n              >\n                <Checkbox\n                  style={{ padding: 10, position: \"absolute\", zIndex: 99 }}\n                  onChange={() => {\n                    setSelectedFiles((prev: any) => {\n                      let tempArray = [...prev];\n                      if (tempArray.includes(l._id)) {\n                        tempArray = tempArray.filter(\n                          (fileId) => fileId !== l._id\n                        );\n                      } else {\n                        tempArray.push(l._id);\n                      }\n                      return tempArray;\n                    });\n                  }}></Checkbox>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <Image\n                    preview={false}\n                    width={200}\n                    height={200}\n                    src={\"/admin/file/get/\" + l.filename}\n                    fallback={\"/img/file.svg\"}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    padding: 10,\n                  }}\n                >\n                  <b>{l.originalname}</b>\n                  <span\n                    style={{\n                      color: \"GrayText\",\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                    }}\n                  >\n                    {prettySize(l.size)} {l.mimetype}\n                  </span>\n                </div>\n                <Button style={{ float: \"right\", margin: 5 }} onClick={() => {\n                  window.open(packageJson.proxy + \"/admin/file/get/\" + l.filename).focus()\n                }} >Open</Button>\n\n              </div>\n            ))}\n          </div>\n\n          <Pagination\n            style={{ textAlign: \"right\", margin: 10 }}\n            current={pagination.current}\n            pageSize={pagination.pageSize}\n            total={pagination.total}\n            onChange={(page, pageSize) => {\n              const p = {\n                current: page,\n                pageSize: pageSize,\n                total: pagination.total,\n              };\n              getCollectionList(collectionName, p);\n            }}\n          />\n          <Modal\n            title=\"Upload File\"\n            visible={uploadModal}\n            onOk={() => {\n              getCollectionList(collectionName, pagination);\n              setUploadModal(false);\n            }}\n            onCancel={() => setUploadModal(false)}\n            destroyOnClose={true}\n          >\n            <Dragger {...props} className=\"upload-list-inline\">\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                Click or drag file to this area to upload\n              </p>\n              <p className=\"ant-upload-hint\">\n                Support for a single or bulk upload. Strictly prohibit from\n                uploading company data or other band files\n              </p>\n            </Dragger>\n          </Modal>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default FilesView;\n","import { useEffect, useState } from \"react\"\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { Form } from \"antd\";\nimport FilesView from \"../../components/File/FilesView\";\n\n\n\nfunction UploadFile({ schemaValue, form }: { schemaValue: any, form: any }) {\n\n  const [selectedFiles, setSelectedFiles] = useState([])\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [schemaValue.name]: selectedFiles,\n    })\n  }, [selectedFiles])\n\n  return (\n    <>\n      <Form.Item\n        label={\n          <span\n            style={{\n              textTransform: \"capitalize\",\n              color: \"#434343\",\n            }}\n          >\n            {schemaValue.name}\n          </span>\n        }\n        name={schemaValue.name}\n        rules={[\n          {\n            required: schemaValue.required,\n          },\n        ]}\n      >\n\n        <div >\n\n          <FilesView setCustomFiles={setSelectedFiles} />\n        </div>\n\n\n      </Form.Item>\n    </>\n  );\n}\n\nexport default UploadFile;\n","import { Form } from \"antd\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport { useState } from \"react\";\n\n\nfunction JSONEditor({ schemaValue, form, action, selectedRecord }: { schemaValue: any; form: any, action: string, selectedRecord: any }) {\n    const [jsonData, setJsonData] = useState(\n        action === \"update\" && selectedRecord[schemaValue.name]\n            ? selectedRecord[schemaValue.name]\n            : null);\n\n    return (\n        <Form.Item\n            label={\n                <span\n                    style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                    }}\n                >\n                    {schemaValue.name}\n                </span>\n            }\n            name={schemaValue.name}\n            rules={[\n                {\n                    required: schemaValue.required,\n                },\n            ]}\n        >\n            <div style={{ border: \"1px solid #161f59\", borderRadius: 1 }}>\n\n                <JSONInput\n\n                    theme=\"dark_mitsuketa_tribute\"\n\n                    locale={locale}\n                    placeholder={jsonData}\n                    onChange={(e) => {\n                        form.setFieldsValue({\n                            [schemaValue.name]: { ...e.jsObject },\n                        })\n                        setJsonData(e.jsObject);\n                    }}\n                    height=\"550px\"\n                    width=\"100%\"\n                />\n            </div>\n        </Form.Item>\n    );\n}\n\nexport default JSONEditor;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport { ICollection, ICollectionSchema } from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\"\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction CreateCollectionAction({\n  selectedCollection,\n  action = \"create\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action?: \"create\" | \"update\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  const schema: ICollectionSchema = selectedCollection?.schema;\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    console.log(values);\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations:\n          action === \"create\" ? EOperations.create : EOperations.update,\n        data: {\n          body: formData,\n          id: id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={action === \"create\" ? \"Create New\" : \"Edit\"}\n      />\n      <Card\n        style={{ marginLeft: 10, marginRight: 10 }}\n        title={\n          <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n            {selectedCollection?.name}\n          </span>\n        }\n      >\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          size=\"large\"\n          form={form}\n        >\n          {schema &&\n            Object.keys(schema).map((key: any) => {\n              const schemaValue = getKeyValue<\n                keyof ICollectionSchema,\n                ICollectionSchema\n              >(key)(schema);\n\n              switch (schemaValue.type) {\n                case \"string\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                          enum: [\"male\", \"female\"],\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      {schemaValue.enum.length ? (\n                        <Select placeholder={`Select ${schemaValue.name}`}>\n                          <>\n                            {schemaValue.enum.map((e: any) => (\n                              <Option value={e}>{e}</Option>\n                            ))}\n                          </>\n                        </Select>\n                      ) : (\n                        <Input />\n                      )}\n                    </Form.Item>\n                  );\n\n                case \"number\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]\n                          : \"\"\n                      }\n                    >\n                      <InputNumber style={{ width: 300 }} />\n                    </Form.Item>\n                  );\n                case \"date\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? moment(selectedRecord[schemaValue.name])\n                          : moment()\n                      }\n                    >\n                      <DatePicker />\n                    </Form.Item>\n                  );\n                case \"boolean\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\n                        action === \"update\"\n                          ? selectedRecord[schemaValue.name]?.toString()\n                          : \"false\"\n                      }\n                    >\n                      <Select placeholder={`Select`}>\n                        <Option value={\"true\"}>True</Option>\n                        <Option value={\"false\"}>False</Option>\n                      </Select>\n                    </Form.Item>\n                  );\n                case \"ref\":\n                  return <RefSelect action={action} selectedRecord={selectedRecord} schemaValue={schemaValue} />;\n                case \"file\":\n                  return <UploadFile schemaValue={schemaValue} form={form} />;\n                case \"json\":\n                  return <JSONEditor action={action} selectedRecord={selectedRecord} schemaValue={schemaValue} form={form} />\n\n                default:\n                  return null;\n              }\n            })}\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {action === \"create\" ? \"Save\" : \"Update\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CreateCollectionAction;\n","import { Card, PageHeader, Space } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { ICollection } from \"../../types/global\";\n\nfunction ShowCollectionAction({\n  selectedCollection,\n  action = \"show\",\n  id,\n  selectedRecord,\n}: {\n  selectedCollection: ICollection;\n  action: \"show\";\n  id?: string;\n  selectedRecord?: any;\n}) {\n  return (\n    <>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={selectedCollection.name}\n        style={{ textTransform: \"capitalize\" }}\n        ghost={false}\n      />\n      <Card style={{ margin: 10 }}>\n        <div>\n          {Object.keys(selectedRecord).map((key: any) => {\n            console.log(selectedRecord[key])\n            return (\n              key !== \"key\" && (\n                <div>\n                  <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                    <Text\n                      style={{ textTransform: \"capitalize\" }}\n                      type=\"secondary\"\n                    >\n                      {key}\n                    </Text>\n\n                    <p>\n                      {Array.isArray(selectedRecord[key]) ? (\n                        selectedRecord[key].map((data: any) => (\n                          <DisplayData data={data} />\n                        ))\n                      ) : typeof selectedRecord[key] === \"object\" ? (\n                        <DisplayData data={selectedRecord[key]} />\n                      ) : (\n                        selectedRecord[key].toString()\n                      )}\n                    </p>\n                  </Space>\n                  <br />\n                </div>\n              )\n            );\n          })}\n        </div>\n      </Card>\n    </>\n  );\n}\n\nconst DisplayData = (data: any) => {\n  data = data[\"data\"];\n  return (\n    <div\n      style={{\n        borderLeft: \"6px solid #1890ff\",\n        border: \"1px dotted #1890ff\",\n        padding: 10,\n        margin: 2,\n        width: \"100%\",\n      }}\n    >\n      {typeof data === \"string\" ? data : Object.keys(data).map((key: any) => {\n        return (\n          <>\n            <Space direction=\"vertical\">\n              <Text style={{ textTransform: \"capitalize\" }} type=\"secondary\">\n                {key}\n              </Text>\n              <p>\n                {typeof data[key] === \"object\" ? (\n                  <DisplayData data={data[key]} />\n                ) : (\n                  data[key]\n                )}\n              </p>\n            </Space>\n            <br />\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ShowCollectionAction;\n","import { Dispatch, useCallback, useEffect, useState } from \"react\";\nimport {\n  Table,\n  PageHeader,\n  Button,\n  Tag,\n  Modal,\n  message,\n  List,\n  Image,\n  Space,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../http\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport queryString from \"query-string\";\nimport { selectCollection } from \"../store/actionCreators\";\nimport CreateCollectionAction from \"../components/DataFlow/CreateCollectionAction\";\nimport ShowCollectionAction from \"../components/DataFlow/ShowCollectionAction\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n} from \"@ant-design/icons\";\n\nimport moment from \"moment\";\nimport prettySize from \"prettysize\";\n\nconst { Column } = Table;\nconst { confirm } = Modal;\ninterface IParams {\n  action?: string;\n  id?: string;\n}\n\nfunction DataFlowPage() {\n  const { collection: collectionName }: any = useParams();\n\n  const history = useHistory();\n  const params: IParams = queryString.parse(window.location.href.split(\"?\")[1]);\n\n  const [list, setList] = useState<Array<{ name: string; type: string }>>([]);\n  const [columns, setColumns] = useState([]);\n\n  const [selectedRecord, setSelectedRecord] = useState<any>({});\n\n  const [loading, setLoading] = useState(true);\n  const [rowSelection, setRowSelection] = useState<any>([]);\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const setSelectedCollection = useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  ).filter((collection) => collection.show);\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n      setColumns(data.column);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteRecord = async (id: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.delete,\n        data: {\n          id: id,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Record Deleted\");\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: rowSelection,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setRowSelection([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (collectionName && Object.keys(params).length === 0) {\n      setColumns([]);\n      setList([]);\n      getCollectionList(collectionName, pagination);\n    }\n    if (!selectedCollection) {\n      history.push(\"/data\");\n    }\n  }, [collectionName, selectedCollection, window.location.href]);\n\n  const dataSource = list.map((l: any, index) => ({ key: index, ...l }));\n\n  const dataColumns: any = columns.map(\n    ({ name, type, file }: { name: string; type: string; file: boolean }) => ({\n      title: name.toString(),\n      dataIndex: name.toString(),\n      key: name.toString(),\n      type,\n      file,\n    })\n  );\n\n  dataColumns.push({\n    title: \"Action\",\n    key: \"operation\",\n    fixed: \"right\",\n    width: 50,\n    type: \"operation\",\n  });\n\n  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    setPagination(pagination);\n    getCollectionList(collectionName, pagination);\n  };\n\n  if (!collectionName)\n    return (\n      <>\n        <PageHeader\n          title=\"Available Collections\"\n          subTitle=\"Select any collection to view data\"\n          ghost={false}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            padding: 20,\n            width: \"100%\",\n          }}\n        >\n          <List\n            dataSource={collections}\n            renderItem={(collection) => (\n              <Tag\n                style={{\n                  paddingTop: 15,\n                  paddingBottom: 15,\n                  textTransform: \"capitalize\",\n                  margin: 5,\n                  letterSpacing: 1.2,\n                  cursor: \"pointer\",\n                  alignContent: \"center\",\n                  paddingLeft: 30,\n                  paddingRight: 30,\n                  fontWeight: 600,\n                  fontSize: 20,\n                }}\n                color=\"orange\"\n                onClick={() => {\n                  setSelectedCollection(collection);\n                  history.push(`/data/${collection.name}`);\n                }}\n              >\n                <span>{collection.name}</span>\n              </Tag>\n            )}\n          />\n        </div>\n      </>\n    );\n\n  if (params.action && params.action === \"create\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"create\"\n      />\n    );\n  if (params.action && params.action === \"update\" && selectedCollection)\n    return (\n      <CreateCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"update\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  if (params.action && params.action === \"show\" && selectedCollection)\n    return (\n      <ShowCollectionAction\n        selectedCollection={selectedCollection}\n        action=\"show\"\n        id={params.id}\n        selectedRecord={selectedRecord}\n      />\n    );\n\n  return (\n    <>\n      <PageHeader\n        style={{ marginTop: 2 }}\n        ghost={false}\n        onBack={() => window.history.back()}\n        title={\n          <Space>\n            <span style={{ textTransform: \"capitalize\" }}>\n              {collectionName}{\" \"}\n            </span>\n            {pagination?.total && (\n              <Tag color=\"geekblue\" >\n                {pagination.total}\n              </Tag>\n            )}\n          </Space>\n        }\n        extra={[\n          rowSelection.length ? (\n            <Button\n              onClick={() => {\n                return confirm({\n                  title: \"Sure you want to delete selected records?\",\n                  icon: <ExclamationCircleOutlined />,\n                  content: null,\n                  onOk() {\n                    deleteManyRecord();\n                  },\n                  onCancel() {\n                    console.log(\"Cancel\");\n                  },\n                });\n              }}\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          ) : null,\n          <Button key=\"2\">\n            <FilterOutlined />\n            Filter\n          </Button>,\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => {\n              history.push(`/data/${collectionName}?action=create`);\n            }}\n          >\n            <PlusOutlined />\n            Create\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Table\n        loading={loading}\n        style={{ padding: 10 }}\n        dataSource={dataSource}\n        size=\"middle\"\n        rowKey={(record) => record._id}\n        rowSelection={{\n          selectedRowKeys: rowSelection,\n          onChange: (selectedRows) => {\n            setRowSelection(selectedRows);\n          },\n        }}\n        pagination={pagination}\n        onChange={handleTableChange}\n      >\n        {dataColumns.map((column: any) => {\n          switch (column.type) {\n            case \"objectId\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={70}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n            case \"boolean\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text, record, index) => {\n                    if (text === undefined) return null;\n                    return (\n                      <>\n                        {text ? (\n                          <Tag\n                            color={\"green\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <Tag\n                            color={\"red\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n\n            case \"date\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: Date) => {\n                    return text ? (\n                      <span>{moment(text).format(\"MM/DD/YYYY hh:mm\")}</span>\n                    ) : null;\n                  }}\n                />\n              );\n\n            case \"mixed\":\n              return (\n                <Column\n                  title={\n                    <span style={{\n                      textTransform: \"capitalize\", display: \"flex\",\n                      justifyContent: \"space-between\",\n                    }}>\n                      {column.title}\n\n                      <Tag color=\"magenta\">JSON</Tag>\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: any) => {\n                    return text ? (\n                      <span  >{Object.keys(text).map(key => <Tag>{key}</Tag>)}</span>\n                    ) : null;\n                  }}\n                />\n              );\n            case \"operation\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={60}\n                  render={(text, record: any) => {\n                    return (\n                      <Space>\n                        <Button\n                          className=\"button-blue\"\n                          shape=\"circle\"\n                          icon={<EyeOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=show&id=${record._id}`\n                            );\n                          }}\n                        ></Button>\n                        <Button\n                          className=\"button-green\"\n                          shape=\"circle\"\n                          icon={<EditOutlined />}\n                          onClick={() => {\n                            setSelectedRecord(record);\n                            history.push(\n                              `/data/${collectionName}?action=update&id=${record._id}`\n                            );\n                          }}\n                        />\n                        <Button\n                          className=\"button-red\"\n                          shape=\"circle\"\n                          icon={<DeleteOutlined />}\n                          onClick={() => {\n                            return confirm({\n                              title: \"Sure you want to delete this record?\",\n                              icon: <ExclamationCircleOutlined />,\n                              content: null,\n                              onOk() {\n                                deleteRecord(record._id);\n                              },\n                              onCancel() {\n                                console.log(\"Cancel\");\n                              },\n                            });\n                          }}\n                        />\n                      </Space>\n                    );\n                  }}\n                />\n              );\n            case \"hasone\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">File</Tag>}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      text && (\n                        <Space direction=\"vertical\">\n                          {column.file ? (\n                            <Space>\n\n                              <Image\n                                preview={false}\n                                width={100}\n                                height={100}\n                                src={\"/admin/file/get/\" + text.filename}\n                                fallback={\"/img/file.svg\"}\n                              />\n\n                              <span\n                                style={{\n                                  color: \"GrayText\",\n                                  display: \"flex\",\n                                  justifyContent: \"space-between\",\n                                  flexDirection: \"column\"\n                                }}\n                              >\n                                <b>{text.originalname}</b>\n                                {prettySize(text.size)} {text.mimetype}\n                              </span>\n                            </Space>\n                          ) : typeof text === \"string\" ? (\n                            <span>{text} </span>\n                          ) : (\n                            Object.values(text).map((value, index) => {\n                              if (!(typeof value === \"string\")) return null;\n                              if (index > 1) return null;\n                              return <span>{value} </span>;\n                            })\n                          )}\n                        </Space>\n                      )\n                    );\n                  }}\n                />\n              );\n            case \"hasmany\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-around\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">Files</Tag>}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      <span>\n                        {text?.length} {column.title}\n                      </span>\n                    );\n                  }}\n                ></Column>\n              );\n            default:\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                />\n              );\n          }\n        })}\n      </Table>\n    </>\n  );\n}\n\nexport default DataFlowPage;\n","import { PageHeader } from \"antd\";\n\nimport FilesView from \"../components/File/FilesView\";\n\nfunction FilePage() {\n    return (\n        <>\n            <PageHeader title=\"File Management\" ghost={false} />\n\n            <FilesView deleteButton={true} />\n        </>\n    );\n}\n\nexport default FilePage;\n","import React from \"react\";\nimport { PageHeader, Checkbox, Space, message } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport { Dispatch } from \"redux\";\nimport { updateCollection } from \"../store/actionCreators\";\n\nconst key = \"updatable\";\n\nfunction AuthPage() {\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  ).filter((collection) => collection.show);\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  function onChange(collection: ICollection, checkedValues) {\n    message.loading({ content: \"Saving...\", key });\n\n    const allMethods = {\n      list: false,\n      create: false,\n      read: false,\n      update: false,\n      delete: false,\n      deleteAll: false,\n    };\n    checkedValues.forEach((value) => {\n      allMethods[value] = true;\n    });\n\n    collection.publicMethods = allMethods;\n\n    updateCollectionAction(collection);\n  }\n\n  const parseOptions = (collection: ICollection) => {\n    return Object.keys(collection.publicMethods || {}).map((method) => ({\n      label: method,\n      value: `${method}`,\n    }));\n  };\n\n  const parseDefaults = (collection: ICollection) => {\n    return Object.keys(collection.publicMethods || {})\n      .filter((method) => collection.publicMethods[method])\n      .map((method) => `${method}`);\n  };\n\n  return (\n    <div>\n      <PageHeader\n        title=\"Auth\"\n        subTitle=\"Manage your route access\"\n        ghost={false}\n      />\n      <PageHeader title=\"Public routes available\" />\n      <Space direction=\"vertical\">\n        {collections.map((collection: ICollection) => {\n          return (\n            <Space key={collection.id}>\n              <PageHeader\n                title={collection.name}\n                style={{ textTransform: \"capitalize\" }}\n              />\n\n              <Checkbox.Group\n                options={parseOptions(collection)}\n                defaultValue={parseDefaults(collection)}\n                onChange={(checkedValues) =>\n                  onChange(collection, checkedValues)\n                }\n              />\n            </Space>\n          );\n        })}\n      </Space>\n    </div>\n  );\n}\n\nexport default AuthPage;\n","import React, { useState, useEffect } from \"react\";\nimport { PageHeader, Row, Col, Tree, Button } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport { CarryOutOutlined } from \"@ant-design/icons\";\nimport {\n    ICollection,\n    CollectionsState,\n} from \"../types/global\";\n\n\nfunction ApiDocsPage() {\n    const [selectedCollection, setSelectedCollection] = useState({\n        collection: \"\",\n        method: \"\",\n    });\n\n\n    const collections: ICollection[] = useSelector(\n        (state: CollectionsState) => state.collections\n    );\n\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\n        const [collection, method] = selectedKeys[0].toString().split(\"-\");\n        if (method) {\n            setSelectedCollection({\n                collection,\n                method,\n            });\n        } else {\n            setSelectedCollection({\n                collection,\n                method: data.find((model) => model.title === collection).children[0]\n                    .title,\n            });\n        }\n    };\n\n    const data = collections\n        .filter((collection: ICollection) => collection.show)\n        .map((collection: ICollection) => ({\n            title: collection.name,\n            key: collection.name,\n            icon: <CarryOutOutlined />,\n            children: [\n                {\n                    title: \"list\",\n                    key: `${collection.name}-list`,\n                    icon: <CarryOutOutlined />,\n                },\n\n                {\n                    title: \"create\",\n                    key: `${collection.name}-create`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"read\",\n                    key: `${collection.name}-read`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"update\",\n                    key: `${collection.name}-update`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"delete\",\n                    key: `${collection.name}-delete`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"deleteAll\",\n                    key: `${collection.name}-deleteAll`,\n                    icon: <CarryOutOutlined />,\n                },\n            ].filter((method: any) => collection.operations[method.title]),\n        }))\n        .filter((d) => d.children.length);\n\n\n\n    useEffect(() => {\n        if (data.length) {\n            setSelectedCollection({\n                collection: data[0].title,\n                method: data[0].children[0].title,\n            });\n        }\n    }, []);\n\n\n    return (\n        <div>\n            <PageHeader\n                title=\"Api Documentation\"\n                subTitle=\"Powered by swagger.io\"\n                ghost={false}\n                extra={[\n                    <Button\n                        className=\"button-blue\"\n                        onClick={() => {\n                            window\n                                .open(\"http://localhost:3002/admin/api-docs/\", \"_blank\")\n                                .focus();\n                        }}\n                    >\n                        Open docs\n                    </Button>,\n                ]}\n            />\n\n            <Row>\n                <Col lg={3} style={{ height: \"100vh\" }}>\n                    <Tree\n                        showLine={true}\n                        showIcon={false}\n                        defaultExpandParent={true}\n                        onSelect={onSelect}\n                        treeData={data}\n                        style={{\n                            backgroundColor: \"transparent\",\n                            padding: 20,\n                            height: \"100vh\",\n                        }}\n                    />\n                </Col>\n                <Col lg={21} style={{ height: \"100vh\" }}>\n                    <PageHeader\n                        title={\n                            <span style={{ textTransform: \"capitalize\" }}>\n                                {selectedCollection?.collection}\n                            </span>\n                        }\n                        subTitle={`${selectedCollection.method}`}\n                    ></PageHeader>\n                    <Row>\n\n                    </Row>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default ApiDocsPage;\n","import React, { useState } from \"react\";\nimport { Input, Button, message } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\nimport { loginAdmin } from \"../http\";\n\nfunction LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <img src=\"/img/black-logo.png\" alt=\"\" width={300} />\n      <br />\n      <div\n        style={{\n          height: 120,\n          width: 300,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Input\n          placeholder=\"Email\"\n          onChange={(e) => {\n            setEmail(e.target.value);\n          }}\n        />\n        <Input.Password\n          placeholder=\"Password\"\n          iconRender={(visible) =>\n            visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n          }\n          onChange={(e) => {\n            setPassword(e.target.value);\n          }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={async () => {\n            const { data } = await loginAdmin({\n              email,\n              password,\n            });\n\n            if (data.status) {\n              message.success(data.message);\n              setTimeout(() => {\n                window.location.reload();\n              }, 1000);\n            } else {\n              message.error(data.message);\n            }\n          }}\n        >\n          Login\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout, Alert, Button } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport { initData } from \"./store/actionCreators\";\n// components\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport SchemaFlowPage from \"./pages/SchemaFlowPage\";\nimport DataFlowPage from \"./pages/DataFlowPage\";\nimport FilePage from \"./pages/FilePage\";\nimport AuthPage from \"./pages/AuthPage\";\nimport ApiDocsPage from \"./pages/ApiDocsPage\";\nimport LoginPage from \"./pages/LoginPage\";\n\nconst { Content } = Layout;\n\nfunction ErrorFallback({ error, resetErrorBoundary }) {\n  return (\n    <Alert\n      message=\"Something broke, please try again\"\n      description={error.message}\n      type=\"error\"\n      action={\n        <Button onClick={resetErrorBoundary} size=\"small\" danger>\n          Detail\n        </Button>\n      }\n    />\n  );\n}\n\nfunction App() {\n  const isAuth = localStorage.getItem(\"token\");\n  return (\n    <Layout className=\"main\">\n      <ErrorBoundary\n        FallbackComponent={ErrorFallback}\n        onReset={() => {\n          // reset the state of your app so the error doesn't happen again\n        }}\n      >\n        <Router basename=\"/admin-ui\">\n          {isAuth ? (\n            AuthRoutes()\n          ) : (\n            <Route path=\"/\" exact component={LoginPage} />\n          )}\n        </Router>\n      </ErrorBoundary>\n    </Layout>\n  );\n}\n\nconst AuthRoutes = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, []);\n\n  return (\n    <>\n      <SideBar />\n      <Layout>\n        <Header />\n        <Content style={{ overflow: \"auto\" }}>\n          <Switch>\n            <Route path=\"/\" exact component={SchemaFlowPage} />\n            <Route path=\"/collections\" exact component={CollectionsPage} />\n            <Route path=\"/data\" exact component={DataFlowPage} />\n            <Route path=\"/data/:collection\" exact component={DataFlowPage} />\n            <Route path=\"/files\" exact component={FilePage} />\n            <Route path=\"/auth\" exact component={AuthPage} />\n            <Route path=\"/api-docs\" exact component={ApiDocsPage} />\n          </Switch>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  CollectionAction,\n} from \"../types/global\";\n\nconst initialState: CollectionsState = {\n  collections: [],\n  selectedCollection: undefined,\n};\n\nconst reducer = (\n  state: CollectionsState = initialState,\n  action: CollectionAction\n): CollectionsState => {\n  switch (action.type) {\n    case actionTypes.INIT_COLLECTION:\n      return {\n        ...state,\n        collections: action.collections || [],\n      };\n    case actionTypes.ADD_COLLECTION:\n      return {\n        ...state,\n        collections: state.collections\n          .concat(action.collection)\n          .sort((a, b) => a.name.localeCompare(b.name)),\n      };\n\n    case actionTypes.REMOVE_COLLECTION:\n      const updatedCollections: ICollection[] = state.collections\n        .filter((article) => article.id !== action.collection.id)\n        .sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...state,\n        collections: updatedCollections,\n        selectedCollection: undefined,\n      };\n\n    case actionTypes.SET_COLLECTION:\n      const selectedCollection: ICollection = action.collection;\n\n      return {\n        ...state,\n        selectedCollection,\n      };\n\n    case actionTypes.UPDATE_COLLECTION:\n      const updatedCollection: ICollection = action.collection;\n\n      state.collections = state.collections.map((collection) => {\n        if (collection.id === updatedCollection.id) {\n          return updatedCollection;\n        }\n        return collection;\n      });\n\n      state.selectedCollection = updatedCollection;\n\n      return { ...state };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// state\nimport reducer from \"./store/reducer\";\n\nimport {\n  CollectionsState,\n  CollectionAction,\n  DispatchType,\n} from \"./types/global\";\n\nconst store: Store<CollectionsState, CollectionAction> & {\n  dispatch: DispatchType;\n} = createStore(reducer, applyMiddleware(thunk));\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}