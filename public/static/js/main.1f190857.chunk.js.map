{"version":3,"sources":["http.tsx","store/actionTypes.ts","store/actionCreators.ts","components/Header.tsx","components/SideBar.tsx","types/global.ts","components/Badge.tsx","components/common/RequiredText.tsx","components/NewCollectionModal.tsx","components/DataTypes/Boolean.tsx","components/DataTypes/Number.tsx","components/DataTypes/Ref.tsx","components/DataTypes/String.tsx","components/DataTypes/Date.tsx","components/DataTypes/File.tsx","components/DataTypes/JSON.tsx","components/NewCollectionTypeModal.tsx","components/RemoveCollectionTypeModal.tsx","components/RemoveCollectionModal.tsx","pages/CollectionsPage.tsx","components/SchemaView.tsx","pages/SchemaFlowPage.tsx","pages/DataFlowPage.tsx","components/File/FilesView.tsx","pages/FilePage.tsx","pages/AuthPage.tsx","pages/ApiDocsPage.tsx","pages/LoginPage.tsx","pages/RegisterPage.tsx","components/DataFlow/RefSelect.tsx","components/DataFlow/UploadFile.tsx","components/DataFlow/JSONEditor.tsx","components/DataFlow/CreateCollectionAction.tsx","components/DataFlow/ShowCollectionAction.tsx","components/DataFlow/UpdateCollectionAction.tsx","components/DataFlow/TableFilter.tsx","pages/DataFlowDetailPage.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["EOperations","INIT_COLLECTION","ADD_COLLECTION","REMOVE_COLLECTION","SET_COLLECTION","UPDATE_COLLECTION","upsertCollectionData","collection","axios","post","name","deleteCollection","delete","crudCollection","crudBody","query","selectCollection","disPatchAction","type","actionTypes","updateCollection","action","dispatch","a","key","message","loading","content","success","duration","interceptors","request","use","config","localStorage","getItem","headers","authorization","error","Promise","reject","response","status","window","location","replace","data","AppHeader","useLocation","headerName","collections","pathname","split","subHeaderName","ghost","title","subTitle","Sider","Layout","SideBar","ESchemaTypes","ERelationShip","useState","collapsed","setCollapsed","selectedMenu","pages","to","icon","LineChartOutlined","AlignCenterOutlined","DatabaseOutlined","plugins","FileOutlined","UserSwitchOutlined","collapsible","collapsedWidth","theme","onCollapse","style","height","className","src","alt","marginTop","mode","defaultSelectedKeys","orientation","CodeSandboxCircleFilled","CodeSandboxOutlined","map","page","Item","ApiTwoTone","ApiOutlined","plugin","SlidersTwoTone","SlidersOutlined","display","flexDirection","alignItems","onClick","open","focus","clear","PoweroffOutlined","Badge","toLowerCase","color","string","number","boolean","ref","date","file","json","getBadgeColor","fontWeight","getBadgeName","Text","Typography","RequiredText","fontSize","strong","NewCollectionModal","isModalVisible","setIsModalVisible","edit","selectedCollection","collectionName","setCollectionName","showData","setShowData","operations","list","create","read","update","deleteAll","crudOperation","setCrudOperation","nameInput","useRef","useDispatch","newCollection","React","useCallback","addCollection","setSelectedCollection","updateCollectionAction","handleOk","length","col","show","find","id","uuidv4","camelCase","schema","fields","publicMethods","x","Math","floor","y","useEffect","current","PlusOutlined","visible","onOk","onCancel","direction","placeholder","value","onChange","target","test","onKeyDown","e","pascalCase","checked","Object","keys","Boolean","state","setState","updateState","updatedData","prev","width","defaultValue","checkedChildren","unCheckedChildren","defaultChecked","default","required","settings","index","trim","unique","uppercase","lowercase","Number","typeSettings","setTypeSettings","getStateSettings","filter","includes","obj","getKeyValue","min","max","Group","forEach","minLength","maxLength","Ref","useSelector","shallowEqual","overflow","relationship","Button","hasMany","hasOne","autopopulate","textTransform","TextArea","Input","String","enumText","setEnumText","enum","join","showCount","lg","disabled","Date","File","JSON","NewCollectionTypeModal","editSchema","saveCollection","footer","schemas","updatedCollection","confirm","Modal","RemoveCollectionModal","removeCollectionType","ExclamationCircleOutlined","deleteType","console","log","deleteCollectionAction","Content","CreateSchema","setEditSchema","openCollectionModal","setOpenCollectionModal","editCollectionModal","setEditCollectionModal","localCollections","setLocalCollections","setSelectCollection","removeCollection","backgroundColor","extra","padding","size","searchCollections","grid","gutter","xs","sm","md","xl","xxl","dataSource","renderItem","cursor","placeItems","letterSpacing","marginLeft","span","paddingLeft","operation","bordered","boxShadow","justifyContent","bodyStyle","borderBottom","align","EditOutlined","DeleteOutlined","RemoveCollectionTypeModal","SchemaView","field","margin","CaretDownOutlined","CaretRightOutlined","transition","textAlign","paddingRight","SchemaFlowPage","collectionNodes","setCollectionNodes","mapNodes","nodes","push","label","borderColor","borderRadius","position","elementsNodes","source","animated","labelStyle","checkIfRefExists","updateCollectionPosition","parse","defaultPosition","elements","minZoom","defaultZoom","zoom","snapToGrid","snapGrid","onlyRenderVisibleElements","onMove","setItem","stringify","onNodeDragStop","event","node","DataFlowPage","history","useHistory","flexWrap","paddingTop","paddingBottom","alignContent","Dragger","Upload","FilesView","setCustomFiles","deleteButton","filterButton","selectedFiles","defaultSelectedFiles","setList","setSelectedFiles","setLoading","uploadModal","setUploadModal","pageSize","pagination","setPagination","props","multiple","defaultFileList","info","fileList","onDrop","dataTransfer","files","getCollectionList","model","deleteManyRecord","active","total","FilterOutlined","l","border","_id","zIndex","tempArray","fileId","preview","filename","fallback","originalname","prettySize","mimetype","float","packageJson","proxy","p","destroyOnClose","InboxOutlined","FilePage","AuthPage","parseOptions","method","parseDefaults","options","checkedValues","allMethods","ApiDocsPage","CarryOutOutlined","children","d","showLine","showIcon","defaultExpandParent","onSelect","selectedKeys","toString","treeData","LoginPage","email","setEmail","password","setPassword","Password","iconRender","EyeTwoTone","EyeInvisibleOutlined","loginData","then","token","setTimeout","RegisterPage","registerData","Option","Select","RefSelect","schemaValue","selectedRecord","setData","search","setSearch","searchValues","setSearchValues","setValue","makeSearch","rules","initialValue","Array","isArray","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","s","v","notFoundContent","undefined","UploadFile","form","setFieldsValue","JSONEditor","jsonData","setJsonData","locale","jsObject","CreateCollectionAction","useParams","queryParams","queryString","c","Form","useForm","createData","formData","body","back","onBack","marginRight","onFinish","values","onFinishFailed","errorInfo","layout","htmlType","DisplayData","borderLeft","ShowCollectionAction","setSelectedRecord","getRecordData","UpdateCollectionAction","updateData","moment","TableFilter","handleFilterChange","decodeURI","count","top","left","right","shape","overflowY","initial","replaceAll","bottom","resetQuery","Column","Table","DataFlowDetailPage","columns","setColumns","breadcrumbs","useBreadcrumbs","rowSelection","setRowSelection","column","deleteRecord","href","dataColumns","dataIndex","fixed","match","breadcrumb","url","scroll","rowKey","record","selectedRowKeys","selectedRows","filters","sorter","render","text","format","MenuOutlined","overlay","EyeOutlined","placement","MoreOutlined","maxHeight","slice","ErrorFallback","resetErrorBoundary","description","danger","AuthRoutes","get","initialState","Header","path","exact","component","CollectionsPage","App","isAuth","FallbackComponent","onReset","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","concat","sort","b","localeCompare","updatedCollections","article","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1f190857.chunk.js","sourcesContent":["import { message } from \"antd\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { ICollection } from \"./types/global\";\n\naxios.interceptors.request.use(\n  (config) => {\n    if (localStorage.getItem(\"token\"))\n      config.headers.authorization = localStorage.getItem(\"token\");\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    if (response.status === 401) {\n      message.error(\"Not authorized\");\n      window.location.replace(\"/admin-ui/login\");\n    }\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      message.error(\"Not authorized\");\n      return window.location.replace(\"/admin-ui/login\");\n    }\n    if (error.response && error.response.data) {\n      return Promise.reject(error.response.data);\n    }\n    return Promise.reject(error.message);\n  }\n);\n\nexport function getAllCollectionList(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/model/list\");\n}\n\nexport function upsertCollectionData(\n  collection: ICollection\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/create/\" + collection.name, collection);\n}\n\nexport function deleteCollection({\n  name,\n}: ICollection): Promise<AxiosResponse> {\n  return axios.delete(\"/admin/model/delete/\" + name);\n}\n\nexport function crudCollection(\n  crudBody: ICurdBody,\n  query: String = \"\"\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/crud/\" + query, crudBody);\n}\n\nexport enum EOperations {\n  read = \"read\",\n  list = \"list\",\n  create = \"create\",\n  update = \"update\",\n  delete = \"delete\",\n  deleteAll = \"deleteAll\",\n  ref = \"ref\",\n}\n\ninterface ICurdData {\n  id?: string | Array<string>;\n  query?: {\n    pagination?: {\n      current: number;\n      pageSize: number;\n    };\n    find?: {};\n    search?: string;\n  };\n  body?: {};\n}\n\nexport interface ICurdBody {\n  model: string;\n  operations: EOperations;\n  data: ICurdData;\n}\n\nexport function getSwaggerJson(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/api-docs/editor\");\n}\n\nexport function loginAdmin(loginData): Promise<AxiosResponse> {\n  return axios.post(\"/auth/login\", loginData).then((response: any) => {\n    const { data } = response;\n    if (data.status) {\n      localStorage.setItem(\"token\", data.token);\n      return response;\n    }\n    return response;\n  });\n}\n\nexport function registerAdmin(registerData): Promise<AxiosResponse> {\n  return axios\n    .post(\"/auth/admin/register\", registerData)\n    .then((response: any) => {\n      const { data } = response;\n      if (data.status) {\n        localStorage.setItem(\"token\", data.token);\n        return response;\n      }\n      return response;\n    });\n}\n","export const INIT_COLLECTION = \"INIT_COLLECTION\";\nexport const ADD_COLLECTION = \"ADD_COLLECTION\";\nexport const REMOVE_COLLECTION = \"REMOVE_COLLECTION\";\nexport const SET_COLLECTION = \"SET_COLLECTION\";\nexport const UPDATE_COLLECTION = \"UPDATE_COLLECTION\";\n","import * as actionTypes from \"./actionTypes\";\nimport { message } from \"antd\";\n\nimport { ICollection, CollectionAction, DispatchType } from \"../types/global\";\nimport {\n  deleteCollection,\n  getAllCollectionList,\n  upsertCollectionData,\n} from \"../http\";\nimport { AxiosResponse } from \"axios\";\n\nexport function addCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.ADD_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function removeCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.REMOVE_COLLECTION,\n    collection,\n  };\n\n  return async (dispatch: DispatchType) => {\n    await deleteCollection(collection);\n    dispatch(action);\n  };\n}\n\nexport function selectCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.SET_COLLECTION,\n    collection,\n  };\n  return disPatchAction(action);\n}\n\nexport function updateCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.UPDATE_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    const key = \"updatable\";\n\n    message.loading({ content: \"Saving...\", key });\n    await upsertCollectionData(collection);\n    message.success({ content: \"Saved!\", key, duration: 2 });\n\n    dispatch(action);\n  };\n}\n\nconst disPatchAction = (collection: CollectionAction) => {\n  return (dispatch: DispatchType) => dispatch(collection);\n};\n\nexport const initData = () => async (dispatch: DispatchType) => {\n  let { data: initialState }: AxiosResponse = await getAllCollectionList();\n  const collection: CollectionAction = {\n    type: actionTypes.INIT_COLLECTION,\n    collections: initialState,\n    collection: initialState[0] || {},\n  };\n\n  dispatch(collection);\n};\n","import { useLocation } from \"react-router-dom\";\nimport { PageHeader } from \"antd\";\n\nfunction AppHeader() {\n  const location = useLocation();\n  const headerNames: any = {\n    \"\": \"Schema Flow\",\n    collections: \"Schema\",\n    data: \"Data Flow\",\n  };\n  const subHeaderNames: any = {\n    \"\": \"Visualize you database\",\n    collections: \"Manage your mongoose schema\",\n    data: \"Manage your data\",\n  };\n\n  const headerName = headerNames[location.pathname.split(\"/\")[1]];\n\n  const subHeaderName = subHeaderNames[location.pathname.split(\"/\")[1]];\n\n  if (headerName === \"Data Flow\") return null;\n  return (\n    <>\n      {headerName && <PageHeader ghost={false} title={headerName} subTitle={subHeaderName} />}\n    </>\n  );\n}\n\nexport default AppHeader;\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Divider, Button, Space } from \"antd\";\nimport {\n  AlignCenterOutlined,\n  LineChartOutlined,\n  DatabaseOutlined,\n  FileOutlined,\n  ApiTwoTone,\n  ApiOutlined,\n  UserSwitchOutlined,\n  SlidersTwoTone,\n  SlidersOutlined,\n  CodeSandboxOutlined,\n  CodeSandboxCircleFilled,\n  PoweroffOutlined,\n} from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nfunction SideBar() {\n  const location = useLocation();\n\n  const [collapsed, setCollapsed] = useState(false);\n\n  const selectedMenu = location.pathname.split(\"/\")[1];\n\n  const pages = [\n    {\n      key: \"\",\n      to: \"/\",\n      name: \"Schema Flow\",\n      icon: <LineChartOutlined />,\n    },\n    {\n      key: \"collections\",\n      to: \"/collections\",\n      name: \"Collections\",\n      icon: <AlignCenterOutlined />,\n    },\n    {\n      key: \"data\",\n      to: \"/data\",\n      name: \"Data Flow\",\n      icon: <DatabaseOutlined />,\n    },\n  ];\n\n  const plugins = [\n    {\n      key: \"files\",\n      to: \"/files\",\n      name: \"Files\",\n      icon: <FileOutlined />,\n    },\n    {\n      key: \"auth\",\n      to: \"/auth\",\n      name: \"Auth\",\n      icon: <UserSwitchOutlined />,\n    },\n  ];\n\n  return (\n    <Sider\n      collapsible={true}\n      collapsedWidth=\"50\"\n      theme=\"light\"\n      collapsed={collapsed}\n      onCollapse={(collapsed, type) => {\n        setCollapsed(collapsed);\n      }}\n      style={{ height: \"100vh\" }}\n    >\n      <div className=\"logo-container\">\n        <img\n          className={collapsed ? \"logo-small\" : \"logo-large\"}\n          src={collapsed ? \"/img/o-logo.png\" : \"/img/black-logo.png\"}\n          alt=\"\"\n        ></img>\n      </div>\n      <Menu\n        style={{ marginTop: 10 }}\n        mode=\"inline\"\n        defaultSelectedKeys={[selectedMenu]}\n      >\n        <Divider orientation=\"left\">\n          {collapsed ? (\n            <CodeSandboxCircleFilled />\n          ) : (\n            <Space>\n              <CodeSandboxOutlined /> Core\n            </Space>\n          )}\n        </Divider>\n        {pages.map((page) => (\n          <Menu.Item key={page.key} icon={page.icon}>\n            <Link to={page.to}>{page.name}</Link>\n          </Menu.Item>\n        ))}\n\n        <Divider orientation=\"left\">\n          {collapsed ? (\n            <ApiTwoTone />\n          ) : (\n            <Space>\n              {\" \"}\n              <ApiOutlined /> Plugins{\" \"}\n            </Space>\n          )}\n        </Divider>\n        {plugins.map((plugin) => (\n          <Menu.Item key={plugin.key} icon={plugin.icon}>\n            <Link to={plugin.to}>{plugin.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu>\n\n      <Divider orientation=\"left\">\n        {collapsed ? (\n          <SlidersTwoTone />\n        ) : (\n          <Space>\n            <SlidersOutlined /> General\n          </Space>\n        )}\n      </Divider>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"start\",\n        }}\n      >\n        <Button\n          type=\"link\"\n          onClick={() => {\n            window.open(\"/admin/api-docs/\", \"_blank\").focus();\n          }}\n        >\n          {collapsed ? <b>API</b> : \"Api Documentation\"}\n        </Button>\n\n        <Button\n          type=\"link\"\n          onClick={() => {\n            localStorage.clear();\n            window.location.replace(\"/admin-ui\");\n          }}\n        >\n          {collapsed ? <PoweroffOutlined /> : \"Logout\"}\n        </Button>\n      </div>\n    </Sider>\n  );\n}\n\nexport default SideBar;\n","export enum ESchemaTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  ref = \"ref\",\n  date = \"date\",\n  array = \"array\",\n  object = \"object\",\n  enums = \"enums\",\n  file = \"file\",\n  json = \"json\",\n}\n\nexport enum ERelationShip {\n  hasOne = \"hasone\",\n  hasMany = \"hasmany\",\n  none = \"none\",\n}\n\nexport interface ICollectionSchema {\n  name: string;\n  type: ESchemaTypes;\n  default?: any;\n  required?: boolean;\n  index?: boolean;\n  unique?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  trim?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  ref?: string;\n  relationship?: ERelationShip;\n  enum: Array<string>;\n  autopopulate: boolean;\n}\n\nexport interface ICrudOperations {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\nexport interface IPublicMethods {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\n\nexport interface ICollection {\n  id: string;\n  name: string;\n  schema: any;\n  fields: number;\n  show: boolean;\n  operations: ICrudOperations;\n  publicMethods?: IPublicMethods;\n  x: Number;\n  y: Number;\n}\n\nexport type CollectionsState = {\n  collections: ICollection[];\n  selectedCollection: ICollection | undefined;\n  newCollection?: ICollection;\n};\n\nexport type CollectionAction = {\n  type: string;\n  collection: ICollection;\n  collections?: Array<ICollection>;\n};\n\nexport type DispatchType = (args: CollectionAction) => CollectionAction;\n","import { Tag } from \"antd\";\n\nimport { ESchemaTypes } from \"../types/global\";\n\nfunction Badge({ type }: { type: any }) {\n  type = type.toLowerCase();\n  const getBadgeColor = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"#f50\";\n      case ESchemaTypes.number:\n        return \"#d4b106\";\n      case ESchemaTypes.boolean:\n        return \"#52c41a\";\n      case ESchemaTypes.ref:\n        return \"#13c2c2\";\n      case ESchemaTypes.date:\n        return \"#1890ff\";\n      case ESchemaTypes.file:\n        return \"#2f54eb\";\n      case ESchemaTypes.json:\n        return \"#531dab\";\n      default:\n        return \"#8c8c8c\";\n    }\n  };\n\n  const getBadgeName = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"Abc\";\n      case ESchemaTypes.number:\n        return \"123\";\n      case ESchemaTypes.boolean:\n        return \"true\";\n      case ESchemaTypes.ref:\n        return \"Relation\";\n      case ESchemaTypes.date:\n        return \"17 Aug\";\n      case ESchemaTypes.file:\n        return \"File\";\n      case ESchemaTypes.json:\n        return \"JSON\";\n      default:\n        return \"NA\";\n    }\n  };\n\n  return (\n    <div>\n      <Tag color={getBadgeColor()} style={{ fontWeight: \"bold\" }}>\n        {getBadgeName()}\n      </Tag>\n    </div>\n  );\n}\n\nexport default Badge;\n","import { Typography } from 'antd'\n\nconst { Text } = Typography;\n\nexport default function RequiredText({ message = \"This field is required\" }: { message?: string }) {\n    return (\n        <Text type=\"danger\" style={{ fontSize: 12 }} strong >{message}</Text>\n    )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Input, message, Checkbox, Tag, Space } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { pascalCase } from \"pascal-case\";\nimport { camelCase } from \"camel-case\";\n\nimport {\n  addCollection,\n  selectCollection,\n  updateCollection,\n} from \"../store/actionCreators\";\n\nimport { ICollection, ICrudOperations } from \"../types/global\";\n\nimport RequiredText from \"./common/RequiredText\";\n\nfunction NewCollectionModal({\n  collections,\n  isModalVisible,\n  setIsModalVisible,\n  edit,\n  selectedCollection,\n}: {\n  collections: Array<ICollection>;\n  isModalVisible: boolean;\n  setIsModalVisible: Function;\n  edit?: boolean;\n  selectedCollection?: ICollection;\n}) {\n  const [collectionName, setCollectionName] = useState(\n    selectedCollection ? selectedCollection.name : \"\"\n  );\n  const [showData, setShowData] = useState(true);\n  const [crudOperation, setCrudOperation] = useState<ICrudOperations>(\n    selectedCollection\n      ? selectedCollection.operations\n      : {\n          list: true,\n          create: true,\n          read: true,\n          update: true,\n          delete: true,\n          deleteAll: true,\n        }\n  );\n  const nameInput = useRef<any>();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const newCollection = React.useCallback(\n    (collection: ICollection) => dispatch(addCollection(collection)),\n    [dispatch]\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const error = () => {\n    message.error(\"Collection already exists\");\n  };\n\n  const handleOk = () => {\n    if (collectionName.length === 0) return;\n    if (!edit) {\n      if (\n        collections.find((collection) => collection.name === collectionName)\n      ) {\n        error();\n        return;\n      }\n      const col: ICollection = {\n        id: uuidv4(),\n        name: camelCase(collectionName),\n        schema: {},\n        fields: 0,\n        show: showData,\n        operations: crudOperation,\n        publicMethods: {\n          list: false,\n          create: false,\n          read: false,\n          update: false,\n          delete: false,\n          deleteAll: false,\n        },\n        x: Math.floor(collections.length % 4) * 300 + 20,\n        y: (Math.floor(collections.length / 4) + 1) * 60,\n      };\n      newCollection(col);\n      setSelectedCollection(col);\n      setCollectionName(\"\");\n    } else {\n      const col = {\n        ...selectedCollection,\n        name: collectionName,\n        show: showData,\n        operations: crudOperation,\n      };\n\n      updateCollectionAction(col);\n      setSelectedCollection(col);\n    }\n\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (nameInput.current) {\n      nameInput.current.focus();\n    }\n  }, []);\n  return (\n    <>\n      <Button className=\"button-blue\" onClick={showModal}>\n        {edit ? \"Edit\" : \"Create New\"}\n      </Button>\n      <Modal\n        title={\n          <span>\n            {\" \"}\n            <PlusOutlined /> Create new collection\n          </span>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            ref={nameInput}\n            placeholder=\"Collection Name\"\n            value={collectionName}\n            onChange={({ target: { value } }) => {\n              if (/[^a-zA-Z ]/.test(value)) return;\n              setCollectionName(value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleOk();\n              }\n            }}\n          />\n          {collectionName.length === 0 && <RequiredText />}\n\n          {pascalCase(collectionName)}\n          <Checkbox\n            onChange={() => setShowData(!showData)}\n            value={showData}\n            checked={showData}\n          >\n            {\" \"}\n            <b>Show on data flow ?</b>\n          </Checkbox>\n\n          <Tag color=\"geekblue\">Allowed Operations</Tag>\n          <div>\n            {Object.keys(crudOperation).map((key) => (\n              <Checkbox\n                onChange={() =>\n                  setCrudOperation({\n                    ...crudOperation,\n                    [key]: !crudOperation[key],\n                  })\n                }\n                checked={crudOperation[key]}\n                value={crudOperation[key]}\n              >\n                {\" \"}\n                <b>{key}</b>\n              </Checkbox>\n            ))}\n          </div>\n        </Space>\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionModal;\n","import { Space, Switch, Input } from \"antd\";\nimport React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Boolean({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"boolean\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            defaultValue={state.name}\n          />\n          <span>Default value</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.default}\n            onChange={(e) => updateState(\"default\", e)}\n          />\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Boolean;\n","import { Space, InputNumber, Input, Checkbox } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { useState, useEffect } from \"react\";\n\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction Number({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n  }, [state]);\n\n\n  return (\n    <>\n      {state.type === \"number\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <InputNumber\n            min={1}\n            max={10}\n            onChange={(e) => updateState(\"default\", e)}\n            placeholder={\"10\"}\n            style={{ width: \"100%\" }}\n          />\n\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{ width: \"100%\" }}\n            onChange={(e) => {\n              const settings: any = {\n                index: false,\n                required: false,\n                unique: false,\n              };\n\n              setState((prev: ICollectionSchema) => {\n                Object.keys(settings).forEach((key) => {\n                  if (e.includes(key)) {\n                    settings[key] = true;\n                  }\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Space direction=\"vertical\">\n              <Checkbox value=\"required\">Required</Checkbox>\n              <Checkbox value=\"index\">Index</Checkbox>\n              <Checkbox value=\"unique\">Unique</Checkbox>\n              <h4>Minimum Length</h4>\n              <InputNumber\n                min={0}\n                value={state.minLength || 0}\n                onChange={(number) => updateState(\"minLength\", number)}\n              />\n              <h4>Maximum Length</h4>\n\n              <InputNumber\n                min={0}\n                value={state.maxLength || 0}\n                onChange={(number) => updateState(\"maxLength\", number)}\n              />\n            </Space>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Number;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction Ref({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"ref\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            {collections.map(({ name }, index) => (\n              <Radio.Button\n                value={name}\n                style={{ textTransform: \"capitalize\" }}\n                key={index}\n              >\n                {name}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Ref;\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Input, Checkbox, InputNumber, Row, Col } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nconst { TextArea } = Input;\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction String({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const [enumText, setEnumText] = useState(\"\");\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n    if (state.enum.length) {\n      setEnumText(state.enum.join(\"\\n\"));\n    }\n  }, [state]);\n\n  return (\n    <>\n      {state.type === \"string\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            value={state.name}\n          />\n          <RequiredText />\n          <span>Default value</span>\n          <Input\n            onChange={(e) => updateState(\"default\", e.target.value)}\n            value={state.default}\n            placeholder=\"Keep empty for not setting the value\"\n          />\n          <span>Enums</span>\n\n          <TextArea\n            showCount\n            maxLength={100}\n            style={{ width: \"100%\" }}\n            value={enumText}\n            placeholder=\"Keep empty for not setting the value\"\n            onChange={(e) => {\n              setEnumText(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                updateState(\"enum\", enumText.trim().split(\"\\n\"));\n              }\n            }}\n          />\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            onChange={(e) => {\n              setState((prev: ICollectionSchema) => {\n                if (!e.includes(\"maxLength\")) {\n                  prev[\"maxLength\"] = 0;\n                }\n                if (!e.includes(\"minLength\")) {\n                  prev[\"minLength\"] = 0;\n                }\n                Object.keys(settings).forEach((key: any) => {\n                  if (![\"maxLength\", \"minLength\"].includes(key))\n                    settings[key] = e.includes(key);\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Row>\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"required\">Required</Checkbox>\n                <Checkbox value=\"index\">Index</Checkbox>\n                <Checkbox value=\"unique\">Unique</Checkbox>\n                <Checkbox\n                  value=\"lowercase\"\n                  disabled={typeSettings.includes(\"uppercase\")}\n                >\n                  Lowercase\n                </Checkbox>\n                <Checkbox\n                  value=\"uppercase\"\n                  disabled={typeSettings.includes(\"lowercase\")}\n                >\n                  Uppercase\n                </Checkbox>\n              </Col>\n\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"trim\">Trim</Checkbox>\n\n                <h4>Minimum Length</h4>\n                <InputNumber\n                  min={0}\n                  value={state.minLength || 0}\n                  onChange={(number) => updateState(\"minLength\", number)}\n                />\n                <h4>Maximum Length</h4>\n\n                <InputNumber\n                  min={0}\n                  value={state.maxLength || 0}\n                  onChange={(number) => updateState(\"maxLength\", number)}\n                />\n              </Col>\n\n\n            </Row>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default String;\n","import { Space, Input, DatePicker } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Date({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"date\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <DatePicker onChange={(e) => updateState(\"default\", e)} />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Date;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n\n} from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction File({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n\n  return (\n    <>\n      {state.type === \"file\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            <Radio.Button\n              value={\"file\"}\n              style={{ textTransform: \"capitalize\" }}\n            >\n              File\n            </Radio.Button>\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default File;\n","import React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport { Input, Space } from \"antd\";\nimport RequiredText from \"../common/RequiredText\";\n\nfunction JSON({\n    state,\n    setState,\n}: {\n    state: ICollectionSchema;\n    setState: Function;\n}) {\n    const updateState = (key: string, value: any) => {\n        const updatedData: any = {};\n        updatedData[key] = value;\n        setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n    };\n    return (\n        <div>\n            {state.type === \"json\" && (\n\n                <Space direction=\"vertical\">\n                    <span>Name for the type</span>\n                    <Input\n                        placeholder=\"Type Name\"\n                        onChange={(e) => updateState(\"name\", e.target.value)}\n                    />\n                    <RequiredText />\n                </Space>\n            )}\n        </div>\n    );\n}\n\nexport default JSON;\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Dispatch } from \"redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Space, Button, Radio, Modal, message } from \"antd\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Boolean from \"./DataTypes/Boolean\";\nimport Number from \"./DataTypes/Number\";\nimport Ref from \"./DataTypes/Ref\";\nimport String from \"./DataTypes/String\";\nimport Date from \"./DataTypes/Date\";\nimport File from \"./DataTypes/File\";\n\nimport {\n  ICollection,\n  ESchemaTypes,\n  ICollectionSchema,\n  ERelationShip,\n} from \"../types/global\";\nimport { updateCollection } from \"../store/actionCreators\";\nimport JSON from \"./DataTypes/JSON\";\n\nfunction NewCollectionTypeModal({\n  selectedCollection,\n  editSchema,\n}: {\n  selectedCollection: ICollection;\n  editSchema?: ICollectionSchema;\n}) {\n  // variables\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const error = () => {\n    message.error(\"Type already exist\");\n  };\n\n\n  // local state\n  const [state, setState] = useState<ICollectionSchema>({\n    name: \"\",\n    type: ESchemaTypes.string,\n    default: \"\",\n    index: false,\n    maxLength: 0,\n    minLength: 0,\n    required: false,\n    trim: false,\n    unique: false,\n    uppercase: false,\n    lowercase: false,\n    enum: [],\n    ref: \"none\",\n    relationship: ERelationShip.hasMany,\n    autopopulate: true,\n  });\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const resetState = () => {\n    setState({\n      name: \"\",\n      type: ESchemaTypes.string,\n      default: \"\",\n      index: false,\n      maxLength: 0,\n      minLength: 0,\n      required: false,\n      trim: false,\n      unique: false,\n      uppercase: false,\n      lowercase: false,\n      ref: \"none\",\n      relationship: ERelationShip.hasMany,\n      enum: [],\n      autopopulate: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      resetState();\n    }\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    if (editSchema) {\n      setState(editSchema)\n      setIsModalVisible(true);\n    }\n  }, [editSchema]);\n\n  const footer = (\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        const schemas: any = {\n          ...selectedCollection.schema,\n        };\n        if (!editSchema && schemas[state.name]) {\n          error();\n          return;\n        }\n\n        schemas[state.name] = state;\n\n        const updatedCollection: ICollection = {\n          ...selectedCollection,\n          schema: schemas,\n          fields: Object.keys(schemas).length,\n        };\n        saveCollection(updatedCollection);\n        handleOk();\n      }}\n      disabled={state.name.length === 0}\n    >\n      {\"Save\"}\n    </Button>\n  );\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={showModal}\n        style={{\n          width: \"100%\",\n          height: 50,\n          textTransform: \"uppercase\",\n          fontWeight: \"bold\",\n        }}\n      >\n        Add New Field\n      </Button>\n      <Modal\n        title={\n          <Space>\n            {\" \"}\n            <PlusOutlined />\n            <Radio.Group\n              onChange={(e) => {\n                setState((prev: any) => ({ ...prev, type: e.target.value }));\n              }}\n              value={state.type}\n            >\n              <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n              <Radio.Button value={ESchemaTypes.boolean}>Boolean</Radio.Button>\n              <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n              <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n              <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n              <Radio.Button value={ESchemaTypes.file}>File</Radio.Button>\n              <Radio.Button value={ESchemaTypes.json}>JSON</Radio.Button>\n            </Radio.Group>\n          </Space>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={footer}\n        width={800}\n      >\n        <String state={state} setState={setState} />\n        <Boolean state={state} setState={setState} />\n\n        <Number state={state} setState={setState} />\n\n        <Ref state={state} setState={setState} />\n        <Date state={state} setState={setState} />\n\n        <File state={state} setState={setState} />\n        <JSON state={state} setState={setState} />\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionTypeModal;\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  removeCollectionType,\n  collection,\n  key,\n}: {\n  removeCollectionType: Function;\n  collection: ICollection;\n  key: any;\n}) {\n  const deleteType = () => {\n    const { schema } = collection;\n    delete schema[key];\n    collection.schema = schema;\n    collection.fields = collection.fields - 1;\n    removeCollectionType(collection);\n  };\n\n  return confirm({\n    title: \"Sure you want to delete type?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteType();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import { Modal, message } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  collection,\n  deleteCollectionAction,\n}: {\n  collection: ICollection;\n  deleteCollectionAction: Function;\n}) {\n  const deleteCollection = () => {\n    deleteCollectionAction(collection);\n    message.success(\"Collection removed\");\n  };\n\n  return confirm({\n    title: \"Sure you want to delete this collection?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteCollection();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  List,\n  Button,\n  Space,\n  Card,\n  Tag,\n  Layout,\n  Input,\n  PageHeader,\n  message,\n} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nimport Badge from \"../components/Badge\";\n\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  selectCollection,\n  updateCollection,\n  removeCollection,\n} from \"../store/actionCreators\";\n\nimport NewCollectionModal from \"../components/NewCollectionModal\";\nimport EditCollectionModal from \"../components/NewCollectionModal\";\nimport NewCollectionTypeModal from \"../components/NewCollectionTypeModal\";\nimport RemoveCollectionTypeModal from \"../components/RemoveCollectionTypeModal\";\nimport RemoveCollectionModal from \"../components/RemoveCollectionModal\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  ICollectionSchema,\n} from \"../types/global\";\n\n// define vars\nconst { Sider, Content } = Layout;\n\nfunction CreateSchema() {\n  const [editSchema, setEditSchema] = useState<ICollectionSchema>();\n  const [openCollectionModal, setOpenCollectionModal] = useState(false);\n  const [editCollectionModal, setEditCollectionModal] = useState(false);\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [localCollections, setLocalCollections] = useState<Array<ICollection>>(\n    []\n  );\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const setSelectCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const removeCollectionType = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const deleteCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(removeCollection(collection)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (!selectedCollection && collections.length) {\n      setSelectCollection(collections[0]);\n    }\n    setLocalCollections(collections);\n  }, [collections]);\n\n  return (\n    <>\n      <Layout style={{ height: \"100%\" }}>\n        <Sider\n          width=\"400\"\n          theme=\"light\"\n          style={{\n            backgroundColor: \"transparent\",\n          }}\n        >\n          <PageHeader\n            title=\"Collection List\"\n            extra={[\n              <Tag color=\"green\">\n                Total {collections.length}\n              </Tag>,\n              <NewCollectionModal\n                collections={collections}\n                isModalVisible={openCollectionModal}\n                setIsModalVisible={setOpenCollectionModal}\n              />,\n            ]}\n          />\n\n          <div style={{ padding: 10 }}>\n            <Input\n              size=\"large\"\n              placeholder=\"Search Collection\"\n              onChange={(e) => {\n                let searchCollections: Array<ICollection> = [];\n\n                if (e.target.value.length) {\n                  searchCollections = collections.filter(\n                    (collection: ICollection) =>\n                      collection.name\n                        .trim()\n                        .toLowerCase()\n                        .includes(e.target.value.toLowerCase())\n                  );\n                  setLocalCollections(searchCollections);\n                } else {\n                  setLocalCollections(collections);\n                }\n              }}\n            />\n          </div>\n\n          <List\n            grid={{\n              gutter: 10,\n              xs: 1,\n              sm: 1,\n              md: 1,\n              lg: 1,\n              xl: 1,\n              xxl: 1,\n            }}\n            dataSource={localCollections}\n            style={{ padding: 10, height: \"80vh\", overflow: \"auto\" }}\n            renderItem={(collection, index) => (\n              <List.Item key={index}>\n                <Tag\n                  key={index}\n                  style={{\n                    textTransform: \"capitalize\",\n                    cursor: \"pointer\",\n                    height: 55,\n                    width: \"100%\",\n                    display: \"grid\",\n                    placeItems: \"left\",\n                    fontSize: \"20px\",\n                    letterSpacing: 1.3,\n                    padding: 10\n                  }}\n                  color={\n                    collection.name === selectedCollection?.name\n                      ? \"orange\"\n                      : collection.show ? \"default\" : \"error\"\n                  }\n                  onClick={() => {\n                    setSelectCollection(collection);\n                  }}\n                >\n                  {collection.name}\n\n                  <span style={{ fontSize: 12 }}>\n                    {collection.fields} fields\n                    <span style={{ fontSize: 12, marginLeft: 10 }}>\n                      {collection.show ? null : \"Hidden\"}\n                    </span>\n                  </span>\n                </Tag>\n              </List.Item>\n            )}\n          />\n        </Sider>\n\n        {selectedCollection && (\n          <Layout style={{ backgroundColor: \"#fafafb\", height: \"100%\" }}>\n            <Content>\n              <PageHeader\n                title={\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {selectedCollection.name}\n                  </span>\n                }\n                extra={selectedCollection.show ? [\n                  <Space>\n                    < EditCollectionModal collections={collections}\n\n                      isModalVisible={editCollectionModal}\n                      setIsModalVisible={setEditCollectionModal}\n                      edit={true}\n                      selectedCollection={selectedCollection}\n\n                    />\n                    <Button\n                      className=\"button-green\"\n\n                      onClick={() => {\n                        saveCollection(selectedCollection);\n                        message.success(\"Collection Saved\");\n                      }}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      className=\"button-red\"\n                      onClick={() => {\n                        RemoveCollectionModal({\n                          deleteCollectionAction: deleteCollectionAction,\n                          collection: selectedCollection,\n                        });\n                      }}\n                    >\n                      Delete\n                    </Button>\n                  </Space>,\n                ] : [\n                  <Tag color=\"geekblue\" >Hidden</Tag>\n                ]}\n              />\n\n              <Row>\n                <Col span={24} style={{ paddingLeft: 20 }}>\n                  <h5>Allowed Operations</h5>\n                  {Object.keys(selectedCollection.operations).map(operation => <Tag color={selectedCollection.operations[operation] ? \"geekblue\" : \"volcano\"} >{operation}</Tag>)}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col span={24} style={{ padding: 20 }}>\n                  <Card\n                    bordered={false}\n                    style={{ boxShadow: \"rgb(227 233 243) 0px 2px 4px\" }}\n                    title={\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <h1>{`${selectedCollection.fields} fields`} </h1>\n                      </div>\n                    }\n                    bodyStyle={{ padding: 0 }}\n                  >\n                    {Object.keys(selectedCollection.schema).map(\n                      (key: any, index) => {\n                        const schema: ICollectionSchema =\n                          selectedCollection.schema[key];\n                        const { type } = schema;\n                        return (\n                          <Row\n                            gutter={0}\n                            style={{\n                              height: 60,\n                              padding: 15,\n                              borderBottom: \"1px solid #f0f0f0\",\n                            }}\n                            align=\"middle\"\n                            key={index}\n                          >\n                            <Col span={6}>\n                              <Badge type={type} />\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  fontWeight: 500,\n                                }}\n                              >\n                                {key}\n                              </span>{\" \"}\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  textTransform: \"capitalize\",\n                                }}\n                              >\n                                {type}\n                              </span>{\" \"}\n                            </Col>\n                            <Col\n                              span={6}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-end\",\n                              }}\n                            >\n                              {selectedCollection.show && <Space size={25}>\n                                <EditOutlined\n                                  style={{ color: \"#8c8c8c\", fontSize: 20 }}\n                                  onClick={() =>\n                                    setEditSchema({ ...schema, name: key })\n                                  }\n                                />\n\n                                <DeleteOutlined\n                                  style={{ color: \"#cf1322\", fontSize: 20 }}\n                                  className=\"pointer\"\n                                  onClick={() =>\n                                    RemoveCollectionTypeModal({\n                                      removeCollectionType,\n                                      collection: selectedCollection,\n                                      key,\n                                    })\n                                  }\n                                />\n                              </Space>}\n                            </Col>\n                          </Row>\n                        );\n                      }\n                    )}\n\n                    {selectedCollection.show && <NewCollectionTypeModal\n                      selectedCollection={selectedCollection}\n                      editSchema={editSchema}\n                    />}\n                  </Card>\n                </Col>\n              </Row>\n            </Content>\n          </Layout>\n        )}\n      </Layout>\n    </>\n  );\n}\n\nexport default CreateSchema;\n","import { ICollection } from \"../types/global\";\nimport { useState } from \"react\";\nimport { CaretRightOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nfunction SchemaView({ collection }: { collection: ICollection }) {\n  const dataSource = Object.keys(collection.schema).map((key, index) => ({\n    key: index,\n    field: key,\n    type: collection.schema[key].type,\n  }));\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <>\n      <h2\n        style={{\n          backgroundColor: \"#1890ff\",\n          textTransform: \"capitalize\",\n          padding: 10,\n          color: \"white\",\n          letterSpacing: 1.5,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: 0,\n        }}\n      >\n        {collection.name}\n        <span\n          style={{ cursor: collapsed ? \"zoom-out\" : \"zoom-in\" }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          {\" \"}\n          {!collapsed ? <CaretRightOutlined /> : <CaretDownOutlined />}{\" \"}\n        </span>\n      </h2>\n      {collapsed && (\n        <table style={{ width: \"100%\", transition: \"5s\" }}>\n          {dataSource.map((data) => (\n            <tr key={data.key}>\n              <td\n                style={{\n                  paddingLeft: 8,\n                  textAlign: \"left\",\n                  fontSize: 16,\n                  letterSpacing: 1.2,\n                }}\n              >\n                {data.field}\n              </td>\n              <td\n                style={{\n                  paddingRight: 8,\n                  textAlign: \"right\",\n                  fontSize: 14,\n                  letterSpacing: 1.2,\n                  color: \"#8c8c8c\",\n                }}\n              >\n                {data.type}\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default SchemaView;\n","import { useEffect, useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\nimport { CollectionsState, ESchemaTypes, ICollection } from \"../types/global\";\nimport { upsertCollectionData } from \"../http\";\n\nimport SchemaView from \"../components/SchemaView\";\n\nconst SchemaFlowPage = () => {\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [collectionNodes, setCollectionNodes] = useState([]);\n\n  const checkIfRefExists = (\n    schema: any,\n    collectionName: string,\n    id: string\n  ) => {\n    let elementsNodes: any = [];\n    Object.keys(schema).forEach((key, index) => {\n      if (schema[key].type === ESchemaTypes.ref) {\n        elementsNodes.push({\n          id: `e1-${id}-${index}-${key}`,\n          source: collectionName,\n          target: schema[key].ref,\n          type: \"smoothstep\",\n          label: `${collectionName} ${schema[key].relationship} ${schema[key].ref}`,\n          animated: false,\n          labelStyle: {\n            textTransform: \"lowercase\",\n            fontSize: 20,\n            letterSpacing: 1.2,\n            backgroundColor: \"#ff9c6e\",\n          },\n          style: {\n            width: \"100%\",\n            padding: 20,\n            borderRadius: 5,\n          },\n        });\n      }\n    });\n\n    return elementsNodes;\n  };\n\n  const mapNodes = () => {\n    let nodes: any = [];\n\n    collections.forEach((collection: ICollection, index) => {\n      nodes.push({\n        id: collection.name,\n        data: {\n          label: (\n            <div>\n              <SchemaView collection={collection} />\n            </div>\n          ),\n        },\n        style: {\n          padding: 0,\n          width: \"300px\",\n          borderColor: \"#40a9ff\",\n          borderRadius: 0,\n        },\n        position: { x: collection.x, y: collection.y },\n      });\n      nodes.push(\n        ...checkIfRefExists(collection.schema, collection.name, collection.id)\n      );\n    });\n\n    setCollectionNodes(nodes);\n  };\n\n  useEffect(() => {\n    mapNodes();\n  }, [collections]);\n\n  const updateCollectionPosition = async (id: string, x: number, y: number) => {\n    let collection: ICollection | undefined = collections.find(\n      (collection) => collection.name === id\n    );\n    if (!collection) return;\n    try {\n      collection.x = x;\n      collection.y = y;\n      await upsertCollectionData(collection);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const position = localStorage.getItem(\"displayPosition\")\n    ? JSON.parse(localStorage.getItem(\"displayPosition\"))\n    : JSON.parse(`{\"x\":100,\"y\":100,\"zoom\":1}`);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"auto\",\n      }}\n    >\n      <ReactFlow\n        defaultPosition={[position.x, position.y]}\n        elements={collectionNodes}\n        minZoom={0.4}\n        defaultZoom={position.zoom}\n        snapToGrid={true}\n        snapGrid={[15, 15]}\n        onlyRenderVisibleElements={true}\n        onMove={(e) => {\n          localStorage.setItem(\"displayPosition\", JSON.stringify(e));\n        }}\n        onNodeDragStop={(event, node) => {\n          updateCollectionPosition(node.id, node.position.x, node.position.y);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SchemaFlowPage;\n","import { PageHeader, Tag, List } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\n\nfunction DataFlowPage() {\n  const history = useHistory();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  ).filter((collection) => collection.show);\n\n  return (\n    <>\n      <PageHeader\n        title=\"Available Collections\"\n        subTitle=\"Select any collection to view data\"\n        ghost={false}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          padding: 20,\n          width: \"100%\",\n        }}\n      >\n        <List\n          dataSource={collections}\n          renderItem={(collection) => (\n            <Tag\n              style={{\n                paddingTop: 15,\n                paddingBottom: 15,\n                textTransform: \"capitalize\",\n                margin: 5,\n                letterSpacing: 1.2,\n                cursor: \"pointer\",\n                alignContent: \"center\",\n                paddingLeft: 30,\n                paddingRight: 30,\n                fontWeight: 600,\n                fontSize: 20,\n              }}\n              color=\"orange\"\n              onClick={() => {\n                history.push(\n                  `/data/${collection.name}?action=list&page[number]=1&page[limit]=10`\n                );\n              }}\n            >\n              <span>{collection.name}</span>\n            </Tag>\n          )}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default DataFlowPage;\n","import { useEffect, useState } from \"react\";\nimport {\n  PageHeader,\n  Button,\n  Tag,\n  Space,\n  Modal,\n  message,\n  Skeleton,\n  Image,\n  Pagination,\n  Upload,\n  Checkbox,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\n\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  InboxOutlined,\n} from \"@ant-design/icons\";\n\nimport prettySize from \"prettysize\";\n\nimport packageJson from \"../../../package.json\";\n\nconst { confirm } = Modal;\nconst { Dragger } = Upload;\n\nfunction FilesView({\n  setCustomFiles,\n  deleteButton,\n  filterButton,\n  selectedFiles: defaultSelectedFiles = [],\n}: {\n  setCustomFiles?: Function;\n  deleteButton?: boolean;\n  filterButton?: boolean;\n  selectedFiles: Array<string>;\n}) {\n  const collectionName = \"file\";\n\n  const [list, setList] = useState<Array<any>>([]);\n\n  const [selectedFiles, setSelectedFiles] = useState(defaultSelectedFiles);\n\n  const [loading, setLoading] = useState(true);\n  const [uploadModal, setUploadModal] = useState(false);\n\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  useEffect(() => {\n    if (typeof setCustomFiles === \"function\") {\n      setCustomFiles([...selectedFiles]);\n    }\n  }, [selectedFiles]);\n\n  const props = {\n    multiple: true,\n    name: \"manual\",\n    action: \"/admin/file/manual\",\n    defaultFileList: [],\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== \"uploading\") {\n      }\n      if (status === \"done\") {\n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n\n      info.fileList = [];\n    },\n    onDrop(e) {\n      console.log(\"Dropped files\", e.dataTransfer.files);\n    },\n  };\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: selectedFiles,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setSelectedFiles([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getCollectionList(collectionName, pagination);\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <div style={{ padding: 20 }}>\n          <Skeleton active={true} />\n        </div>\n      ) : (\n        <>\n          <PageHeader\n            style={{ marginTop: 2 }}\n            ghost={true}\n            title={\n              <Space>\n                {pagination?.total > 0 && (\n                  <Tag color=\"green\">Total {pagination.total}</Tag>\n                )}\n\n                <Tag color=\"blue\">Selected {selectedFiles.length}</Tag>\n              </Space>\n            }\n            extra={[\n              selectedFiles.length && deleteButton ? (\n                <Button\n                  onClick={() => {\n                    return confirm({\n                      title: \"Sure you want to delete selected records?\",\n                      icon: <ExclamationCircleOutlined />,\n                      content: null,\n                      onOk() {\n                        deleteManyRecord();\n                      },\n                      onCancel() {\n                        console.log(\"Cancel\");\n                      },\n                    });\n                  }}\n                >\n                  <DeleteOutlined />\n                  Delete\n                </Button>\n              ) : null,\n              filterButton && (\n                <Button key=\"2\">\n                  <FilterOutlined />\n                  Filter\n                </Button>\n              ),\n              <Button\n                key=\"1\"\n                type=\"primary\"\n                onClick={() => {\n                  setUploadModal(true);\n                }}\n              >\n                <PlusOutlined />\n                Upload\n              </Button>,\n            ]}\n          />\n\n          <div className=\"grid-responsive\">\n            {list.map((l) => (\n              <div\n                key={l._id}\n                className=\"on-hover\"\n                style={{\n                  border: selectedFiles.includes(l._id)\n                    ? \"1px solid #40a9ff\"\n                    : \"none\",\n                  backgroundColor: \"white\",\n                }}\n              >\n                <Checkbox\n                  style={{ padding: 10, position: \"absolute\", zIndex: 99 }}\n                  checked={selectedFiles.includes(l._id)}\n                  onChange={() => {\n                    setSelectedFiles((prev: any) => {\n                      let tempArray = [...prev];\n                      if (tempArray.includes(l._id)) {\n                        tempArray = tempArray.filter(\n                          (fileId) => fileId !== l._id\n                        );\n                      } else {\n                        tempArray.push(l._id);\n                      }\n                      return tempArray;\n                    });\n                  }}\n                ></Checkbox>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <Image\n                    preview={false}\n                    width={200}\n                    height={200}\n                    src={\"/admin/file/get/\" + l.filename}\n                    fallback={\"/img/file.svg\"}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    padding: 10,\n                  }}\n                >\n                  <b>{l.originalname}</b>\n                  <span\n                    style={{\n                      color: \"GrayText\",\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                    }}\n                  >\n                    {prettySize(l.size)} {l.mimetype}\n                  </span>\n                </div>\n                <Button\n                  style={{ float: \"right\", margin: 5 }}\n                  onClick={() => {\n                    window\n                      .open(packageJson.proxy + \"/admin/file/get/\" + l.filename)\n                      .focus();\n                  }}\n                >\n                  Open\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          <Pagination\n            style={{ textAlign: \"right\", margin: 10 }}\n            current={pagination.current}\n            pageSize={pagination.pageSize}\n            total={pagination.total}\n            onChange={(page, pageSize) => {\n              const p = {\n                current: page,\n                pageSize: pageSize,\n                total: pagination.total,\n              };\n              getCollectionList(collectionName, p);\n            }}\n          />\n          <Modal\n            title=\"Upload File\"\n            visible={uploadModal}\n            onOk={() => {\n              getCollectionList(collectionName, pagination);\n              setUploadModal(false);\n            }}\n            onCancel={() => setUploadModal(false)}\n            destroyOnClose={true}\n          >\n            <Dragger {...props} className=\"upload-list-inline\">\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                Click or drag file to this area to upload\n              </p>\n              <p className=\"ant-upload-hint\">\n                Support for a single or bulk upload. Strictly prohibit from\n                uploading company data or other band files\n              </p>\n            </Dragger>\n          </Modal>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default FilesView;\n","import { PageHeader } from \"antd\";\n\nimport FilesView from \"../components/File/FilesView\";\n\nfunction FilePage() {\n  return (\n    <>\n      <PageHeader title=\"File Management\" ghost={false} />\n\n      <FilesView deleteButton={true} selectedFiles={[]} />\n    </>\n  );\n}\n\nexport default FilePage;\n","import React from \"react\";\nimport { PageHeader, Checkbox, Space, message, Row, Col, Tag } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport { Dispatch } from \"redux\";\nimport { updateCollection } from \"../store/actionCreators\";\n\nconst key = \"updatable\";\n\nfunction AuthPage() {\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  ).filter((collection) => collection.show);\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  function onChange(collection: ICollection, checkedValues) {\n    message.loading({ content: \"Saving...\", key });\n\n    const allMethods = {\n      list: false,\n      create: false,\n      read: false,\n      update: false,\n      delete: false,\n      deleteAll: false,\n    };\n    checkedValues.forEach((value) => {\n      allMethods[value] = true;\n    });\n\n    collection.publicMethods = allMethods;\n\n    updateCollectionAction(collection);\n  }\n\n  const parseOptions = (collection: ICollection) => {\n    return Object.keys(collection.publicMethods || {}).map((method) => ({\n      label: method,\n      value: `${method}`,\n    }));\n  };\n\n  const parseDefaults = (collection: ICollection) => {\n    return Object.keys(collection.publicMethods || {})\n      .filter((method) => collection.publicMethods[method])\n      .map((method) => `${method}`);\n  };\n\n  const style = { background: \"#0092ff\", padding: \"8px 0\" };\n\n  return (\n    <div>\n      <PageHeader\n        title=\"Auth Management\"\n        subTitle=\"Public routes available\"\n        ghost={false}\n      />\n\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n        {collections.map((collection: ICollection) => {\n          return (\n            <Col className=\"gutter-row\" span={12}>\n              <PageHeader\n                title={<Tag>{collection.name}</Tag>}\n                style={{ textTransform: \"capitalize\" }}\n              />\n              <PageHeader>\n                <Checkbox.Group\n                  options={parseOptions(collection)}\n                  defaultValue={parseDefaults(collection)}\n                  onChange={(checkedValues) =>\n                    onChange(collection, checkedValues)\n                  }\n                />\n              </PageHeader>\n            </Col>\n          );\n        })}\n      </Row>\n    </div>\n  );\n}\n\nexport default AuthPage;\n","import React, { useState, useEffect } from \"react\";\nimport { PageHeader, Row, Col, Tree, Button } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport { CarryOutOutlined } from \"@ant-design/icons\";\nimport {\n    ICollection,\n    CollectionsState,\n} from \"../types/global\";\n\n\nfunction ApiDocsPage() {\n    const [selectedCollection, setSelectedCollection] = useState({\n        collection: \"\",\n        method: \"\",\n    });\n\n\n    const collections: ICollection[] = useSelector(\n        (state: CollectionsState) => state.collections\n    );\n\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\n        const [collection, method] = selectedKeys[0].toString().split(\"-\");\n        if (method) {\n            setSelectedCollection({\n                collection,\n                method,\n            });\n        } else {\n            setSelectedCollection({\n                collection,\n                method: data.find((model) => model.title === collection).children[0]\n                    .title,\n            });\n        }\n    };\n\n    const data = collections\n        .filter((collection: ICollection) => collection.show)\n        .map((collection: ICollection) => ({\n            title: collection.name,\n            key: collection.name,\n            icon: <CarryOutOutlined />,\n            children: [\n                {\n                    title: \"list\",\n                    key: `${collection.name}-list`,\n                    icon: <CarryOutOutlined />,\n                },\n\n                {\n                    title: \"create\",\n                    key: `${collection.name}-create`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"read\",\n                    key: `${collection.name}-read`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"update\",\n                    key: `${collection.name}-update`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"delete\",\n                    key: `${collection.name}-delete`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"deleteAll\",\n                    key: `${collection.name}-deleteAll`,\n                    icon: <CarryOutOutlined />,\n                },\n            ].filter((method: any) => collection.operations[method.title]),\n        }))\n        .filter((d) => d.children.length);\n\n\n\n    useEffect(() => {\n        if (data.length) {\n            setSelectedCollection({\n                collection: data[0].title,\n                method: data[0].children[0].title,\n            });\n        }\n    }, []);\n\n\n    return (\n        <div>\n            <PageHeader\n                title=\"Api Documentation\"\n                subTitle=\"Powered by swagger.io\"\n                ghost={false}\n                extra={[\n                    <Button\n                        className=\"button-blue\"\n                        onClick={() => {\n                            window\n                                .open(\"http://localhost:3002/admin/api-docs/\", \"_blank\")\n                                .focus();\n                        }}\n                    >\n                        Open docs\n                    </Button>,\n                ]}\n            />\n\n            <Row>\n                <Col lg={3} style={{ height: \"100vh\" }}>\n                    <Tree\n                        showLine={true}\n                        showIcon={false}\n                        defaultExpandParent={true}\n                        onSelect={onSelect}\n                        treeData={data}\n                        style={{\n                            backgroundColor: \"transparent\",\n                            padding: 20,\n                            height: \"100vh\",\n                        }}\n                    />\n                </Col>\n                <Col lg={21} style={{ height: \"100vh\" }}>\n                    <PageHeader\n                        title={\n                            <span style={{ textTransform: \"capitalize\" }}>\n                                {selectedCollection?.collection}\n                            </span>\n                        }\n                        subTitle={`${selectedCollection.method}`}\n                    ></PageHeader>\n                    <Row>\n\n                    </Row>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default ApiDocsPage;\n","import React, { useState } from \"react\";\nimport { Input, Button, message, Space } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\nimport { loginAdmin } from \"../http\";\nimport { Link } from \"react-router-dom\";\n\nfunction LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        flexDirection: \"column\",\n        paddingTop: 200,\n        alignItems: \"center\",\n      }}\n    >\n      <img src=\"/img/black-logo.png\" alt=\"\" width={300} />\n      <br />\n      <div\n        style={{\n          height: 120,\n          width: 300,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n          <Input.Password\n            placeholder=\"Password\"\n            iconRender={(visible) =>\n              visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n            }\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={async () => {\n              const { data } = await loginAdmin({\n                email,\n                password,\n              });\n\n              if (data.status) {\n                message.success(data.message);\n                setTimeout(() => {\n                  window.location.replace(\"/admin-ui\");\n                }, 1000);\n              } else {\n                message.error(data.message);\n              }\n            }}\n          >\n            Login\n          </Button>\n          <Link\n            to=\"/register\"\n            style={{ marginTop: 10, padding: 5, textAlign: \"center\" }}\n          >\n            Register\n          </Link>\n        </Space>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React, { useState } from \"react\";\nimport { Input, Button, message, Space } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\nimport { registerAdmin } from \"../http\";\nimport { Link } from \"react-router-dom\";\n\nfunction RegisterPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        flexDirection: \"column\",\n        paddingTop: 200,\n        alignItems: \"center\",\n      }}\n    >\n      <img src=\"/img/black-logo.png\" alt=\"\" width={300} />\n      <br />\n      <div\n        style={{\n          height: 120,\n          width: 300,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n          <Input.Password\n            placeholder=\"Password\"\n            iconRender={(visible) =>\n              visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n            }\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={async () => {\n              const { data } = await registerAdmin({\n                email,\n                password,\n              });\n\n              if (data.status) {\n                message.success(data.message);\n                setTimeout(() => {\n                  window.location.replace(\"/admin-ui\");\n                }, 1000);\n              } else {\n                message.error(data.message);\n              }\n            }}\n          >\n            Register\n          </Button>\n          <Link\n            to=\"/login\"\n            style={{ marginTop: 10, padding: 5, textAlign: \"center\" }}\n          >\n            Login\n          </Link>\n        </Space>\n      </div>\n    </div>\n  );\n}\n\nexport default RegisterPage;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Form } from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\n\nconst { Option } = Select;\n\nfunction RefSelect({ schemaValue, action, selectedRecord }: { schemaValue: any, action: string, selectedRecord: any }) {\n  const [data, setData] = useState<Array<any>>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const [searchValues, setSearchValues] = useState<Array<string>>([]);\n  const [value, setValue] = useState<Array<string>>([]);\n\n\n  const makeSearch = async () => {\n    try {\n      const action: ICurdBody = {\n        model: schemaValue.ref,\n        operations: EOperations.ref,\n        data: {\n          query: {\n            search: search,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setData(data.list);\n      setSearchValues(data.searchValues);\n    } catch (error) { }\n  };\n\n  const options = data.map((d) => (\n    <Option value={d._id}>\n      {searchValues.map((value) => (d[value]?.length ? `${d[value]}` : d._id))}\n    </Option>\n  ));\n\n  useEffect(() => {\n    makeSearch();\n  }, [search]);\n\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n\n      initialValue={\n        action === \"update\" && selectedRecord[schemaValue.name]\n          ? !Array.isArray(selectedRecord[schemaValue.name]) ? [selectedRecord[schemaValue.name]._id] : selectedRecord[schemaValue.name].map(value => value._id || value)\n          : \"\"\n      }\n    >\n      <Select\n        showSearch\n        value={value}\n        placeholder={`Search anything in ${schemaValue.name}`}\n        defaultActiveFirstOption={true}\n        showArrow={false}\n        filterOption={false}\n        onSearch={(s) => setSearch(s)}\n        onChange={(v) => setValue(v)}\n        notFoundContent={null}\n        mode={schemaValue.relationship === \"hasmany\" ? \"multiple\" : undefined}\n      >\n        {options}\n      </Select>\n    </Form.Item>\n  );\n}\n\nexport default RefSelect;\n","import { useEffect, useState } from \"react\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { Form } from \"antd\";\nimport FilesView from \"../../components/File/FilesView\";\n\nfunction UploadFile({\n  schemaValue,\n  form,\n  selectedRecord,\n  action,\n}: {\n  schemaValue: any;\n  form: any;\n  selectedRecord: any;\n  action: any;\n}) {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [schemaValue.name]: selectedFiles,\n    });\n  }, [selectedFiles]);\n\n  const s =\n    action === \"update\"\n      ? selectedRecord[schemaValue.name].map(({ _id }) => _id)\n      : [];\n\n  return (\n    <>\n      <Form.Item\n        label={\n          <span\n            style={{\n              textTransform: \"capitalize\",\n              color: \"#434343\",\n            }}\n          >\n            {schemaValue.name}\n          </span>\n        }\n        name={schemaValue.name}\n        rules={[\n          {\n            required: schemaValue.required,\n          },\n        ]}\n      >\n        <div>\n          <FilesView setCustomFiles={setSelectedFiles} selectedFiles={s} />\n        </div>\n      </Form.Item>\n    </>\n  );\n}\n\nexport default UploadFile;\n","import { Form } from \"antd\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport { useState } from \"react\";\n\n\nfunction JSONEditor({ schemaValue, form, action, selectedRecord }: { schemaValue: any; form: any, action: string, selectedRecord: any }) {\n    const [jsonData, setJsonData] = useState(\n        action === \"update\" && selectedRecord[schemaValue.name]\n            ? selectedRecord[schemaValue.name]\n            : null);\n\n    return (\n        <Form.Item\n            label={\n                <span\n                    style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                    }}\n                >\n                    {schemaValue.name}\n                </span>\n            }\n            name={schemaValue.name}\n            rules={[\n                {\n                    required: schemaValue.required,\n                },\n            ]}\n        >\n            <div style={{ border: \"1px solid #161f59\", borderRadius: 1 }}>\n\n                <JSONInput\n\n                    theme=\"dark_mitsuketa_tribute\"\n\n                    locale={locale}\n                    placeholder={jsonData}\n                    onChange={(e) => {\n                        form.setFieldsValue({\n                            [schemaValue.name]: { ...e.jsObject },\n                        })\n                        setJsonData(e.jsObject);\n                    }}\n                    height=\"550px\"\n                    width=\"100%\"\n                />\n            </div>\n        </Form.Item>\n    );\n}\n\nexport default JSONEditor;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport {\n  CollectionsState,\n  ICollection,\n  ICollectionSchema,\n} from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\";\nimport { useHistory, useParams } from \"react-router\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport { useEffect, useState } from \"react\";\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction CreateCollectionAction() {\n  const history = useHistory();\n\n  const { collection: collectionName }: any = useParams();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const schema = selectedCollection.schema;\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations: \"create\" ? EOperations.create : EOperations.update,\n        data: {\n          body: formData,\n          id: queryParams.id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <PageHeader onBack={() => window.history.back()} title={\"Create New\"} />\n      <Card\n        style={{ marginLeft: 10, marginRight: 10 }}\n        title={\n          <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n            {selectedCollection?.name}\n          </span>\n        }\n      >\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          size=\"large\"\n          form={form}\n        >\n          {schema &&\n            Object.keys(schema).map((key: any) => {\n              const schemaValue = getKeyValue<\n                keyof ICollectionSchema,\n                ICollectionSchema\n              >(key)(schema);\n\n              switch (schemaValue.type) {\n                case \"string\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                    >\n                      {schemaValue.enum.length ? (\n                        <Select placeholder={`Select ${schemaValue.name}`}>\n                          <>\n                            {schemaValue.enum.map((e: any) => (\n                              <Option value={e}>{e}</Option>\n                            ))}\n                          </>\n                        </Select>\n                      ) : (\n                        <Input />\n                      )}\n                    </Form.Item>\n                  );\n\n                case \"number\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                    >\n                      <InputNumber style={{ width: 300 }} />\n                    </Form.Item>\n                  );\n                case \"date\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                    >\n                      <DatePicker />\n                    </Form.Item>\n                  );\n                case \"boolean\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\"false\"}\n                    >\n                      <Select placeholder={`Select`}>\n                        <Option value={\"true\"}>True</Option>\n                        <Option value={\"false\"}>False</Option>\n                      </Select>\n                    </Form.Item>\n                  );\n                case \"ref\":\n                  return (\n                    <RefSelect\n                      action={\"create\"}\n                      selectedRecord={{}}\n                      schemaValue={schemaValue}\n                    />\n                  );\n                case \"file\":\n                  return (\n                    <UploadFile\n                      schemaValue={schemaValue}\n                      form={form}\n                      selectedRecord={{}}\n                      action={\"create\"}\n                    />\n                  );\n                case \"json\":\n                  return (\n                    <JSONEditor\n                      action={\"create\"}\n                      selectedRecord={{}}\n                      schemaValue={schemaValue}\n                      form={form}\n                    />\n                  );\n\n                default:\n                  return null;\n              }\n            })}\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {\"Save\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CreateCollectionAction;\n","import { PageHeader, Card, Space } from \"antd\";\nimport { CollectionsState, ICollection } from \"../../types/global\";\n\nimport { useHistory, useParams } from \"react-router\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport { useEffect, useState } from \"react\";\nimport Text from \"antd/lib/typography/Text\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\n\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction ShowCollectionAction() {\n  const history = useHistory();\n  const [selectedRecord, setSelectedRecord] = useState<any>();\n  const { collection: collectionName }: any = useParams();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const getRecordData = async () => {\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.read,\n        data: {\n          id: queryParams.id,\n        },\n      };\n      const { data } = await crudCollection(action);\n\n      setSelectedRecord(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!selectedRecord && queryParams.id) {\n      getRecordData();\n    }\n  }, [queryParams]);\n  return (\n    <>\n      {selectedRecord && (\n        <>\n          <PageHeader\n            onBack={() => window.history.back()}\n            title={selectedCollection.name}\n            style={{ textTransform: \"capitalize\" }}\n            ghost={false}\n          />\n          <Card style={{ margin: 10 }}>\n            <div>\n              {Object.keys(selectedRecord).map((key: any) => {\n                console.log(selectedRecord[key]);\n                return (\n                  key !== \"key\" && (\n                    <div>\n                      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                        <Text\n                          style={{ textTransform: \"capitalize\" }}\n                          type=\"secondary\"\n                        >\n                          {key}\n                        </Text>\n\n                        <p>\n                          {Array.isArray(selectedRecord[key]) ? (\n                            selectedRecord[key].map((data: any) => (\n                              <DisplayData data={data} />\n                            ))\n                          ) : typeof selectedRecord[key] === \"object\" ? (\n                            <DisplayData data={selectedRecord[key]} />\n                          ) : (\n                            selectedRecord[key].toString()\n                          )}\n                        </p>\n                      </Space>\n                      <br />\n                    </div>\n                  )\n                );\n              })}\n            </div>\n          </Card>\n        </>\n      )}\n    </>\n  );\n}\n\nconst DisplayData = (data: any) => {\n  data = data[\"data\"];\n  return (\n    <div\n      style={{\n        borderLeft: \"6px solid #1890ff\",\n        border: \"1px dotted #1890ff\",\n        padding: 10,\n        margin: 2,\n        width: \"100%\",\n      }}\n    >\n      {typeof data === \"string\"\n        ? data\n        : Object.keys(data).map((key: any) => {\n            return (\n              <>\n                <Space direction=\"vertical\">\n                  <Text\n                    style={{ textTransform: \"capitalize\" }}\n                    type=\"secondary\"\n                  >\n                    {key}\n                  </Text>\n                  <p>\n                    {typeof data[key] === \"object\" ? (\n                      <DisplayData data={data[key]} />\n                    ) : (\n                      data[key]\n                    )}\n                  </p>\n                </Space>\n                <br />\n              </>\n            );\n          })}\n    </div>\n  );\n};\n\nexport default ShowCollectionAction;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport {\n  CollectionsState,\n  ICollection,\n  ICollectionSchema,\n} from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\";\nimport { useHistory, useParams } from \"react-router\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport { useEffect, useState } from \"react\";\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction UpdateCollectionAction() {\n  const history = useHistory();\n  const [selectedRecord, setSelectedRecord] = useState<any>();\n  const { collection: collectionName }: any = useParams();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    updateData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const updateData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations: EOperations.update,\n        data: {\n          body: formData,\n          id: queryParams.id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  const getRecordData = async () => {\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.read,\n        data: {\n          id: queryParams.id,\n        },\n      };\n      const { data } = await crudCollection(action);\n\n      setSelectedRecord(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!selectedRecord && queryParams.id) {\n      getRecordData();\n    }\n  }, [queryParams]);\n\n  return (\n    <>\n      {selectedRecord && (\n        <div>\n          <PageHeader onBack={() => window.history.back()} title={\"Edit\"} />\n          <Card\n            style={{ marginLeft: 10, marginRight: 10 }}\n            title={\n              <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n                {selectedCollection?.name}\n              </span>\n            }\n          >\n            <Form\n              name=\"basic\"\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              layout=\"vertical\"\n              size=\"large\"\n              form={form}\n            >\n              {selectedCollection.schema &&\n                Object.keys(selectedCollection.schema).map((key: any) => {\n                  const schemaValue = getKeyValue<\n                    keyof ICollectionSchema,\n                    ICollectionSchema\n                  >(key)(selectedCollection.schema);\n\n                  switch (schemaValue.type) {\n                    case \"string\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                              enum: [\"male\", \"female\"],\n                            },\n                          ]}\n                          initialValue={selectedRecord[schemaValue.name]}\n                        >\n                          {schemaValue.enum.length ? (\n                            <Select placeholder={`Select ${schemaValue.name}`}>\n                              <>\n                                {schemaValue.enum.map((e: any) => (\n                                  <Option value={e}>{e}</Option>\n                                ))}\n                              </>\n                            </Select>\n                          ) : (\n                            <Input />\n                          )}\n                        </Form.Item>\n                      );\n\n                    case \"number\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                            },\n                          ]}\n                          initialValue={selectedRecord[schemaValue.name]}\n                        >\n                          <InputNumber style={{ width: 300 }} />\n                        </Form.Item>\n                      );\n                    case \"date\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                            },\n                          ]}\n                          initialValue={moment(\n                            selectedRecord[schemaValue.name]\n                          )}\n                        >\n                          <DatePicker />\n                        </Form.Item>\n                      );\n                    case \"boolean\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                            },\n                          ]}\n                          initialValue={selectedRecord[\n                            schemaValue.name\n                          ]?.toString()}\n                        >\n                          <Select placeholder={`Select`}>\n                            <Option value={\"true\"}>True</Option>\n                            <Option value={\"false\"}>False</Option>\n                          </Select>\n                        </Form.Item>\n                      );\n                    case \"ref\":\n                      return (\n                        <RefSelect\n                          action={\"update\"}\n                          selectedRecord={selectedRecord}\n                          schemaValue={schemaValue}\n                        />\n                      );\n                    case \"file\":\n                      return (\n                        <UploadFile\n                          schemaValue={schemaValue}\n                          form={form}\n                          selectedRecord={selectedRecord}\n                          action={\"update\"}\n                        />\n                      );\n                    case \"json\":\n                      return (\n                        <JSONEditor\n                          action={\"update\"}\n                          selectedRecord={selectedRecord}\n                          schemaValue={schemaValue}\n                          form={form}\n                        />\n                      );\n\n                    default:\n                      return null;\n                  }\n                })}\n\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  {\"Update\"}\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default UpdateCollectionAction;\n","import {\n  Button,\n  Input,\n  Space,\n  Form,\n  Row,\n  Col,\n  Select,\n  InputNumber,\n  DatePicker,\n  Badge,\n} from \"antd\";\nimport Highlighter from \"react-highlight-words\";\nimport { CaretRightOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport queryString from \"query-string\";\nimport { useHistory, useParams } from \"react-router\";\nimport { useEffect, useState } from \"react\";\nimport { ICollection, ICollectionSchema } from \"../../types/global\";\nimport moment from \"moment\";\nimport RefSelect from \"./RefSelect\";\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction TableFilter({\n  selectedCollection,\n}: {\n  selectedCollection: ICollection;\n}) {\n  const { collection: collectionName }: any = useParams();\n  const history = useHistory();\n  const queryParams: any = queryString.parse(history.location.search);\n  const [collapsed, setCollapsed] = useState(false);\n\n  const schema = selectedCollection?.schema;\n\n  const handleSearch = (values: any) => {\n    let query: any = queryString.parse(history.location.search);\n    Object.keys(values).forEach((key) => {\n      if (values[key] && values[key].length > 0) {\n        query[`filter[${key}][$regex]`] = `.*${values[key]}.*`;\n      }\n    });\n    handleFilterChange(query);\n  };\n\n  const handleFilterChange = (query) => {\n    query = decodeURI(queryString.stringify(query));\n    history.replace(`/data/${collectionName}?${query}`);\n  };\n\n  const clearFilter = () => {\n    let query: any = queryString.parse(history.location.search);\n    let resetQuery = {\n      action: query[\"action\"],\n      \"page[limit]\": query[\"page[limit]\"],\n      \"page[number]\": query[\"page[number]\"],\n    };\n    handleFilterChange(resetQuery);\n    setCollapsed(false);\n  };\n\n  return (\n    <>\n      <Badge count={Object.keys(queryParams).length - 3}>\n        <Button\n          onClick={() => {\n            setCollapsed(!collapsed);\n          }}\n        >\n          Filter <FilterOutlined />\n        </Button>\n      </Badge>\n      {collapsed && schema && (\n        <div\n          style={{\n            width: \"100vw\",\n            height: \"100vh\",\n            backgroundColor: \"transparent\",\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            zIndex: 10,\n          }}\n        >\n          <div\n            style={{\n              top: 0,\n              right: 0,\n              position: \"fixed\",\n              width: 350,\n              backgroundColor: \"white\",\n              height: \"100vh\",\n              padding: 20,\n              boxShadow: \"-28px 11px 75px -33px rgba(0,0,0,0.74)\",\n            }}\n          >\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n              <Col\n                className=\"gutter-row\"\n                span={4}\n                style={{ display: \"flex\", alignItems: \"center\" }}\n              >\n                <Button\n                  shape=\"circle\"\n                  icon={<CaretRightOutlined />}\n                  onClick={() => setCollapsed(false)}\n                  type=\"primary\"\n                />\n              </Col>\n              <Col className=\"gutter-row\" span={6}>\n                <span style={{ fontSize: 20 }}>Filters</span>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Form\n                  name=\"basic\"\n                  onFinish={handleSearch}\n                  onFinishFailed={() => {}}\n                  layout=\"vertical\"\n                  size=\"large\"\n                  style={{\n                    overflowY: \"auto\",\n                    height: \"100vh\",\n                  }}\n                >\n                  {schema &&\n                    Object.keys(schema).map((key: any) => {\n                      const schemaValue = getKeyValue<\n                        keyof ICollectionSchema,\n                        ICollectionSchema\n                      >(key)(schema);\n                      let initial;\n                      switch (schemaValue.type) {\n                        // case \"ref\":\n                        //   initial = queryParams[\n                        //     `filter[${schemaValue.name}][$regex]`\n                        //   ]\n                        //     ? queryParams[\n                        //         `filter[${schemaValue.name}][$regex]`\n                        //       ].replaceAll(\".*\", \"\")\n                        //     : \"\";\n                        //   return (\n                        //     <RefSelect\n                        //       schemaValue={schemaValue}\n                        //       action={\"create\"}\n                        //       selectedRecord={selectedCollection}\n                        //     />\n                        //   );\n\n                        case \"string\":\n                          initial = queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ]\n                            ? queryParams[\n                                `filter[${schemaValue.name}][$regex]`\n                              ].replaceAll(\".*\", \"\")\n                            : \"\";\n                          return (\n                            <Form.Item\n                              label={\n                                <span\n                                  style={{\n                                    textTransform: \"capitalize\",\n                                    color: \"#434343\",\n                                  }}\n                                >\n                                  {schemaValue.name}\n                                </span>\n                              }\n                              name={schemaValue.name}\n                              initialValue={initial}\n                            >\n                              {schemaValue.enum.length ? (\n                                <Select\n                                  placeholder={`Select ${schemaValue.name}`}\n                                >\n                                  <>\n                                    {schemaValue.enum.map((e: any) => (\n                                      <Option value={e}>{e}</Option>\n                                    ))}\n                                  </>\n                                </Select>\n                              ) : (\n                                <Input />\n                              )}\n                            </Form.Item>\n                          );\n\n                        case \"number\":\n                          initial = queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ]\n                            ? queryParams[\n                                `filter[${schemaValue.name}][$regex]`\n                              ].replaceAll(\".*\", \"\")\n                            : \"\";\n                          return (\n                            <Form.Item\n                              label={\n                                <span\n                                  style={{\n                                    textTransform: \"capitalize\",\n                                    color: \"#434343\",\n                                  }}\n                                >\n                                  {schemaValue.name}\n                                </span>\n                              }\n                              name={schemaValue.name}\n                              initialValue={initial}\n                            >\n                              <InputNumber style={{ width: 300 }} />\n                            </Form.Item>\n                          );\n                        case \"date\":\n                          initial = queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ]\n                            ? queryParams[\n                                `filter[${schemaValue.name}][$regex]`\n                              ].replaceAll(\".*\", \"\")\n                            : null;\n                          return (\n                            <Form.Item\n                              label={\n                                <span\n                                  style={{\n                                    textTransform: \"capitalize\",\n                                    color: \"#434343\",\n                                  }}\n                                >\n                                  {schemaValue.name}\n                                </span>\n                              }\n                              name={schemaValue.name}\n                              initialValue={initial && moment(initial)}\n                            >\n                              <DatePicker />\n                            </Form.Item>\n                          );\n                        case \"boolean\":\n                          initial = queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ]\n                            ? queryParams[\n                                `filter[${schemaValue.name}][$regex]`\n                              ].replaceAll(\".*\", \"\")\n                            : null;\n                          return (\n                            <Form.Item\n                              label={\n                                <span\n                                  style={{\n                                    textTransform: \"capitalize\",\n                                    color: \"#434343\",\n                                  }}\n                                >\n                                  {schemaValue.name}\n                                </span>\n                              }\n                              name={schemaValue.name}\n                              initialValue={initial}\n                            >\n                              <Select placeholder={`Select`}>\n                                <Option value={\"true\"}>True</Option>\n                                <Option value={\"false\"}>False</Option>\n                              </Select>\n                            </Form.Item>\n                          );\n\n                        default:\n                          return null;\n                      }\n                    })}\n\n                  <Form.Item\n                    style={{\n                      position: \"fixed\",\n                      bottom: 10,\n                      display: \"flex\",\n                      width: \"100%\",\n                    }}\n                  >\n                    <Space>\n                      <Button type=\"primary\" htmlType=\"submit\">\n                        Search\n                      </Button>\n                      <Button onClick={clearFilter}>Clear</Button>\n                    </Space>\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport { TableFilter };\n","import { Dispatch, useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  Table,\n  PageHeader,\n  Button,\n  Tag,\n  Modal,\n  message,\n  Breadcrumb,\n  Image,\n  Space,\n  Menu,\n  Dropdown,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../http\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { CollectionsState } from \"../types/global\";\nimport queryString from \"query-string\";\nimport CreateCollectionAction from \"../components/DataFlow/CreateCollectionAction\";\nimport ShowCollectionAction from \"../components/DataFlow/ShowCollectionAction\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n  MoreOutlined,\n  MenuOutlined,\n} from \"@ant-design/icons\";\n\nimport moment from \"moment\";\nimport prettySize from \"prettysize\";\nimport UpdateCollectionAction from \"../components/DataFlow/UpdateCollectionAction\";\nimport { TableFilter } from \"../components/DataFlow/TableFilter\";\nimport useBreadcrumbs from \"use-react-router-breadcrumbs\";\n\nconst { Column } = Table;\nconst { confirm } = Modal;\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction DataFlowDetailPage() {\n  const { collection: collectionName }: any = useParams();\n  const history = useHistory();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const query = history.location.search;\n  const [list, setList] = useState<Array<{ name: string; type: string }>>([]);\n  const [columns, setColumns] = useState([]);\n  const breadcrumbs = useBreadcrumbs();\n\n  const [loading, setLoading] = useState(true);\n  const [rowSelection, setRowSelection] = useState<any>([]);\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  const selectedCollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const getCollectionList = async (model: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {},\n      };\n      const { data } = await crudCollection(action, query);\n      setPagination(data.pagination);\n      setList(data.list);\n      setColumns(data.column);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteRecord = async (id: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.delete,\n        data: {\n          id: id,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Record Deleted\");\n      getCollectionList(collectionName);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: rowSelection,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setRowSelection([]);\n      getCollectionList(collectionName);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (selectedCollection && queryParams[\"action\"] === \"list\") {\n      setColumns([]);\n      setList([]);\n      getCollectionList(collectionName);\n    }\n  }, [collectionName, selectedCollection, window.location.href]);\n\n  const dataSource = list\n    ? list.map((l: any, index) => ({ key: index, ...l }))\n    : [];\n\n  const dataColumns: any = columns\n    ? columns.map(\n        ({\n          name,\n          type,\n          file,\n        }: {\n          name: string;\n          type: string;\n          file: boolean;\n        }) => ({\n          title: name.toString(),\n          dataIndex: name.toString(),\n          key: name.toString(),\n          type,\n          file,\n        })\n      )\n    : [];\n\n  dataColumns.push({\n    title: \"Action\",\n    key: \"operation\",\n    fixed: \"right\",\n    width: 20,\n    type: \"operation\",\n  });\n\n  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    let query: any = queryString.parse(history.location.search);\n    query[\"page[number]\"] = pagination.current;\n    query[\"page[limit]\"] = pagination.pageSize;\n    query = decodeURI(queryString.stringify(query));\n    history.replace(`/data/${selectedCollection.name}?${query}`);\n  };\n\n  if (\n    queryParams.action &&\n    queryParams.action === \"create\" &&\n    selectedCollection\n  )\n    return <CreateCollectionAction />;\n  if (\n    queryParams.action &&\n    queryParams.action === \"update\" &&\n    selectedCollection\n  )\n    return <UpdateCollectionAction />;\n\n  if (queryParams.action && queryParams.action === \"show\" && selectedCollection)\n    return <ShowCollectionAction />;\n\n  return (\n    <>\n      <PageHeader\n        style={{ marginTop: 2 }}\n        ghost={false}\n        onBack={() => window.history.back()}\n        title={\n          <Space>\n            <span style={{ textTransform: \"capitalize\" }}>\n              {collectionName}{\" \"}\n            </span>\n            {pagination?.total > 0 && (\n              <Tag color=\"geekblue\">{pagination.total}</Tag>\n            )}\n            <Breadcrumb>\n              {breadcrumbs.map(({ match, breadcrumb }) => (\n                <Breadcrumb.Item>\n                  <Link to={match.url}>{breadcrumb}</Link>\n                </Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          </Space>\n        }\n        extra={[\n          rowSelection.length ? (\n            <Button\n              onClick={() => {\n                return confirm({\n                  title: \"Sure you want to delete selected records?\",\n                  icon: <ExclamationCircleOutlined />,\n                  content: null,\n                  onOk() {\n                    deleteManyRecord();\n                  },\n                  onCancel() {\n                    console.log(\"Cancel\");\n                  },\n                });\n              }}\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          ) : null,\n          <TableFilter selectedCollection={selectedCollection} />,\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => {\n              history.push(`/data/${collectionName}?action=create`);\n            }}\n          >\n            <PlusOutlined />\n            Create\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Table\n        loading={loading}\n        style={{\n          padding: 10,\n        }}\n        scroll={{ x: \"100vw\" }}\n        dataSource={dataSource}\n        size=\"middle\"\n        rowKey={(record) => record._id}\n        rowSelection={{\n          selectedRowKeys: rowSelection,\n          onChange: (selectedRows) => {\n            setRowSelection(selectedRows);\n          },\n        }}\n        pagination={pagination}\n        onChange={handleTableChange}\n      >\n        {dataColumns.map((column: any) => {\n          switch (column.type) {\n            case \"objectId\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>ID</span>\n                  }\n                  width={100}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  fixed=\"left\"\n                />\n              );\n            case \"boolean\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={100}\n                  render={(text, record, index) => {\n                    if (text === undefined) return null;\n                    return (\n                      <>\n                        {text ? (\n                          <Tag\n                            color={\"green\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <Tag\n                            color={\"red\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n\n            case \"date\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={100}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: Date) => {\n                    return text ? (\n                      <span>{moment(text).format(\"MM/DD/YYYY hh:mm\")}</span>\n                    ) : null;\n                  }}\n                />\n              );\n\n            case \"mixed\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      <Tag color=\"magenta\">JSON</Tag>\n                    </span>\n                  }\n                  width={100}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: any) => {\n                    return text ? (\n                      <span>\n                        {Object.keys(text).map((key) => (\n                          <Tag>{key}</Tag>\n                        ))}\n                      </span>\n                    ) : null;\n                  }}\n                />\n              );\n            case \"operation\":\n              return (\n                <Column\n                  title={\n                    <Space>\n                      <MenuOutlined />\n                    </Space>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={30}\n                  fixed=\"right\"\n                  render={(text, record: any) => {\n                    return (\n                      <Dropdown\n                        overlay={\n                          <Menu>\n                            <Menu.Item>\n                              <Button\n                                style={{ width: \"100%\" }}\n                                className=\"button-blue\"\n                                icon={<EyeOutlined />}\n                                onClick={() => {\n                                  history.push(\n                                    `/data/${collectionName}?action=show&id=${record._id}`\n                                  );\n                                }}\n                              >\n                                View\n                              </Button>\n                            </Menu.Item>\n                            <Menu.Item>\n                              <Button\n                                style={{ width: \"100%\" }}\n                                className=\"button-green\"\n                                icon={<EditOutlined />}\n                                onClick={() => {\n                                  history.push(\n                                    `/data/${collectionName}?action=update&id=${record._id}`\n                                  );\n                                }}\n                              >\n                                Edit\n                              </Button>\n                            </Menu.Item>\n                            <Menu.Item>\n                              <Button\n                                icon={<DeleteOutlined />}\n                                className=\"button-red\"\n                                onClick={() => {\n                                  return confirm({\n                                    title:\n                                      \"Sure you want to delete this record?\",\n                                    icon: <ExclamationCircleOutlined />,\n                                    content: null,\n                                    onOk() {\n                                      deleteRecord(record._id);\n                                    },\n                                    onCancel() {\n                                      console.log(\"Cancel\");\n                                    },\n                                  });\n                                }}\n                              >\n                                Delete\n                              </Button>\n                            </Menu.Item>\n                          </Menu>\n                        }\n                        placement=\"bottomLeft\"\n                      >\n                        <MoreOutlined\n                          style={{ cursor: \"pointer\", maxHeight: 10 }}\n                        />\n                      </Dropdown>\n                    );\n                  }}\n                />\n              );\n            case \"hasone\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">File</Tag>}\n                    </span>\n                  }\n                  width={100}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      text && (\n                        <Space direction=\"vertical\">\n                          {column.file ? (\n                            <Space>\n                              <Image\n                                preview={false}\n                                width={100}\n                                height={100}\n                                src={\"/admin/file/get/\" + text.filename}\n                                fallback={\"/img/file.svg\"}\n                              />\n\n                              <span\n                                style={{\n                                  color: \"GrayText\",\n                                  display: \"flex\",\n                                  justifyContent: \"space-between\",\n                                  flexDirection: \"column\",\n                                }}\n                              >\n                                <b>{text.originalname}</b>\n                                {prettySize(text.size)} {text.mimetype}\n                              </span>\n                            </Space>\n                          ) : typeof text === \"string\" ? (\n                            <Link\n                              to={`/data/${column.key}?action=show&id=${text}`}\n                            >\n                              <span>{text} </span>\n                            </Link>\n                          ) : (\n                            Object.values(text).map((value, index) => {\n                              if (!(typeof value === \"string\")) return null;\n                              if (index === 1) return <span>{value} </span>;\n                              return null;\n                            })\n                          )}\n                        </Space>\n                      )\n                    );\n                  }}\n                />\n              );\n            case \"hasmany\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-around\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">Files</Tag>}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      <span>\n                        {text?.length} {column.title}\n                      </span>\n                    );\n                  }}\n                ></Column>\n              );\n            default:\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={100}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text = \"\") => {\n                    return (\n                      <>\n                        {selectedCollection.schema[column.key].enum.length >\n                        0 ? (\n                          <Tag\n                            color=\"geekblue\"\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <span>\n                            {text.toString().slice(0, 80)}\n                            {text.toString().length > 80 ? \"...\" : null}\n                          </span>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n          }\n        })}\n      </Table>\n    </>\n  );\n}\n\nexport default DataFlowDetailPage;\n","import {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { Layout, Alert, Button } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport { initData } from \"./store/actionCreators\";\n// components\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport SchemaFlowPage from \"./pages/SchemaFlowPage\";\nimport DataFlowPage from \"./pages/DataFlowPage\";\nimport FilePage from \"./pages/FilePage\";\nimport AuthPage from \"./pages/AuthPage\";\nimport ApiDocsPage from \"./pages/ApiDocsPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport DataFlowDetailPage from \"./pages/DataFlowDetailPage\";\n\nconst { Content } = Layout;\n\nfunction ErrorFallback({ error, resetErrorBoundary }) {\n  return (\n    <Alert\n      message=\"Something broke, please try again\"\n      description={error.message}\n      type=\"error\"\n      action={\n        <Button onClick={resetErrorBoundary} size=\"small\" danger>\n          Detail\n        </Button>\n      }\n    />\n  );\n}\n\nfunction App() {\n  const isAuth = localStorage.getItem(\"token\");\n\n  return (\n    <Layout className=\"main\">\n      <ErrorBoundary\n        FallbackComponent={ErrorFallback}\n        onReset={() => {\n          // reset the state of your app so the error doesn't happen again\n        }}\n      >\n        <Router basename=\"/admin-ui\">\n          {isAuth ? (\n            AuthRoutes()\n          ) : (\n            <>\n              <Route path=\"/register\" component={RegisterPage} />\n              <Route path=\"/login\" component={LoginPage} />\n              <Redirect path=\"/\" to=\"/login\" />\n            </>\n          )}\n        </Router>\n      </ErrorBoundary>\n    </Layout>\n  );\n}\n\nconst AuthRoutes = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, []);\n\n  return (\n    <>\n      <SideBar />\n      <Layout>\n        <Header />\n        <Content style={{ overflow: \"auto\" }}>\n          <Switch>\n            <Route path=\"/\" exact component={SchemaFlowPage} />\n            <Route path=\"/collections\" exact component={CollectionsPage} />\n            <Route path=\"/data\" exact component={DataFlowPage} />\n            <Route\n              path=\"/data/:collection\"\n              exact\n              component={DataFlowDetailPage}\n            />\n            <Route path=\"/files\" exact component={FilePage} />\n            <Route path=\"/auth\" exact component={AuthPage} />\n            <Route path=\"/api-docs\" exact component={ApiDocsPage} />\n          </Switch>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  CollectionAction,\n} from \"../types/global\";\n\nconst initialState: CollectionsState = {\n  collections: [],\n  selectedCollection: undefined,\n};\n\nconst reducer = (\n  state: CollectionsState = initialState,\n  action: CollectionAction\n): CollectionsState => {\n  switch (action.type) {\n    case actionTypes.INIT_COLLECTION:\n      return {\n        ...state,\n        collections: action.collections || [],\n      };\n    case actionTypes.ADD_COLLECTION:\n      return {\n        ...state,\n        collections: state.collections\n          .concat(action.collection)\n          .sort((a, b) => a.name.localeCompare(b.name)),\n      };\n\n    case actionTypes.REMOVE_COLLECTION:\n      const updatedCollections: ICollection[] = state.collections\n        .filter((article) => article.id !== action.collection.id)\n        .sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...state,\n        collections: updatedCollections,\n        selectedCollection: undefined,\n      };\n\n    case actionTypes.SET_COLLECTION:\n      const selectedCollection: ICollection = action.collection;\n\n      return {\n        ...state,\n        selectedCollection,\n      };\n\n    case actionTypes.UPDATE_COLLECTION:\n      const updatedCollection: ICollection = action.collection;\n\n      state.collections = state.collections.map((collection) => {\n        if (collection.id === updatedCollection.id) {\n          return updatedCollection;\n        }\n        return collection;\n      });\n\n      state.selectedCollection = updatedCollection;\n\n      return { ...state };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// state\nimport reducer from \"./store/reducer\";\n\nimport {\n  CollectionsState,\n  CollectionAction,\n  DispatchType,\n} from \"./types/global\";\n\nconst store: Store<CollectionsState, CollectionAction> & {\n  dispatch: DispatchType;\n} = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}